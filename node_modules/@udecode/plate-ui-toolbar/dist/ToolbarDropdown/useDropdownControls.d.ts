/// <reference types="react" />
import { ExtendedRefs } from '@udecode/plate-floating';
declare type useDropdownControlsProps = {
    open: boolean;
    onClose?: (ev: MouseEvent) => void;
};
export declare const useDropdownControls: ({ open, onClose, }: useDropdownControlsProps) => {
    placement: import("@udecode/plate-floating").Placement;
    strategy: import("@udecode/plate-floating").Strategy;
    middlewareData: import("@udecode/plate-floating").MiddlewareData;
    x: number | null;
    y: number | null;
    update: () => void;
    reference: (node: HTMLElement | null) => void;
    floating: (node: HTMLElement | null) => void;
    positionReference: (node: import("@udecode/plate-floating").ReferenceType | null) => void;
    context: {
        placement: import("@udecode/plate-floating").Placement;
        x: number | null;
        y: number | null;
        strategy: import("@udecode/plate-floating").Strategy;
        middlewareData: import("@udecode/plate-floating").MiddlewareData;
        update: () => void;
        reference: (node: HTMLElement | null) => void;
        floating: (node: HTMLElement | null) => void;
        isPositioned: boolean;
        open: boolean;
        onOpenChange: (open: boolean) => void;
        events: import("@udecode/plate-floating").FloatingEvents;
        dataRef: import("react").MutableRefObject<import("@udecode/plate-floating").ContextData>;
        nodeId: string | undefined;
        floatingId: string;
        refs: ExtendedRefs<HTMLElement>;
        elements: import("@floating-ui/react").ExtendedElements<HTMLElement>;
    };
    refs: ExtendedRefs<HTMLElement>;
    elements: import("@floating-ui/react").ExtendedElements<HTMLElement>;
    isPositioned: boolean;
    styles: {
        position: import("@udecode/plate-floating").Strategy;
        top: number;
        left: number;
        width: string;
    };
};
export {};
//# sourceMappingURL=useDropdownControls.d.ts.map