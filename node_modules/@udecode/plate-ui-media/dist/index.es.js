import { offset, flip, shift, ElementPopover } from '@udecode/plate-floating';
import { createStyles } from '@udecode/plate-styled-components';
import _styled, { css } from 'styled-components';
import React, { forwardRef } from 'react';
import { createComponentAs, createElementAs, useEditorRef, findNodePath, removeNodes, focusEditor, useElement, Box, usePlateEditorRef, useEventPlateId } from '@udecode/plate-common';
import { FloatingMedia, useFloatingMediaSelectors, Media, MediaEmbed, Caption, useMediaStore, ELEMENT_MEDIA_EMBED, Image, ELEMENT_IMAGE, insertImage, insertMediaEmbed } from '@udecode/plate-media';
import { useFocused, useSelected, useReadOnly } from 'slate-react';
import { LinkIcon } from '@udecode/plate-link';
import { floatingRootCss, floatingRowCss, floatingButtonCss, floatingInputCss, FloatingVerticalDivider, FloatingInputWrapper, FloatingIconWrapper, ToolbarButton } from '@udecode/plate-ui-toolbar';

const mediaFloatingOptions = {
  middleware: [offset(-6), flip({
    padding: 96
  }), shift()]
};

const getResizableCss = ({
  focused,
  selected,
  align
} = {}) => {
  const handle = css(["", " ::after{", ";", ";", ";", ";", ";content:' ';width:3px;height:64px;border-radius:6px;}:hover,:focus,:active{::after{", ";}}"], {
    "position": "absolute",
    "top": "0px",
    "zIndex": "10",
    "display": "flex",
    "height": "100%",
    "width": "1.5rem",
    "userSelect": "none",
    "flexDirection": "column",
    "justifyContent": "center"
  }, {
    "opacity": "0"
  }, focused && selected && {
    "opacity": "1"
  }, {
    ".group:hover &": {
      "opacity": "1"
    }
  }, {
    "display": "flex"
  }, {
    "--tw-bg-opacity": "1",
    "backgroundColor": "rgb(156 163 175 / var(--tw-bg-opacity))"
  }, {
    "--tw-bg-opacity": "1",
    "backgroundColor": "rgb(59 130 246 / var(--tw-bg-opacity))"
  });
  const resizable = [align === 'center' && {
    "marginLeft": "auto",
    "marginRight": "auto"
  }, align === 'right' && {
    "marginLeft": "auto"
  }];
  const handleLeft = [...handle, {
    "left": "-0.75rem",
    "marginLeft": "-0.75rem",
    "paddingLeft": "0.75rem"
  }];
  const handleRight = [...handle, {
    "right": "-0.75rem",
    "marginRight": "-0.75rem",
    "alignItems": "flex-end",
    "paddingRight": "0.75rem"
  }];
  return {
    resizable,
    handleLeft,
    handleRight
  };
};
const getCaptionCss = ({
  align,
  caption
} = {}) => {
  return {
    figcaption: [align === 'center' && {
      "marginLeft": "auto",
      "marginRight": "auto"
    }, align === 'right' && {
      "marginLeft": "auto"
    }, css(["max-width:100%;"])],
    caption: [{
      "marginTop": "0.5rem",
      "width": "100%",
      "resize": "none",
      "borderStyle": "none",
      "padding": "0px",
      ":focus": {
        "outline": "2px solid transparent",
        "outlineOffset": "2px"
      }
    }, (caption === null || caption === void 0 ? void 0 : caption.align) === 'center' && {
      "textAlign": "center"
    }, (caption === null || caption === void 0 ? void 0 : caption.align) === 'right' && {
      "textAlign": "right"
    }, css(["font:inherit;color:inherit;background-color:inherit;:focus{::placeholder{opacity:0;}}"])]
  };
};
const getImageElementStyles = props => {
  const {
    focused,
    selected,
    align = 'center',
    caption = {
      align: 'center'
    }
  } = props;
  return createStyles({
    prefixClassNames: 'ImageElement',
    ...props
  }, {
    root: [{
      "paddingTop": "0.625rem",
      "paddingBottom": "0.625rem"
    }],
    figure: [{
      "position": "relative",
      "margin": "0px"
    }],
    img: [{
      "display": "block",
      "width": "100%",
      "maxWidth": "100%",
      "cursor": "pointer",
      "paddingLeft": "0px",
      "paddingRight": "0px"
    }, {
      "borderRadius": "3px",
      "objectFit": "cover"
    }, focused && selected && {
      "--tw-shadow": "0 0 0 1px rgb(59,130,249)",
      "--tw-shadow-colored": "0 0 0 1px var(--tw-shadow-color)",
      "boxShadow": "var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)"
    }],
    ...getCaptionCss({
      caption,
      align
    }),
    ...getResizableCss({
      selected,
      focused,
      align
    })
  });
};

function _extends$1() {
  _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends$1.apply(this, arguments);
}

const getMediaEmbedElementStyles = props => {
  const {
    selected,
    readOnly,
    provider,
    focused
  } = props;
  let boxShadow;

  if (!readOnly && selected) {
    boxShadow = `0 0 0 1px rgb(59 130 249)`;
  }

  const providersPadding = {
    youtube: '56.2061%',
    vimeo: '75%',
    youku: '56.25%',
    dailymotion: '56.0417%',
    coub: '51.25%'
  };
  const providerPadding = provider !== 'twitter' ? provider && providersPadding[provider] || '56.0417%' : undefined;
  const resizable = getResizableCss({
    align: 'center',
    focused,
    selected
  });
  return createStyles({
    prefixClassNames: 'MediaEmbedElement',
    ...props
  }, {
    root: {
      "position": "relative",
      "paddingTop": "0.625rem",
      "paddingBottom": "0.625rem"
    },
    figure: [{
      "position": "relative",
      "margin": "0px",
      "width": "100%"
    }, provider === 'twitter' && css([".twitter-tweet{margin:0 auto !important;padding:2px;box-shadow:", ";}"], boxShadow)],
    iframeWrapper: css(["padding-bottom:", ";"], providerPadding),
    iframe: [{
      "position": "absolute",
      "left": "0px",
      "top": "0px",
      "height": "100%",
      "width": "100%"
    }, css(["border-radius:3px;box-shadow:", ";"], boxShadow)],
    ...getCaptionCss({
      align: 'center',
      caption: {
        align: 'center'
      }
    }),
    ...resizable,
    handleRight: [...resizable.handleRight, provider === 'twitter' && {
      "marginRight": "-1rem"
    }]
  });
};

const Button = createComponentAs(props => createElementAs('button', props));

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

const plateButtonCss = [{
  "position": "relative",
  "boxSizing": "border-box",
  "display": "inline-flex",
  "maxWidth": "100%",
  "alignItems": "center",
  "justifyContent": "center",
  "> :not([hidden]) ~ :not([hidden])": {
    "--tw-space-x-reverse": "0",
    "marginRight": "calc(0.5rem * var(--tw-space-x-reverse))",
    "marginLeft": "calc(0.5rem * calc(1 - var(--tw-space-x-reverse)))"
  },
  "padding": "0px",
  "textAlign": "center"
}, {
  "cursor": "pointer",
  "borderWidth": "0px",
  "fontWeight": "500",
  ":focus": {
    "outline": "2px solid transparent !important",
    "outlineOffset": "2px !important"
  }
}, {
  "--tw-bg-opacity": "1",
  "backgroundColor": "rgb(255 255 255 / var(--tw-bg-opacity))",
  ":hover": {
    "--tw-bg-opacity": "1",
    "backgroundColor": "rgb(243 244 246 / var(--tw-bg-opacity))"
  },
  ":active": {
    "--tw-bg-opacity": "1",
    "backgroundColor": "rgb(229 231 235 / var(--tw-bg-opacity))"
  }
}, {
  "minHeight": "28px",
  "minWidth": "28px",
  "paddingLeft": "0.625rem",
  "paddingRight": "0.625rem",
  "paddingTop": "0px",
  "paddingBottom": "0px"
}, css(["font-family:inherit;font-size:14px;border-radius:3px;color:inherit;:active{color:inherit;}:visited{color:inherit;}"])];
const PlateButton = /*#__PURE__*/forwardRef(({
  size,
  px,
  py,
  css: _css,
  ...props
}, ref) => /*#__PURE__*/React.createElement(_StyledButton, _extends({
  type: "button",
  ref: ref
}, props)));

var _StyledButton = _styled(Button).withConfig({
  displayName: "PlateButton___StyledButton",
  componentId: "sc-wfqywr-0"
})(["", ""], plateButtonCss);

const Icon = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    iconVerticalAlign,
    size,
    title,
    ...otherProps
  } = props;
  const iconProps = {
    height: props.height !== undefined ? props.height : size,
    width: props.width !== undefined ? props.width : size,
    'aria-hidden': title == null ? 'true' : undefined,
    focusable: 'false',
    role: title != null ? 'img' : undefined,
    ...otherProps
  };
  return /*#__PURE__*/React.createElement("svg", _extends({}, iconProps, {
    ref: ref
  }), title && /*#__PURE__*/React.createElement("title", {
    key: "icon-title"
  }, title), children);
});

const StyledIcon = _styled(Icon).withConfig({
  displayName: "StyledIcon",
  componentId: "sc-1lmwuuu-0"
})(["display:inline-block;vertical-align:", ";overflow:hidden;height:100%;"], props => props.iconVerticalAlign);

const DeleteIcon = props => /*#__PURE__*/React.createElement(StyledIcon, _extends({
  viewBox: "0 0 24 24",
  fill: "currentColor"
}, props), /*#__PURE__*/React.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
}), /*#__PURE__*/React.createElement("path", {
  d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
}));

const RemoveNodeButton = ({
  element,
  children,
  ...props
}) => {
  const editor = useEditorRef();
  return /*#__PURE__*/React.createElement(PlateButton, _extends({
    onClick: () => {
      const path = findNodePath(editor, element);
      removeNodes(editor, {
        at: path
      });
      focusEditor(editor, editor.selection);
    }
  }, props), /*#__PURE__*/React.createElement(_StyledDeleteIcon, null), children);
};

var _StyledDeleteIcon = _styled(DeleteIcon).withConfig({
  displayName: "RemoveNodeButton___StyledDeleteIcon",
  componentId: "sc-nzabn0-0"
})({
  "width": "1rem"
});

_styled(StyledIcon).withConfig({
  displayName: "ChevronDownIcon___StyledStyledIcon",
  componentId: "sc-1mognml-0"
})({
  "pointerEvents": "none",
  "display": "inline",
  "height": "100%",
  "maxHeight": "100%",
  "maxWidth": "100%",
  "userSelect": "none",
  "overflow": "hidden",
  "textAlign": "center",
  "verticalAlign": "middle"
});

const PlateFloatingMedia = ({
  pluginKey
}) => {
  const isEditing = useFloatingMediaSelectors().isEditing();
  const element = useElement();
  return /*#__PURE__*/React.createElement(_StyledDiv$1, null, !isEditing ? /*#__PURE__*/React.createElement(_StyledDiv2, null, /*#__PURE__*/React.createElement(_StyledFloatingMediaEditButton, null, "Edit link"), /*#__PURE__*/React.createElement(FloatingVerticalDivider, null), /*#__PURE__*/React.createElement(_StyledRemoveNodeButton, {
    element: element
  })) : /*#__PURE__*/React.createElement(_StyledDiv3, null, /*#__PURE__*/React.createElement(FloatingInputWrapper, null, /*#__PURE__*/React.createElement(FloatingIconWrapper, null, /*#__PURE__*/React.createElement(LinkIcon, {
    width: 18
  })), /*#__PURE__*/React.createElement(_StyledFloatingMediaUrlInput, {
    placeholder: "Paste the embed link...",
    pluginKey: pluginKey
  }))));
};

var _StyledDiv$1 = _styled("div").withConfig({
  displayName: "PlateFloatingMedia___StyledDiv",
  componentId: "sc-1sqs53t-0"
})(["", ""], floatingRootCss);

var _StyledDiv2 = _styled("div").withConfig({
  displayName: "PlateFloatingMedia___StyledDiv2",
  componentId: "sc-1sqs53t-1"
})(["", ""], floatingRowCss);

var _StyledFloatingMediaEditButton = _styled(FloatingMedia.EditButton).withConfig({
  displayName: "PlateFloatingMedia___StyledFloatingMediaEditButton",
  componentId: "sc-1sqs53t-2"
})(["", ""], plateButtonCss);

var _StyledRemoveNodeButton = _styled(RemoveNodeButton).withConfig({
  displayName: "PlateFloatingMedia___StyledRemoveNodeButton",
  componentId: "sc-1sqs53t-3"
})(["", ""], floatingButtonCss);

var _StyledDiv3 = _styled("div").withConfig({
  displayName: "PlateFloatingMedia___StyledDiv3",
  componentId: "sc-1sqs53t-4"
})({
  "display": "flex",
  "width": "330px",
  "flexDirection": "column"
});

var _StyledFloatingMediaUrlInput = _styled(FloatingMedia.UrlInput).withConfig({
  displayName: "PlateFloatingMedia___StyledFloatingMediaUrlInput",
  componentId: "sc-1sqs53t-5"
})(["", ""], floatingInputCss);

const MediaEmbedElement = props => {
  var _styles$figure, _styles$resizable, _styles$resizable2, _styles$iframeWrapper, _styles$iframeWrapper2, _styles$iframe, _styles$iframe2, _styles$figcaption, _styles$figcaption2, _styles$caption, _caption$placeholder, _styles$caption2;

  const {
    children,
    nodeProps,
    caption = {},
    popoverProps = {}
  } = props;
  const {
    as,
    ...rootProps
  } = props;
  const focused = useFocused();
  const selected = useSelected();
  const readOnly = useReadOnly();
  const {
    provider
  } = useMediaStore().get.urlData();
  const styles = getMediaEmbedElementStyles({ ...props,
    provider,
    selected,
    focused,
    readOnly
  });
  return /*#__PURE__*/React.createElement(ElementPopover, _extends$1({
    content: /*#__PURE__*/React.createElement(PlateFloatingMedia, {
      pluginKey: ELEMENT_MEDIA_EMBED
    }),
    floatingOptions: mediaFloatingOptions
  }, popoverProps), /*#__PURE__*/React.createElement(_StyledMediaRoot$1, _extends$1({}, rootProps, {
    $_css: styles.root.css
  }), /*#__PURE__*/React.createElement(_StyledFigure$1, {
    className: "group",
    contentEditable: false,
    $_css2: (_styles$figure = styles.figure) === null || _styles$figure === void 0 ? void 0 : _styles$figure.css
  }, /*#__PURE__*/React.createElement(_StyledMediaResizable$1, {
    className: (_styles$resizable = styles.resizable) === null || _styles$resizable === void 0 ? void 0 : _styles$resizable.className,
    maxWidth: provider === 'twitter' ? 550 : '100%',
    minWidth: provider === 'twitter' ? 300 : 100,
    renderHandleLeft: htmlProps => {
      var _styles$handleLeft, _styles$handleLeft2;

      return /*#__PURE__*/React.createElement(_StyledBox$1, _extends$1({}, htmlProps, {
        className: (_styles$handleLeft = styles.handleLeft) === null || _styles$handleLeft === void 0 ? void 0 : _styles$handleLeft.className,
        $_css4: [(_styles$handleLeft2 = styles.handleLeft) === null || _styles$handleLeft2 === void 0 ? void 0 : _styles$handleLeft2.css]
      }));
    },
    renderHandleRight: htmlProps => {
      var _styles$handleRight, _styles$handleRight2;

      return /*#__PURE__*/React.createElement(_StyledBox2$1, _extends$1({}, htmlProps, {
        className: (_styles$handleRight = styles.handleRight) === null || _styles$handleRight === void 0 ? void 0 : _styles$handleRight.className,
        $_css5: (_styles$handleRight2 = styles.handleRight) === null || _styles$handleRight2 === void 0 ? void 0 : _styles$handleRight2.css
      }));
    },
    $_css3: (_styles$resizable2 = styles.resizable) === null || _styles$resizable2 === void 0 ? void 0 : _styles$resizable2.css
  }, /*#__PURE__*/React.createElement(_StyledDiv, {
    className: (_styles$iframeWrapper = styles.iframeWrapper) === null || _styles$iframeWrapper === void 0 ? void 0 : _styles$iframeWrapper.className,
    $_css6: (_styles$iframeWrapper2 = styles.iframeWrapper) === null || _styles$iframeWrapper2 === void 0 ? void 0 : _styles$iframeWrapper2.css
  }, /*#__PURE__*/React.createElement(_StyledMediaEmbed, _extends$1({
    className: (_styles$iframe = styles.iframe) === null || _styles$iframe === void 0 ? void 0 : _styles$iframe.className
  }, nodeProps, {
    $_css7: (_styles$iframe2 = styles.iframe) === null || _styles$iframe2 === void 0 ? void 0 : _styles$iframe2.css
  })))), !caption.disabled && /*#__PURE__*/React.createElement(_StyledCaptionRoot$1, {
    className: (_styles$figcaption = styles.figcaption) === null || _styles$figcaption === void 0 ? void 0 : _styles$figcaption.className,
    $_css8: (_styles$figcaption2 = styles.figcaption) === null || _styles$figcaption2 === void 0 ? void 0 : _styles$figcaption2.css
  }, /*#__PURE__*/React.createElement(_StyledCaptionTextarea$1, {
    className: (_styles$caption = styles.caption) === null || _styles$caption === void 0 ? void 0 : _styles$caption.className,
    placeholder: (_caption$placeholder = caption.placeholder) !== null && _caption$placeholder !== void 0 ? _caption$placeholder : 'Write a caption...',
    $_css9: (_styles$caption2 = styles.caption) === null || _styles$caption2 === void 0 ? void 0 : _styles$caption2.css
  }))), children));
};

var _StyledMediaRoot$1 = _styled(Media.Root).withConfig({
  displayName: "MediaEmbedElement___StyledMediaRoot",
  componentId: "sc-v088o8-0"
})(["", ""], p => p.$_css);

var _StyledFigure$1 = _styled("figure").withConfig({
  displayName: "MediaEmbedElement___StyledFigure",
  componentId: "sc-v088o8-1"
})(["", ""], p => p.$_css2);

var _StyledMediaResizable$1 = _styled(Media.Resizable).withConfig({
  displayName: "MediaEmbedElement___StyledMediaResizable",
  componentId: "sc-v088o8-2"
})(["", ""], p => p.$_css3);

var _StyledBox$1 = _styled(Box).withConfig({
  displayName: "MediaEmbedElement___StyledBox",
  componentId: "sc-v088o8-3"
})(["", ""], p => p.$_css4);

var _StyledBox2$1 = _styled(Box).withConfig({
  displayName: "MediaEmbedElement___StyledBox2",
  componentId: "sc-v088o8-4"
})(["", ""], p => p.$_css5);

var _StyledDiv = _styled("div").withConfig({
  displayName: "MediaEmbedElement___StyledDiv",
  componentId: "sc-v088o8-5"
})(["", ""], p => p.$_css6);

var _StyledMediaEmbed = _styled(MediaEmbed).withConfig({
  displayName: "MediaEmbedElement___StyledMediaEmbed",
  componentId: "sc-v088o8-6"
})(["", ""], p => p.$_css7);

var _StyledCaptionRoot$1 = _styled(Caption.Root).withConfig({
  displayName: "MediaEmbedElement___StyledCaptionRoot",
  componentId: "sc-v088o8-7"
})(["", ""], p => p.$_css8);

var _StyledCaptionTextarea$1 = _styled(Caption.Textarea).withConfig({
  displayName: "MediaEmbedElement___StyledCaptionTextarea",
  componentId: "sc-v088o8-8"
})(["", ""], p => p.$_css9);

const ImageElement = props => {
  var _styles$figure, _styles$figure2, _styles$resizable, _styles$resizable2, _styles$img, _styles$img2, _styles$figcaption, _styles$figcaption2, _styles$caption, _caption$placeholder, _styles$caption2;

  const {
    children,
    nodeProps,
    caption = {},
    popoverProps = {},
    resizableProps,
    align = 'center',
    ignoreReadOnly = false
  } = props;
  const {
    as,
    ...rootProps
  } = props;
  const focused = useFocused();
  const selected = useSelected();
  const readOnly = useReadOnly();
  const styles = getImageElementStyles({ ...props,
    align,
    focused,
    selected
  });
  return /*#__PURE__*/React.createElement(ElementPopover, _extends$1({
    content: /*#__PURE__*/React.createElement(PlateFloatingMedia, {
      pluginKey: ELEMENT_IMAGE
    }),
    floatingOptions: mediaFloatingOptions
  }, popoverProps), /*#__PURE__*/React.createElement(_StyledMediaRoot, _extends$1({}, rootProps, {
    $_css: styles.root.css
  }), /*#__PURE__*/React.createElement(_StyledFigure, {
    className: `group ${(_styles$figure = styles.figure) === null || _styles$figure === void 0 ? void 0 : _styles$figure.className}`,
    contentEditable: false,
    $_css2: (_styles$figure2 = styles.figure) === null || _styles$figure2 === void 0 ? void 0 : _styles$figure2.css
  }, /*#__PURE__*/React.createElement(_StyledMediaResizable, _extends$1({
    className: (_styles$resizable = styles.resizable) === null || _styles$resizable === void 0 ? void 0 : _styles$resizable.className,
    renderHandleLeft: htmlProps => {
      var _styles$handleLeft, _styles$handleLeft2;

      return /*#__PURE__*/React.createElement(_StyledBox, _extends$1({}, htmlProps, {
        className: (_styles$handleLeft = styles.handleLeft) === null || _styles$handleLeft === void 0 ? void 0 : _styles$handleLeft.className,
        $_css4: [(_styles$handleLeft2 = styles.handleLeft) === null || _styles$handleLeft2 === void 0 ? void 0 : _styles$handleLeft2.css]
      }));
    },
    renderHandleRight: htmlProps => {
      var _styles$handleRight, _styles$handleRight2;

      return /*#__PURE__*/React.createElement(_StyledBox2, _extends$1({}, htmlProps, {
        className: (_styles$handleRight = styles.handleRight) === null || _styles$handleRight === void 0 ? void 0 : _styles$handleRight.className,
        $_css5: (_styles$handleRight2 = styles.handleRight) === null || _styles$handleRight2 === void 0 ? void 0 : _styles$handleRight2.css
      }));
    },
    align: align,
    readOnly: !ignoreReadOnly && readOnly
  }, resizableProps, {
    $_css3: (_styles$resizable2 = styles.resizable) === null || _styles$resizable2 === void 0 ? void 0 : _styles$resizable2.css
  }), /*#__PURE__*/React.createElement(_StyledImage, _extends$1({
    className: (_styles$img = styles.img) === null || _styles$img === void 0 ? void 0 : _styles$img.className
  }, nodeProps, {
    $_css6: (_styles$img2 = styles.img) === null || _styles$img2 === void 0 ? void 0 : _styles$img2.css
  }))), !caption.disabled && /*#__PURE__*/React.createElement(_StyledCaptionRoot, {
    className: (_styles$figcaption = styles.figcaption) === null || _styles$figcaption === void 0 ? void 0 : _styles$figcaption.className,
    $_css7: (_styles$figcaption2 = styles.figcaption) === null || _styles$figcaption2 === void 0 ? void 0 : _styles$figcaption2.css
  }, /*#__PURE__*/React.createElement(_StyledCaptionTextarea, {
    className: (_styles$caption = styles.caption) === null || _styles$caption === void 0 ? void 0 : _styles$caption.className,
    placeholder: (_caption$placeholder = caption.placeholder) !== null && _caption$placeholder !== void 0 ? _caption$placeholder : 'Write a caption...',
    readOnly: !ignoreReadOnly && readOnly || !!caption.readOnly,
    $_css8: (_styles$caption2 = styles.caption) === null || _styles$caption2 === void 0 ? void 0 : _styles$caption2.css
  }))), children));
};

var _StyledMediaRoot = _styled(Media.Root).withConfig({
  displayName: "ImageElement___StyledMediaRoot",
  componentId: "sc-uh8bwd-0"
})(["", ""], p => p.$_css);

var _StyledFigure = _styled("figure").withConfig({
  displayName: "ImageElement___StyledFigure",
  componentId: "sc-uh8bwd-1"
})(["", ""], p => p.$_css2);

var _StyledMediaResizable = _styled(Media.Resizable).withConfig({
  displayName: "ImageElement___StyledMediaResizable",
  componentId: "sc-uh8bwd-2"
})(["", ""], p => p.$_css3);

var _StyledBox = _styled(Box).withConfig({
  displayName: "ImageElement___StyledBox",
  componentId: "sc-uh8bwd-3"
})(["", ""], p => p.$_css4);

var _StyledBox2 = _styled(Box).withConfig({
  displayName: "ImageElement___StyledBox2",
  componentId: "sc-uh8bwd-4"
})(["", ""], p => p.$_css5);

var _StyledImage = _styled(Image).withConfig({
  displayName: "ImageElement___StyledImage",
  componentId: "sc-uh8bwd-5"
})(["", ""], p => p.$_css6);

var _StyledCaptionRoot = _styled(Caption.Root).withConfig({
  displayName: "ImageElement___StyledCaptionRoot",
  componentId: "sc-uh8bwd-6"
})(["", ""], p => p.$_css7);

var _StyledCaptionTextarea = _styled(Caption.Textarea).withConfig({
  displayName: "ImageElement___StyledCaptionTextarea",
  componentId: "sc-uh8bwd-7"
})(["", ""], p => p.$_css8);

const ImageToolbarButton = ({
  id,
  getImageUrl,
  ...props
}) => {
  const editor = usePlateEditorRef(useEventPlateId(id));
  return /*#__PURE__*/React.createElement(ToolbarButton, _extends$1({
    tooltip: {
      content: 'Image'
    },
    onClick: async e => {
      e.preventDefault();
      e.stopPropagation();
      let url;

      if (getImageUrl) {
        url = await getImageUrl();
      } else {
        url = window.prompt('Enter the URL of the image:');
      }

      if (!url) return;
      insertImage(editor, url);
      focusEditor(editor);
    }
  }, props));
};

const MediaEmbedToolbarButton = ({
  id,
  getEmbedUrl,
  ...props
}) => {
  const editor = usePlateEditorRef(useEventPlateId(id));
  return /*#__PURE__*/React.createElement(ToolbarButton, _extends$1({
    tooltip: {
      content: 'Embed'
    },
    onClick: async e => {
      e.preventDefault();
      e.stopPropagation();
      let url;

      if (getEmbedUrl) {
        url = await getEmbedUrl();
      } else {
        url = window.prompt('Enter the URL of the embed:');
      }

      if (!url) return;
      insertMediaEmbed(editor, {
        url
      });
      focusEditor(editor);
    }
  }, props));
};

export { ImageElement, ImageToolbarButton, MediaEmbedElement, MediaEmbedToolbarButton, PlateFloatingMedia, getCaptionCss, getImageElementStyles, getMediaEmbedElementStyles, getResizableCss, mediaFloatingOptions };
//# sourceMappingURL=index.es.js.map
