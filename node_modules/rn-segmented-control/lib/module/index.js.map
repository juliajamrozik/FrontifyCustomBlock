{"version":3,"sources":["index.tsx"],"names":["React","useEffect","Pressable","StyleSheet","Text","View","Animated","useAnimatedStyle","useSharedValue","withSpring","widthPercentageToDP","defaultShadowStyle","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","DEFAULT_SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restSpeedThreshold","restDisplacementThreshold","SegmentedControl","segments","currentIndex","onChange","badgeValues","isRTL","containerMargin","activeTextStyle","inactiveTextStyle","segmentedControlWrapper","pressableWrapper","tileStyle","activeBadgeStyle","inactiveBadgeStyle","badgeTextStyle","translateValue","length","tabTranslateValue","memoizedTabPressCallback","useCallback","index","transitionMultiplier","value","tabTranslateAnimatedStyles","transform","translateX","finalisedActiveTextStyle","fontSize","fontWeight","textAlign","color","finalisedInActiveTextStyle","finalisedActiveBadgeStyle","backgroundColor","marginLeft","alignItems","justifyContent","finalisedInActiveBadgeStyle","finalisedBadgeTextStyle","styles","defaultSegmentedControlWrapper","movingSegmentStyle","absoluteFill","map","segment","touchableContainer","textWrapper","defaultBadgeContainerStyle","create","position","display","flexDirection","borderRadius","flex","paddingVertical","top","marginVertical","marginHorizontal","alignContent"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  Pressable,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\nimport { widthPercentageToDP } from 'react-native-responsive-screen';\n\ninterface SegmentedControlProps {\n  /**\n   * The Segments Text Array\n   */\n  segments: Array<string>;\n  /**\n   * The Current Active Segment Index\n   */\n  currentIndex: number;\n  /**\n   * A callback onPress of a Segment\n   */\n  onChange: (index: number) => void;\n  /**\n   * An array of Badge Values corresponding to the Segment\n   */\n  badgeValues?: Array<number | null>;\n  /**\n   * Is right-to-left mode.\n   */\n  isRTL?: boolean;\n  /**\n   * The container margin for the segmented control\n   * Used to calculate the width of Segmented Control\n   */\n  containerMargin?: number;\n  /**\n   * Active Segment Text Style\n   */\n  activeTextStyle?: TextStyle;\n  /**\n   * InActive Segment Text Style\n   */\n  inactiveTextStyle?: TextStyle;\n  /**\n   * Segment Container Styles\n   */\n  segmentedControlWrapper?: ViewStyle;\n  /**\n   * Pressable Container Styles\n   */\n  pressableWrapper?: ViewStyle;\n  /**\n   * The moving Tile Container Styles\n   */\n  tileStyle?: ViewStyle;\n  /**\n   * Active Badge Styles\n   */\n  activeBadgeStyle?: ViewStyle;\n  /**\n   * Inactive Badge Styles\n   */\n  inactiveBadgeStyle?: ViewStyle;\n  /**\n   * Badge Text Styles\n   */\n  badgeTextStyle?: TextStyle;\n}\n\nconst defaultShadowStyle = {\n  shadowColor: '#000',\n  shadowOffset: {\n    width: 1,\n    height: 1,\n  },\n  shadowOpacity: 0.025,\n  shadowRadius: 1,\n\n  elevation: 1,\n};\n\nconst DEFAULT_SPRING_CONFIG = {\n  stiffness: 150,\n  damping: 20,\n  mass: 1,\n  overshootClamping: false,\n  restSpeedThreshold: 0.001,\n  restDisplacementThreshold: 0.001,\n};\n\nconst SegmentedControl: React.FC<SegmentedControlProps> = ({\n  segments,\n  currentIndex,\n  onChange,\n  badgeValues = [],\n  isRTL = false,\n  containerMargin = 0,\n  activeTextStyle,\n  inactiveTextStyle,\n  segmentedControlWrapper,\n  pressableWrapper,\n  tileStyle,\n  activeBadgeStyle,\n  inactiveBadgeStyle,\n  badgeTextStyle,\n}: SegmentedControlProps) => {\n  const width = widthPercentageToDP('100%') - containerMargin * 2;\n  const translateValue = width / segments.length;\n  const tabTranslateValue = useSharedValue(0);\n\n  // useCallBack with an empty array as input, which will call inner lambda only once and memoize the reference for future calls\n  const memoizedTabPressCallback = React.useCallback(\n    (index) => {\n      onChange(index);\n    },\n    [onChange]\n  );\n  useEffect(() => {\n    // If phone is set to RTL, make sure the animation does the correct transition.\n    const transitionMultiplier = isRTL ? -1 : 1;\n    tabTranslateValue.value = withSpring(\n      currentIndex * (translateValue * transitionMultiplier),\n      DEFAULT_SPRING_CONFIG\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentIndex]);\n\n  const tabTranslateAnimatedStyles = useAnimatedStyle(() => {\n    return {\n      transform: [{ translateX: tabTranslateValue.value }],\n    };\n  });\n\n  const finalisedActiveTextStyle: TextStyle = {\n    fontSize: 15,\n    fontWeight: '600',\n    textAlign: 'center',\n    color: '#111827',\n    ...activeTextStyle,\n  };\n\n  const finalisedInActiveTextStyle: TextStyle = {\n    fontSize: 15,\n    textAlign: 'center',\n    color: '#4b5563',\n    ...inactiveTextStyle,\n  };\n\n  const finalisedActiveBadgeStyle: ViewStyle = {\n    backgroundColor: '#27272a',\n    marginLeft: 4,\n    alignItems: 'center',\n    justifyContent: 'center',\n    ...activeBadgeStyle,\n  };\n\n  const finalisedInActiveBadgeStyle: ViewStyle = {\n    backgroundColor: '#6b7280',\n    marginLeft: 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    ...inactiveBadgeStyle,\n  };\n\n  const finalisedBadgeTextStyle: TextStyle = {\n    fontSize: 11,\n    fontWeight: '500',\n    textAlign: 'center',\n    color: '#FFFFFF',\n    ...badgeTextStyle,\n  };\n\n  return (\n    <Animated.View\n      style={[styles.defaultSegmentedControlWrapper, segmentedControlWrapper]}\n    >\n      <Animated.View\n        style={[\n          styles.movingSegmentStyle,\n          defaultShadowStyle,\n          tileStyle,\n          StyleSheet.absoluteFill,\n          {\n            width: width / segments.length - 4,\n          },\n          tabTranslateAnimatedStyles,\n        ]}\n      />\n      {segments.map((segment, index) => {\n        return (\n          <Pressable\n            onPress={() => memoizedTabPressCallback(index)}\n            key={index}\n            style={[styles.touchableContainer, pressableWrapper]}\n          >\n            <View style={styles.textWrapper}>\n              <Text\n                style={[\n                  currentIndex === index\n                    ? finalisedActiveTextStyle\n                    : finalisedInActiveTextStyle,\n                ]}\n              >\n                {segment}\n              </Text>\n              {badgeValues[index] && (\n                <View\n                  style={[\n                    styles.defaultBadgeContainerStyle,\n                    currentIndex === index\n                      ? finalisedActiveBadgeStyle\n                      : finalisedInActiveBadgeStyle,\n                  ]}\n                >\n                  <Text style={finalisedBadgeTextStyle}>\n                    {badgeValues[index]}\n                  </Text>\n                </View>\n              )}\n            </View>\n          </Pressable>\n        );\n      })}\n    </Animated.View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  defaultSegmentedControlWrapper: {\n    position: 'relative',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderRadius: 8,\n    backgroundColor: '#f3f4f6',\n  },\n  touchableContainer: {\n    flex: 1,\n    elevation: 9,\n    paddingVertical: 12,\n  },\n  textWrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  movingSegmentStyle: {\n    top: 0,\n    marginVertical: 2,\n    marginHorizontal: 2,\n    borderRadius: 6,\n    backgroundColor: '#FFFFFF',\n  },\n  // Badge Styles\n  defaultBadgeContainerStyle: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: 16,\n    width: 16,\n    borderRadius: 9999,\n    alignContent: 'flex-end',\n  },\n});\n\nexport default SegmentedControl;\n"]}