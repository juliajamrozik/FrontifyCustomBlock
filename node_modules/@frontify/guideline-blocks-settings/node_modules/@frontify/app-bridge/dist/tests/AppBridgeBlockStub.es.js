import b from "mitt";
import { spy as F, stub as e } from "sinon";
import { AssetDummy as p } from "./AssetDummy.es.js";
import { UserDummy as f } from "./UserDummy.es.js";
import { ColorPaletteDummy as o } from "./ColorPaletteDummy.es.js";
import { ColorDummy as l } from "./ColorDummy.es.js";
import { BulkDownloadDummy as v } from "./BulkDownloadDummy.es.js";
import { TemplateDummy as L } from "./TemplateDummy.es.js";
const E = 3452, K = 2341, O = 4561, w = 345214, J = ({
  blockSettings: D = {},
  blockAssets: I = {},
  editorState: B = !1,
  openAssetChooser: C = () => null,
  closeAssetChooser: P = () => null,
  blockId: u = E,
  sectionId: y = K,
  projectId: T = w,
  user: h = f.with(O),
  language: k = "en",
  privacySettings: A = {
    assetViewerEnabled: !1,
    assetDownloadEnabled: !1
  },
  blockTemplates: S = {}
} = {}) => {
  window.emitter = F(b()), window.blockSettings ?? (window.blockSettings = {}), window.blockSettings[u] = D;
  const a = {}, n = {}, d = {}, c = {};
  return {
    getBlockId: e().returns(u),
    getSectionId: e().returns(y),
    getProjectId: e().returns(T),
    getEditorState: e().returns(B),
    getBlockSettings: e().resolves(window.blockSettings),
    getAvailablePalettes: e().resolves([
      o.with(678, "Palette 1"),
      o.with(427, "Palette 2"),
      o.with(679, "Palette 3")
    ]),
    getColorPalettes: e().resolves([
      o.with(678, "Palette 1"),
      o.with(427, "Palette 2"),
      o.with(679, "Palette 3")
    ]),
    createColorPalette: e().resolves(
      o.with(678)
    ),
    updateColorPalette: e().resolves(
      o.with(678)
    ),
    getColorsByIds: e().resolves([
      l.red(9834),
      l.green(342),
      l.yellow(9314)
    ]),
    getColorsByColorPaletteId: e().resolves([
      l.red(9834),
      l.green(342),
      l.yellow(9314)
    ]),
    getColorPalettesWithColors: e().resolves([
      o.with(678, "Palette 1"),
      o.with(427, "Palette 2"),
      o.with(679, "Palette 3")
    ]),
    deleteColorPalette: e().resolves(),
    getAvailableColors: e().resolves([]),
    getCurrentLoggedUser: e().resolves(h),
    downloadColorKit: e().returns(
      `/api/color/export/${w}/zip/500`
    ),
    getAssetById: e().callsFake(
      (t) => Promise.resolve(p.with(t))
    ),
    closeAssetChooser: e().callsFake(() => {
      P();
    }),
    openAssetChooser: e().callsFake((t) => {
      C(t);
    }),
    getBlockAssets: e().callsFake(async () => Object.entries(I).reduce((t, [s, i]) => {
      const m = n[s] ?? [], g = a[s] ?? [];
      return t[s] = [
        ...i.filter((r) => !g.includes(r.id)),
        ...m.map((r) => p.with(r))
      ], t;
    }, {})),
    addAssetIdsToBlockAssetKey: e().callsFake(
      async (t, s) => {
        n[t] = [...n[t] ?? [], ...s];
      }
    ),
    deleteAssetIdsFromBlockAssetKey: e().callsFake(async (t, s) => {
      a[t] = [...a[t] ?? [], ...s];
    }),
    getBlockTemplates: e().callsFake(async () => Object.entries(S).reduce(
      (t, [s, i]) => {
        const m = c[s] ?? [], g = d[s] ?? [];
        return t[s] = [
          ...i.filter((r) => !g.includes(r.id)),
          ...m.map((r) => L.with(r))
        ], t;
      },
      {}
    )),
    addTemplateIdsToBlockTemplateKey: e().callsFake(async (t, s) => {
      c[t] = [...c[t] ?? [], ...s];
    }),
    deleteTemplateIdsFromBlockTemplateKey: e().callsFake(async (t, s) => {
      d[t] = [...d[t] ?? [], ...s];
    }),
    getTranslationLanguage: e().returns(k),
    getColors: e().resolves([
      l.red(9834),
      l.green(342),
      l.yellow(9314)
    ]),
    updateColor: e().callsFake(
      (t) => Promise.resolve(l.red(t))
    ),
    getBulkDownloadToken: e().resolves("token"),
    getBulkDownloadBySignature: e().resolves(
      v.default()
    ),
    getBulkDownloadByToken: e().resolves(
      v.default()
    ),
    getPrivacySettings: e().returns(A),
    // TODO: Stub the following methods
    closeTemplateChooser: e(),
    openTemplateChooser: e(),
    createColor: e().resolves(l.red()),
    deleteColor: e().resolves(),
    getTemplateById: e().resolves({}),
    openAssetViewer: e(),
    updateBlockSettings: e().resolves(),
    getAllDocuments: e().resolves(),
    getUngroupedDocuments: e().resolves(),
    getDocumentsByDocumentGroupId: e().resolves(),
    getDocumentGroups: e().resolves(),
    getDocumentPagesByDocumentId: e().resolves(),
    getDocumentPagesByDocumentCategoryId: e().resolves(),
    getDocumentCategoriesByDocumentId: e().resolves(),
    getUncategorizedDocumentPagesByDocumentId: e().resolves(),
    getDocumentSectionsByDocumentPageId: e().resolves(),
    getDocumentTargets: e().resolves(),
    getDocumentPageTargets: e().resolves(),
    api: e().resolves(),
    state: e().resolves(),
    context: e().resolves(),
    subscribe: e().resolves(),
    dispatch: e().resolves()
  };
};
export {
  J as getAppBridgeBlockStub
};
//# sourceMappingURL=AppBridgeBlockStub.es.js.map
