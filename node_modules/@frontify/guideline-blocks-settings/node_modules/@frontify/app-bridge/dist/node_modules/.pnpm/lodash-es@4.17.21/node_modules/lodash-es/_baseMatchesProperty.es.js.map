{"version":3,"file":"_baseMatchesProperty.es.js","sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseMatchesProperty.js"],"sourcesContent":["import baseIsEqual from './_baseIsEqual.js';\nimport get from './get.js';\nimport hasIn from './hasIn.js';\nimport isKey from './_isKey.js';\nimport isStrictComparable from './_isStrictComparable.js';\nimport matchesStrictComparable from './_matchesStrictComparable.js';\nimport toKey from './_toKey.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nexport default baseMatchesProperty;\n"],"names":["COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","baseMatchesProperty","path","srcValue","isKey","isStrictComparable","matchesStrictComparable","toKey","object","objValue","get","hasIn","baseIsEqual"],"mappings":";;;;;;;AASA,IAAIA,IAAuB,GACvBC,IAAyB;AAU7B,SAASC,EAAoBC,GAAMC,GAAU;AAC3C,SAAIC,EAAMF,CAAI,KAAKG,EAAmBF,CAAQ,IACrCG,EAAwBC,EAAML,CAAI,GAAGC,CAAQ,IAE/C,SAASK,GAAQ;AACtB,QAAIC,IAAWC,EAAIF,GAAQN,CAAI;AAC/B,WAAQO,MAAa,UAAaA,MAAaN,IAC3CQ,EAAMH,GAAQN,CAAI,IAClBU,EAAYT,GAAUM,GAAUV,IAAuBC,CAAsB;AAAA,EACrF;AACA;","x_google_ignoreList":[0]}