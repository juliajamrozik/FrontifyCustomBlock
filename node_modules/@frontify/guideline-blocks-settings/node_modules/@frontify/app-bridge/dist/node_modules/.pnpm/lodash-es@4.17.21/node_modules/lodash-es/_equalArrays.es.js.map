{"version":3,"file":"_equalArrays.es.js","sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_equalArrays.js"],"sourcesContent":["import SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalArrays;\n"],"names":["COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","equalArrays","array","other","bitmask","customizer","equalFunc","stack","isPartial","arrLength","othLength","arrStacked","othStacked","index","result","seen","SetCache","arrValue","othValue","compared","arraySome","othIndex","cacheHas"],"mappings":";;;AAKA,IAAIA,IAAuB,GACvBC,IAAyB;AAe7B,SAASC,EAAYC,GAAOC,GAAOC,GAASC,GAAYC,GAAWC,GAAO;AACxE,MAAIC,IAAYJ,IAAUL,GACtBU,IAAYP,EAAM,QAClBQ,IAAYP,EAAM;AAEtB,MAAIM,KAAaC,KAAa,EAAEF,KAAaE,IAAYD;AACvD,WAAO;AAGT,MAAIE,IAAaJ,EAAM,IAAIL,CAAK,GAC5BU,IAAaL,EAAM,IAAIJ,CAAK;AAChC,MAAIQ,KAAcC;AAChB,WAAOD,KAAcR,KAASS,KAAcV;AAE9C,MAAIW,IAAQ,IACRC,IAAS,IACTC,IAAQX,IAAUJ,IAA0B,IAAIgB,MAAW;AAM/D,OAJAT,EAAM,IAAIL,GAAOC,CAAK,GACtBI,EAAM,IAAIJ,GAAOD,CAAK,GAGf,EAAEW,IAAQJ,KAAW;AAC1B,QAAIQ,IAAWf,EAAMW,CAAK,GACtBK,IAAWf,EAAMU,CAAK;AAE1B,QAAIR;AACF,UAAIc,IAAWX,IACXH,EAAWa,GAAUD,GAAUJ,GAAOV,GAAOD,GAAOK,CAAK,IACzDF,EAAWY,GAAUC,GAAUL,GAAOX,GAAOC,GAAOI,CAAK;AAE/D,QAAIY,MAAa,QAAW;AAC1B,UAAIA;AACF;AAEF,MAAAL,IAAS;AACT;AAAA,IACD;AAED,QAAIC;AACF,UAAI,CAACK,EAAUjB,GAAO,SAASe,GAAUG,GAAU;AAC7C,YAAI,CAACC,EAASP,GAAMM,CAAQ,MACvBJ,MAAaC,KAAYZ,EAAUW,GAAUC,GAAUd,GAASC,GAAYE,CAAK;AACpF,iBAAOQ,EAAK,KAAKM,CAAQ;AAAA,MAEvC,CAAW,GAAG;AACN,QAAAP,IAAS;AACT;AAAA,MACD;AAAA,eACQ,EACLG,MAAaC,KACXZ,EAAUW,GAAUC,GAAUd,GAASC,GAAYE,CAAK,IACzD;AACL,MAAAO,IAAS;AACT;AAAA,IACD;AAAA,EACF;AACD,SAAAP,EAAM,OAAUL,CAAK,GACrBK,EAAM,OAAUJ,CAAK,GACdW;AACT;","x_google_ignoreList":[0]}