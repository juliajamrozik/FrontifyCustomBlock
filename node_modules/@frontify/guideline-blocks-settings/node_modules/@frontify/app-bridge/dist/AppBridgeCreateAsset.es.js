import { generateRandomString as i } from "./utilities/hash.es.js";
import { notify as r } from "./utilities/notify.es.js";
import { Topic as t } from "./types/Topic.es.js";
import { subscribe as p } from "./utilities/subscribe.es.js";
const e = i(), A = 3 * 1e3, o = 5 * 60 * 1e3;
class l {
  getAppState() {
    return r(t.GetAppState, e), p(t.GetAppState, e);
  }
  async putAppState(s) {
    return r(t.PutAppState, e, s), p(t.PutAppState, e);
  }
  async deleteAppState() {
    return r(t.DeleteAppState, e), p(t.DeleteAppState, e);
  }
  getAssetById(s) {
    return r(t.GetAssetById, e, { assetId: s }), p(t.GetAssetById, e);
  }
  async postExternalAssets(s) {
    const a = s.filter((n) => n.previewUrl).length > 0 ? o : A;
    return r(t.PostExternalAssets, e, s), p(t.PostExternalAssets, e, {
      timeout: a
    });
  }
  getThirdPartyOauth2Tokens() {
    return r(t.GetThirdPartyOauth2Tokens, e), p(t.GetThirdPartyOauth2Tokens, e, {
      timeout: o
    });
  }
  getRefreshedThirdpartyOauth2Tokens(s) {
    return r(t.GetRefreshedThirdpartyOauth2Token, e, { refreshToken: s }), p(t.GetRefreshedThirdpartyOauth2Token, e);
  }
  closeApp() {
    r(t.CloseApp, e);
  }
  openAssetChooser() {
    r(t.OpenAssetChooser, e);
  }
}
export {
  l as AppBridgeCreateAsset
};
//# sourceMappingURL=AppBridgeCreateAsset.es.js.map
