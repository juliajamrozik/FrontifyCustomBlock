import { useRef as A, useState as B } from "react";
import { useFileUpload as R } from "./useFileUpload.es.js";
import { createAssetByFileId as _ } from "../repositories/AssetRepository.es.js";
const H = (w) => {
  var u, p, d, F, m;
  const e = A([]), a = A([]), [y, i] = B(!1), { onUploadProgress: s, onUploadProgressAll: o, onUploadDone: n, onUploadDoneAll: r, onUploadFail: c, onUploadAssetFail: l } = w ?? {}, I = (m = (F = (d = (p = (u = window.application) == null ? void 0 : u.sandbox) == null ? void 0 : p.config) == null ? void 0 : d.context) == null ? void 0 : F.project) == null ? void 0 : m.id, P = (t) => {
    s == null || s(t);
  }, g = (t) => {
    o == null || o(t);
  }, x = async (t) => {
    const f = b(t.data.file_id);
    a.current.push(f), n == null || n(t), e.current = [...e.current, await f];
  }, D = async () => {
    await Promise.all(a.current), r == null || r(e.current), i(!0);
  }, j = () => {
    c == null || c();
  }, S = (t) => {
    l == null || l(t);
  }, U = () => {
    i(!1), e.current = [];
  }, b = async (t) => await _(t, I), [h] = R({
    onUploadProgress: P,
    onUploadProgressAll: g,
    onUploadDone: x,
    onUploadDoneAll: D,
    onUploadFail: j,
    onUploadFileFail: S
  });
  return [(t) => {
    U(), h(t);
  }, { results: e.current, doneAll: y }];
};
export {
  H as useAssetUpload
};
//# sourceMappingURL=useAssetUpload.es.js.map
