{"version":3,"file":"useUngroupedDocuments.es.js","sources":["../../src/react/useUngroupedDocuments.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { produce } from 'immer';\n\nimport type { AppBridgeBlock } from '../AppBridgeBlock';\nimport type { AppBridgeTheme } from '../AppBridgeTheme';\nimport type { Document, EmitterEvents } from '../types';\n\ntype DocumentPageEvent = EmitterEvents['AppBridge:GuidelineDocument:DocumentPageAction'];\ntype DocumentCategoryEvent = EmitterEvents['AppBridge:GuidelineDocument:DocumentCategoryAction'];\ntype DocumentEvent = EmitterEvents['AppBridge:GuidelineDocumentGroup:Action'];\ntype DocumentMoveEvent = EmitterEvents['AppBridge:GuidelineDocument:MoveEvent'];\ntype DocumentGroupMoveEvent = EmitterEvents['AppBridge:GuidelineDocumentGroup:MoveEvent'];\n\ntype Options = {\n    /**\n     * Whether it should fetch on mount.\n     */\n    enabled?: boolean;\n};\n\nconst sortDocuments = (a: Document, b: Document) => (a.sort && b.sort ? a.sort - b.sort : 0);\n\nexport const useUngroupedDocuments = (\n    appBridge: AppBridgeBlock | AppBridgeTheme,\n    options: Options = { enabled: true },\n) => {\n    const [documents, setDocuments] = useState<Map<number, Document>>(new Map([]));\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n\n    const refetch = useCallback(async () => {\n        setIsLoading(true);\n        setDocuments(await fetchUngroupedDocuments(appBridge));\n        setIsLoading(false);\n    }, [appBridge]);\n\n    useEffect(() => {\n        if (options.enabled) {\n            refetch();\n        }\n    }, [options.enabled, refetch]);\n\n    useEffect(() => {\n        const handleDocumentPageEvent = (event: DocumentPageEvent) => {\n            if (!documents.has(event.documentPage.documentId)) {\n                return;\n            }\n\n            setDocuments(\n                produce((draft) => {\n                    const action = `${event.action}-page` as const;\n                    const handler = actionHandlers[action] || actionHandlers.default;\n                    return handler(draft, event.documentPage);\n                }),\n            );\n        };\n\n        const handleDocumentCategoryEvent = (event: DocumentCategoryEvent) => {\n            if (!documents.has(event.documentCategory.documentId)) {\n                return;\n            }\n\n            setDocuments(\n                produce((draft) => {\n                    const action = `${event.action}-category` as const;\n                    const handler = actionHandlers[action] || actionHandlers.default;\n                    return handler(draft, event.documentCategory);\n                }),\n            );\n        };\n\n        // handles when a document group is moved, refetches for updated positioning\n        const handleDocumentGroupUpdateEvent = (event: DocumentEvent) => {\n            if (event?.action === 'update' && documents.size > 0) {\n                refetch();\n            }\n        };\n\n        const handlerDocumentMoveEventPreview = (event: DocumentMoveEvent) => {\n            if (!documents.has(event.document.id) || event.newGroupId || event.document.documentGroupId) {\n                return;\n            }\n\n            setDocuments(produce((draft) => previewDocumentSort(draft, event.document, event.position)));\n        };\n\n        const handlerDocumentGroupMoveEventPreview = (event: DocumentGroupMoveEvent) => {\n            setDocuments(produce((draft) => previewDocumentGroupSort(draft, event?.documentGroup, event.position)));\n        };\n\n        const handler = ({ action, document }: EmitterEvents['AppBridge:GuidelineDocument:Action']) => {\n            if (\n                ((action === 'update' || action === 'move') && documents.has(document.id)) ||\n                (action === 'add' && !document.documentGroupId)\n            ) {\n                refetch();\n            } else if (action === 'delete' && documents.has(document.id)) {\n                setDocuments(\n                    produce((draft) => {\n                        if (action === 'delete') {\n                            draft.delete(document.id);\n                        }\n                    }),\n                );\n            }\n        };\n\n        window.emitter.on('AppBridge:GuidelineDocument:Action', handler);\n        window.emitter.on('AppBridge:GuidelineDocumentTargets:Action', refetch);\n        window.emitter.on('AppBridge:GuidelineDocument:DocumentPageAction', handleDocumentPageEvent);\n        window.emitter.on('AppBridge:GuidelineDocument:DocumentCategoryAction', handleDocumentCategoryEvent);\n        window.emitter.on('AppBridge:GuidelineDocumentGroup:Action', handleDocumentGroupUpdateEvent);\n        window.emitter.on('AppBridge:GuidelineDocument:MoveEvent', handlerDocumentMoveEventPreview);\n        window.emitter.on('AppBridge:GuidelineDocumentGroup:MoveEvent', handlerDocumentGroupMoveEventPreview);\n\n        return () => {\n            window.emitter.off('AppBridge:GuidelineDocument:Action', handler);\n            window.emitter.off('AppBridge:GuidelineDocumentTargets:Action', refetch);\n            window.emitter.off('AppBridge:GuidelineDocument:DocumentPageAction', handleDocumentPageEvent);\n            window.emitter.off('AppBridge:GuidelineDocument:DocumentCategoryAction', handleDocumentCategoryEvent);\n            window.emitter.off('AppBridge:GuidelineDocumentGroup:Action', handleDocumentGroupUpdateEvent);\n            window.emitter.off('AppBridge:GuidelineDocument:MoveEvent', handlerDocumentMoveEventPreview);\n            window.emitter.off('AppBridge:GuidelineDocumentGroup:MoveEvent', handlerDocumentGroupMoveEventPreview);\n        };\n    }, [documents, options.enabled, refetch]);\n\n    return { documents: Array.from(documents.values()), refetch, isLoading };\n};\n\nconst previewDocumentSort = (\n    documents: Map<number, Document>,\n    document: DocumentMoveEvent['document'],\n    newPosition: DocumentMoveEvent['position'],\n) => {\n    if (!document.sort || !newPosition) {\n        return documents;\n    }\n\n    const previousPosition = document.sort;\n    const documentsAsArray: Document[] = [...documents.values()].sort(sortDocuments);\n    const newDocuments: Document[] = [];\n\n    documents.clear();\n\n    for (const currentDocument of documentsAsArray) {\n        if (currentDocument.id === document.id) {\n            newDocuments.push({ ...currentDocument, sort: newPosition });\n            continue;\n        }\n\n        const currentPosition = currentDocument.sort ?? 0;\n        let positionIncrease = 0;\n        if (newPosition <= currentPosition) {\n            positionIncrease = previousPosition > currentPosition || previousPosition === 0 ? 1 : 0;\n        }\n\n        newDocuments.push({ ...currentDocument, sort: currentPosition + positionIncrease });\n    }\n\n    const sortedNewDocuments = [...newDocuments].sort(sortDocuments);\n    for (const currentDocument of sortedNewDocuments) {\n        documents.set(currentDocument.id, currentDocument);\n    }\n\n    return documents;\n};\n\nconst previewDocumentGroupSort = (\n    documents: Map<number, Document>,\n    documentGroup: DocumentGroupMoveEvent['documentGroup'],\n    newPosition: DocumentGroupMoveEvent['position'],\n) => {\n    if (!documentGroup.sort) {\n        return documents;\n    }\n\n    const previousPosition = documentGroup.sort;\n    const documentsAsArray: Document[] = [...documents.values()].sort(sortDocuments);\n    const newDocuments: Document[] = [];\n\n    documents.clear();\n\n    for (const currentDocument of documentsAsArray) {\n        const currentPosition = currentDocument.sort ?? 0;\n        let positionIncrease = 0;\n        if (newPosition <= currentPosition) {\n            positionIncrease = previousPosition > currentPosition ? 1 : 0;\n        }\n\n        newDocuments.push({ ...currentDocument, sort: currentPosition + positionIncrease });\n    }\n\n    const sortedNewDocuments = [...newDocuments].sort(sortDocuments);\n    for (const currentDocument of sortedNewDocuments) {\n        documents.set(currentDocument.id, currentDocument);\n    }\n\n    return documents;\n};\n\nconst addDocumentPage = (documents: Map<number, Document>, documentPageToAdd: DocumentPageEvent['documentPage']) => {\n    const document = documents.get(documentPageToAdd.documentId);\n    if (!document) {\n        return documents;\n    }\n\n    const newDocument = {\n        ...document,\n        numberOfUncategorizedDocumentPages: document.numberOfUncategorizedDocumentPages + 1,\n    };\n\n    return documents.set(document.id, newDocument);\n};\n\nconst deleteDocumentPage = (\n    documents: Map<number, Document>,\n    documentPageToDelete: DocumentPageEvent['documentPage'],\n) => {\n    const document = documents.get(documentPageToDelete.documentId);\n    if (!document) {\n        return documents;\n    }\n\n    const newDocument = {\n        ...document,\n        numberOfUncategorizedDocumentPages: document.numberOfUncategorizedDocumentPages - 1,\n    };\n\n    return documents.set(document.id, newDocument);\n};\n\nconst addDocumentCategory = (\n    documents: Map<number, Document>,\n    documentCategoryToAdd: DocumentCategoryEvent['documentCategory'],\n) => {\n    const document = documents.get(documentCategoryToAdd.documentId);\n    if (!document) {\n        return documents;\n    }\n\n    const newDocument = {\n        ...document,\n        numberOfDocumentPageCategories: document.numberOfDocumentPageCategories + 1,\n    };\n\n    return documents.set(document.id, newDocument);\n};\n\nconst deleteDocumentCategory = (\n    documents: Map<number, Document>,\n    documentCategoryToDelete: DocumentCategoryEvent['documentCategory'],\n) => {\n    const document = documents.get(documentCategoryToDelete.documentId);\n    if (!document) {\n        return documents;\n    }\n\n    const newDocument = {\n        ...document,\n        numberOfDocumentPageCategories: document.numberOfDocumentPageCategories - 1,\n    };\n\n    return documents.set(document.id, newDocument);\n};\n\nconst actionHandlers = {\n    'add-page': addDocumentPage,\n    'delete-page': deleteDocumentPage,\n    'add-category': addDocumentCategory,\n    'delete-category': deleteDocumentCategory,\n    default: (documents: Map<number, Document>) => documents,\n};\n\nconst fetchUngroupedDocuments = async (appBridge: AppBridgeBlock | AppBridgeTheme) => {\n    const documents = await appBridge.getUngroupedDocuments();\n    return new Map([...documents].sort(sortDocuments).map((document) => [document.id, document]));\n};\n"],"names":["sortDocuments","a","b","useUngroupedDocuments","appBridge","options","documents","setDocuments","useState","isLoading","setIsLoading","refetch","useCallback","fetchUngroupedDocuments","useEffect","handleDocumentPageEvent","event","produce","draft","action","handler","actionHandlers","handleDocumentCategoryEvent","handleDocumentGroupUpdateEvent","handlerDocumentMoveEventPreview","previewDocumentSort","handlerDocumentGroupMoveEventPreview","previewDocumentGroupSort","document","newPosition","previousPosition","documentsAsArray","newDocuments","currentDocument","currentPosition","positionIncrease","sortedNewDocuments","documentGroup","addDocumentPage","documentPageToAdd","newDocument","deleteDocumentPage","documentPageToDelete","addDocumentCategory","documentCategoryToAdd","deleteDocumentCategory","documentCategoryToDelete"],"mappings":"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"}