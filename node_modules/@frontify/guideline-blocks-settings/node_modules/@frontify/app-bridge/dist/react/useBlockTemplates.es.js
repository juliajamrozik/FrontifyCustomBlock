import { useState as r, useEffect as k } from "react";
import { compareObjects as i } from "../utilities/object.es.js";
const f = (t) => {
  const o = t.getBlockId(), [c, s] = r({}), p = (e) => {
    e.blockId === o && !i(e.blockTemplates, e.prevBlockTemplates) && s(e.blockTemplates);
  };
  k(() => {
    let e = !0;
    return o && ((async () => {
      const d = await t.getBlockTemplates();
      e && s(d);
    })(), window.emitter.on("AppBridge:BlockTemplatesUpdated", p)), () => {
      e = !1, window.emitter.off("AppBridge:BlockTemplatesUpdated", p);
    };
  }, [t]);
  const a = async () => {
    window.emitter.emit("AppBridge:BlockTemplatesUpdated", {
      blockId: o,
      blockTemplates: await t.getBlockTemplates(),
      prevBlockTemplates: { ...c }
    });
  };
  return {
    blockTemplates: c,
    addTemplateIdsToKey: async (e, l) => {
      await t.addTemplateIdsToBlockTemplateKey(e, l), a();
    },
    deleteTemplateIdsFromKey: async (e, l) => {
      await t.deleteTemplateIdsFromBlockTemplateKey(e, l), a();
    },
    updateTemplateIdsFromKey: async (e, l) => {
      var T;
      const n = ((T = (await t.getBlockTemplates())[e]) == null ? void 0 : T.map((m) => m.id)) ?? [];
      try {
        await t.deleteTemplateIdsFromBlockTemplateKey(e, n), await t.addTemplateIdsToBlockTemplateKey(e, l);
      } catch (m) {
        console.error(m);
      }
      a();
    }
  };
};
export {
  f as useBlockTemplates
};
//# sourceMappingURL=useBlockTemplates.es.js.map
