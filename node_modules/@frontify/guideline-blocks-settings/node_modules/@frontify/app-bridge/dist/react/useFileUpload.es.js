import { useRef as f, useState as P, useEffect as S } from "react";
import W from "../workers/upload.worker.es.js";
const $ = (F) => {
  const t = f([]), [A, l] = P(!1), { onUploadProgress: n, onUploadProgressAll: a, onUploadDone: o, onUploadDoneAll: c, onUploadFail: u, onUploadFileFail: i } = F ?? {}, r = f();
  S(() => {
    const e = new W();
    return r.current = e, e.addEventListener("message", (s) => {
      switch (s.data.event) {
        case "onProgress":
          d(s);
          break;
        case "onProgressAll":
          m(s);
          break;
        case "onDone":
          g(s);
          break;
        case "onDoneAll":
          h();
          break;
        case "onFail":
          b();
          break;
        case "onFileFail":
          p(s);
          break;
        default:
          throw new Error(`${s.data.event} is not handled`);
      }
    }), () => {
      e.terminate();
    };
  }, []);
  const d = (e) => {
    n == null || n(e);
  }, m = (e) => {
    a == null || a(e);
  }, g = (e) => {
    o == null || o(e), t.current = [...t.current, e.data];
  }, h = () => {
    c == null || c(t.current), l(!0);
  }, b = () => {
    throw u == null || u(), new Error("File upload failed");
  }, p = (e) => {
    i == null || i(e);
  }, y = (e) => {
    const s = [];
    return e instanceof File && s.push(e), e instanceof FileList && s.push(...Array.from(e)), s;
  }, D = () => {
    l(!1), t.current = [];
  };
  return [(e) => {
    D();
    const s = y(e);
    if (s.length === 0)
      return;
    const L = {
      files: s
    };
    r != null && r.current && r.current.postMessage(L);
  }, { results: t.current, doneAll: A }];
};
export {
  $ as useFileUpload
};
//# sourceMappingURL=useFileUpload.es.js.map
