{"version":3,"file":"useTemplateAssets.es.js","sources":["../../src/react/useTemplateAssets.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useEffect, useState } from 'react';\n\nimport type { AppBridgeTheme } from '../AppBridgeTheme';\nimport type { Asset } from '../types';\nimport { compareObjects } from '../utilities';\n\nexport const useTemplateAssets = (\n    appBridge: AppBridgeTheme,\n    template?: 'documentPage' | 'library' | 'cover',\n    documentId?: number,\n    documentPageId?: number,\n) => {\n    const [templateAssets, setTemplateAssets] = useState<Record<string, Asset[]>>({});\n\n    const updateTemplateAssetsFromEvent = (event: {\n        template?: 'documentPage' | 'library' | 'cover';\n        documentId?: number;\n        documentPageId?: number;\n        templateAssets: Record<string, Asset[]>;\n        prevTemplateAssets: Record<string, Asset[]>;\n    }) => {\n        if (\n            event.template === template &&\n            event.documentId === documentId &&\n            event.documentPageId === documentPageId &&\n            !compareObjects(event.templateAssets, event.prevTemplateAssets)\n        ) {\n            setTemplateAssets(event.templateAssets);\n        }\n    };\n\n    const getTemplateAssets = async (): Promise<Record<string, Asset[]>> => {\n        if (template === 'cover') {\n            return await appBridge.getCoverPageTemplateAssets();\n        } else if (template === 'documentPage' && documentPageId) {\n            return await appBridge.getDocumentPageTemplateAssets(documentPageId);\n        } else if (template === 'library' && documentId) {\n            return await appBridge.getLibraryPageTemplateAssets(documentId);\n        }\n\n        return {};\n    };\n\n    const addAssetIdsToTemplateAssetKey = async (key: string, assetIds: number[]): Promise<void> => {\n        if (template === 'cover') {\n            await appBridge.addAssetIdsToCoverPageTemplateAssetKey(key, assetIds);\n        } else if (template === 'documentPage' && documentPageId) {\n            await appBridge.addAssetIdsToDocumentPageTemplateAssetKey(documentPageId, key, assetIds);\n        } else if (template === 'library' && documentId) {\n            await appBridge.addAssetIdsToLibraryPageTemplateAssetKey(documentId, key, assetIds);\n        }\n    };\n\n    const deleteAssetIdsFromTemplateAssetKey = async (key: string, assetIds: number[]): Promise<void> => {\n        if (template === 'cover') {\n            await appBridge.deleteAssetIdsFromCoverPageTemplateAssetKey(key, assetIds);\n        } else if (template === 'documentPage' && documentPageId) {\n            await appBridge.deleteAssetIdsFromDocumentPageTemplateAssetKey(documentPageId, key, assetIds);\n        } else if (template === 'library' && documentId) {\n            await appBridge.deleteAssetIdsFromLibraryPageTemplateAssetKey(documentId, key, assetIds);\n        }\n    };\n\n    // Fetch the template assets on mount.\n    // And add listener for template assets updates.\n    useEffect(() => {\n        let componentMounted = true;\n\n        if (template) {\n            const mountingFetch = async () => {\n                const allTemplateAssets = await getTemplateAssets();\n\n                if (componentMounted) {\n                    setTemplateAssets(allTemplateAssets);\n                }\n            };\n            mountingFetch();\n\n            window.emitter.on('AppBridge:TemplateAssetsUpdated', updateTemplateAssetsFromEvent);\n        }\n\n        return () => {\n            componentMounted = false;\n            window.emitter.off('AppBridge:TemplateAssetsUpdated', updateTemplateAssetsFromEvent);\n        };\n    }, [appBridge, documentId, documentPageId]);\n\n    const emitUpdatedTemplateAssets = async () => {\n        window.emitter.emit('AppBridge:TemplateAssetsUpdated', {\n            template,\n            documentId,\n            documentPageId,\n            templateAssets: await getTemplateAssets(),\n            prevTemplateAssets: { ...templateAssets },\n        });\n    };\n\n    const updateAssetIdsFromKey = async (key: string, newAssetIds: number[]) => {\n        const currentTemplateAssets = await getTemplateAssets();\n        const oldAssetIds = currentTemplateAssets[key]?.map((asset) => asset.id) ?? [];\n\n        try {\n            await deleteAssetIdsFromTemplateAssetKey(key, oldAssetIds);\n            await addAssetIdsToTemplateAssetKey(key, newAssetIds);\n        } catch (error) {\n            console.error(error);\n        }\n\n        emitUpdatedTemplateAssets();\n    };\n\n    const deleteAssetIdsFromKey = async (key: string, assetIds: number[]) => {\n        await deleteAssetIdsFromTemplateAssetKey(key, assetIds);\n        emitUpdatedTemplateAssets();\n    };\n\n    const addAssetIdsToKey = async (key: string, assetIds: number[]) => {\n        await addAssetIdsToTemplateAssetKey(key, assetIds);\n        emitUpdatedTemplateAssets();\n    };\n\n    return {\n        templateAssets,\n        addAssetIdsToKey,\n        deleteAssetIdsFromKey,\n        updateAssetIdsFromKey,\n    };\n};\n"],"names":["useTemplateAssets","appBridge","template","documentId","documentPageId","templateAssets","setTemplateAssets","useState","updateTemplateAssetsFromEvent","event","compareObjects","getTemplateAssets","addAssetIdsToTemplateAssetKey","key","assetIds","deleteAssetIdsFromTemplateAssetKey","useEffect","componentMounted","allTemplateAssets","emitUpdatedTemplateAssets","newAssetIds","oldAssetIds","_a","asset","error"],"mappings":";;AAQO,MAAMA,IAAoB,CAC7BC,GACAC,GACAC,GACAC,MACC;AACD,QAAM,CAACC,GAAgBC,CAAiB,IAAIC,EAAkC,CAAE,CAAA,GAE1EC,IAAgC,CAACC,MAMjC;AACF,IACIA,EAAM,aAAaP,KACnBO,EAAM,eAAeN,KACrBM,EAAM,mBAAmBL,KACzB,CAACM,EAAeD,EAAM,gBAAgBA,EAAM,kBAAkB,KAE9DH,EAAkBG,EAAM,cAAc;AAAA,EAC1C,GAGEE,IAAoB,YAClBT,MAAa,UACN,MAAMD,EAAU,+BAChBC,MAAa,kBAAkBE,IAC/B,MAAMH,EAAU,8BAA8BG,CAAc,IAC5DF,MAAa,aAAaC,IAC1B,MAAMF,EAAU,6BAA6BE,CAAU,IAG3D,IAGLS,IAAgC,OAAOC,GAAaC,MAAsC;AAC5F,IAAIZ,MAAa,UACP,MAAAD,EAAU,uCAAuCY,GAAKC,CAAQ,IAC7DZ,MAAa,kBAAkBE,IACtC,MAAMH,EAAU,0CAA0CG,GAAgBS,GAAKC,CAAQ,IAChFZ,MAAa,aAAaC,KACjC,MAAMF,EAAU,yCAAyCE,GAAYU,GAAKC,CAAQ;AAAA,EACtF,GAGEC,IAAqC,OAAOF,GAAaC,MAAsC;AACjG,IAAIZ,MAAa,UACP,MAAAD,EAAU,4CAA4CY,GAAKC,CAAQ,IAClEZ,MAAa,kBAAkBE,IACtC,MAAMH,EAAU,+CAA+CG,GAAgBS,GAAKC,CAAQ,IACrFZ,MAAa,aAAaC,KACjC,MAAMF,EAAU,8CAA8CE,GAAYU,GAAKC,CAAQ;AAAA,EAC3F;AAKJ,EAAAE,EAAU,MAAM;AACZ,QAAIC,IAAmB;AAEvB,WAAIf,OACsB,YAAY;AACxB,YAAAgB,IAAoB,MAAMP;AAEhC,MAAIM,KACAX,EAAkBY,CAAiB;AAAA,IACvC,MAIG,OAAA,QAAQ,GAAG,mCAAmCV,CAA6B,IAG/E,MAAM;AACU,MAAAS,IAAA,IACZ,OAAA,QAAQ,IAAI,mCAAmCT,CAA6B;AAAA,IAAA;AAAA,EAExF,GAAA,CAACP,GAAWE,GAAYC,CAAc,CAAC;AAE1C,QAAMe,IAA4B,YAAY;AACnC,WAAA,QAAQ,KAAK,mCAAmC;AAAA,MACnD,UAAAjB;AAAA,MACA,YAAAC;AAAA,MACA,gBAAAC;AAAA,MACA,gBAAgB,MAAMO,EAAkB;AAAA,MACxC,oBAAoB,EAAE,GAAGN,EAAe;AAAA,IAAA,CAC3C;AAAA,EAAA;AA2BE,SAAA;AAAA,IACH,gBAAAA;AAAA,IACA,kBAPqB,OAAOQ,GAAaC,MAAuB;AAC1D,YAAAF,EAA8BC,GAAKC,CAAQ,GACvBK;IAAA;AAAA,IAM1B,uBAb0B,OAAON,GAAaC,MAAuB;AAC/D,YAAAC,EAAmCF,GAAKC,CAAQ,GAC5BK;IAAA;AAAA,IAY1B,uBA5B0B,OAAON,GAAaO,MAA0B;;AAElE,YAAAC,MAAcC,KADU,MAAMX,KACME,CAAG,MAAzB,gBAAAS,EAA4B,IAAI,CAACC,MAAUA,EAAM,QAAO;AAExE,UAAA;AACM,cAAAR,EAAmCF,GAAKQ,CAAW,GACnD,MAAAT,EAA8BC,GAAKO,CAAW;AAAA,eAC/CI,GAAO;AACZ,gBAAQ,MAAMA,CAAK;AAAA,MACvB;AAE0B,MAAAL;IAAA;AAAA,EAiB1B;AAER;"}