{"version":3,"file":"useDocumentGroups.es.js","sources":["../../src/react/useDocumentGroups.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { produce } from 'immer';\n\nimport type { AppBridgeBlock } from '../AppBridgeBlock';\nimport type { AppBridgeTheme } from '../AppBridgeTheme';\nimport type { DocumentGroup, EmitterEvents } from '../types';\n\ntype DocumentGroupDocumentEvent = EmitterEvents['AppBridge:GuidelineDocumentGroup:DocumentAction'];\ntype DocumentEvent = EmitterEvents['AppBridge:GuidelineDocument:Action'];\ntype DocumentMoveEvent = EmitterEvents['AppBridge:GuidelineDocument:MoveEvent'];\ntype DocumentGroupMoveEvent = EmitterEvents['AppBridge:GuidelineDocumentGroup:MoveEvent'];\n\ntype Options = {\n    /**\n     * Whether it should fetch on mount.\n     */\n    enabled?: boolean;\n};\n\nconst sortDocumentGroups = (a: DocumentGroup, b: DocumentGroup) => (a.sort && b.sort ? a.sort - b.sort : 0);\n\nexport const useDocumentGroups = (appBridge: AppBridgeBlock | AppBridgeTheme, options: Options = { enabled: true }) => {\n    const [documentGroups, setDocumentGroups] = useState<Map<number, DocumentGroup>>(new Map([]));\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n\n    const refetch = useCallback(async () => {\n        setIsLoading(true);\n        setDocumentGroups(await fetchDocumentGroups(appBridge));\n        setIsLoading(false);\n    }, [appBridge]);\n\n    useEffect(() => {\n        if (options.enabled) {\n            refetch();\n        }\n    }, [options.enabled, refetch]);\n\n    useEffect(() => {\n        const handleDocumentEventUpdates = (event: DocumentGroupDocumentEvent) => {\n            setDocumentGroups(\n                produce((draft) => {\n                    const action = `${event.action}-document` as const;\n                    const handler = actionHandlers[action] || actionHandlers.default;\n                    return handler(draft, event.document);\n                }),\n            );\n        };\n\n        // handles when a document is moved from/in a document group, refetches for updated positioning\n        const handlerDocumentMoveEvent = (event: DocumentEvent) => {\n            if ((event?.action === 'move' || event?.action === 'add') && documentGroups.size > 0) {\n                refetch();\n            }\n        };\n\n        const handlerDocumentMoveEventPreview = (event: DocumentMoveEvent) => {\n            setDocumentGroups(\n                produce((draft) => previewDocumentSort(draft, event.document, event.position, event.newGroupId)),\n            );\n        };\n\n        const handlerDocumentGroupMoveEventPreview = (event: DocumentGroupMoveEvent) => {\n            setDocumentGroups(\n                produce((draft) => previewDocumentGroupsSort(draft, event.documentGroup, event.position)),\n            );\n        };\n\n        window.emitter.on('AppBridge:GuidelineDocumentGroup:Action', refetch);\n        window.emitter.on('AppBridge:GuidelineDocumentGroup:DocumentAction', handleDocumentEventUpdates);\n        window.emitter.on('AppBridge:GuidelineDocument:Action', handlerDocumentMoveEvent);\n        window.emitter.on('AppBridge:GuidelineDocument:MoveEvent', handlerDocumentMoveEventPreview);\n        window.emitter.on('AppBridge:GuidelineDocumentGroup:MoveEvent', handlerDocumentGroupMoveEventPreview);\n\n        return () => {\n            window.emitter.off('AppBridge:GuidelineDocumentGroup:Action', refetch);\n            window.emitter.off('AppBridge:GuidelineDocumentGroup:DocumentAction', handleDocumentEventUpdates);\n            window.emitter.off('AppBridge:GuidelineDocument:Action', handlerDocumentMoveEvent);\n            window.emitter.off('AppBridge:GuidelineDocument:MoveEvent', handlerDocumentMoveEventPreview);\n            window.emitter.off('AppBridge:GuidelineDocumentGroup:MoveEvent', handlerDocumentGroupMoveEventPreview);\n        };\n    }, [documentGroups.size, refetch]);\n\n    return { documentGroups: Array.from(documentGroups.values()), refetch, isLoading };\n};\n\nconst previewDocumentSort = (\n    documentGroups: Map<number, DocumentGroup>,\n    document: DocumentMoveEvent['document'],\n    newPosition: DocumentMoveEvent['position'],\n    newGroupId: DocumentMoveEvent['newGroupId'],\n) => {\n    if (newGroupId || !document.sort) {\n        return documentGroups;\n    }\n\n    const previousPosition = document.sort;\n    const documentGroupsAsArray: DocumentGroup[] = [...documentGroups.values()].sort(sortDocumentGroups);\n    const newDocumentGroups: DocumentGroup[] = [];\n\n    documentGroups.clear();\n\n    for (const currentDocumentGroup of documentGroupsAsArray) {\n        const currentPosition = currentDocumentGroup.sort ?? 0;\n        let positionIncrease = 0;\n        if (newPosition < currentPosition) {\n            positionIncrease = previousPosition > currentPosition || previousPosition === 0 ? 1 : 0;\n        } else {\n            positionIncrease = previousPosition <= currentPosition ? -1 : 0;\n        }\n\n        newDocumentGroups.push({\n            ...currentDocumentGroup,\n            sort: currentPosition + positionIncrease,\n        });\n    }\n\n    const sortedNewDocumentGroups = [...newDocumentGroups].sort(sortDocumentGroups);\n    for (const currentDocumentGroup of sortedNewDocumentGroups) {\n        documentGroups.set(currentDocumentGroup.id, currentDocumentGroup);\n    }\n\n    return documentGroups;\n};\n\nconst previewDocumentGroupsSort = (\n    documentGroups: Map<number, DocumentGroup>,\n    documentGroup: DocumentGroupMoveEvent['documentGroup'],\n    newPosition: DocumentGroupMoveEvent['position'],\n) => {\n    if (!documentGroup.sort) {\n        return documentGroups;\n    }\n\n    const previousPosition = documentGroup.sort;\n    const documentGroupsAsArray: DocumentGroup[] = [...documentGroups.values()].sort(sortDocumentGroups);\n    const newDocumentGroups: DocumentGroup[] = [];\n\n    documentGroups.clear();\n\n    for (const currentDocumentGroup of documentGroupsAsArray) {\n        if (currentDocumentGroup.id === documentGroup.id) {\n            newDocumentGroups.push({ ...currentDocumentGroup, sort: newPosition });\n            continue;\n        }\n\n        const currentPosition = currentDocumentGroup.sort ?? 0;\n        let positionIncrease = 0;\n        if (newPosition <= currentPosition) {\n            positionIncrease = previousPosition > currentPosition ? 1 : 0;\n        }\n\n        newDocumentGroups.push({\n            ...currentDocumentGroup,\n            sort: currentPosition + positionIncrease,\n        });\n    }\n\n    const sortedNewDocumentGroups = [...newDocumentGroups].sort(sortDocumentGroups);\n    for (const currentDocumentGroup of sortedNewDocumentGroups) {\n        documentGroups.set(currentDocumentGroup.id, currentDocumentGroup);\n    }\n\n    return documentGroups;\n};\n\nconst addDocument = (\n    documentGroups: Map<number, DocumentGroup>,\n    documentToAdd: DocumentGroupDocumentEvent['document'],\n) => {\n    if (!documentToAdd.documentGroupId) {\n        return documentGroups;\n    }\n\n    const documentGroup = documentGroups.get(documentToAdd.documentGroupId);\n    if (!documentGroup) {\n        return documentGroups;\n    }\n\n    const newDocumentGroup = {\n        ...documentGroup,\n        numberOfDocuments: documentGroup.numberOfDocuments + 1,\n    };\n\n    return documentGroups.set(documentGroup.id, newDocumentGroup);\n};\n\nconst deleteDocument = (\n    documentGroups: Map<number, DocumentGroup>,\n    documentToDelete: DocumentGroupDocumentEvent['document'],\n) => {\n    if (!documentToDelete.documentGroupId) {\n        return documentGroups;\n    }\n\n    const documentGroup = documentGroups.get(documentToDelete.documentGroupId);\n    if (!documentGroup) {\n        return documentGroups;\n    }\n\n    const newDocumentGroup = {\n        ...documentGroup,\n        numberOfDocuments: documentGroup.numberOfDocuments - 1,\n    };\n\n    return documentGroups.set(documentGroup.id, newDocumentGroup);\n};\n\nconst actionHandlers = {\n    'add-document': addDocument,\n    'delete-document': deleteDocument,\n    default: (groups: Map<number, DocumentGroup>) => groups,\n};\n\nconst fetchDocumentGroups = async (appBridge: AppBridgeBlock | AppBridgeTheme) => {\n    const documentGroups = await appBridge.getDocumentGroups();\n    return new Map([...documentGroups].sort(sortDocumentGroups).map((group) => [group.id, group]));\n};\n"],"names":["sortDocumentGroups","a","b","useDocumentGroups","appBridge","options","documentGroups","setDocumentGroups","useState","isLoading","setIsLoading","refetch","useCallback","fetchDocumentGroups","useEffect","handleDocumentEventUpdates","event","produce","draft","action","actionHandlers","handlerDocumentMoveEvent","handlerDocumentMoveEventPreview","previewDocumentSort","handlerDocumentGroupMoveEventPreview","previewDocumentGroupsSort","document","newPosition","newGroupId","previousPosition","documentGroupsAsArray","newDocumentGroups","currentDocumentGroup","currentPosition","positionIncrease","sortedNewDocumentGroups","documentGroup","addDocument","documentToAdd","newDocumentGroup","deleteDocument","documentToDelete","groups","group"],"mappings":"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"}