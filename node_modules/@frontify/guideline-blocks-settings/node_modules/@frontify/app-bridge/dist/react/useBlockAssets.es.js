import { useState as m, useEffect as i } from "react";
import { compareObjects as B } from "../utilities/object.es.js";
const K = (t) => {
  const o = t.getBlockId(), [A, l] = m({}), n = (s) => {
    s.blockId === o && !B(s.blockAssets, s.prevBlockAssets) && l(s.blockAssets);
  };
  i(() => {
    let s = !0;
    return o && ((async () => {
      const r = await t.getBlockAssets();
      s && l(r);
    })(), window.emitter.on("AppBridge:BlockAssetsUpdated", n)), () => {
      s = !1, window.emitter.off("AppBridge:BlockAssetsUpdated", n);
    };
  }, [t]);
  const c = async () => {
    window.emitter.emit("AppBridge:BlockAssetsUpdated", {
      blockId: o,
      blockAssets: await t.getBlockAssets(),
      prevBlockAssets: { ...A }
    });
  };
  return {
    blockAssets: A,
    addAssetIdsToKey: async (s, e) => {
      await t.addAssetIdsToBlockAssetKey(s, e), c();
    },
    deleteAssetIdsFromKey: async (s, e) => {
      await t.deleteAssetIdsFromBlockAssetKey(s, e), c();
    },
    updateAssetIdsFromKey: async (s, e) => {
      var a;
      const k = ((a = (await t.getBlockAssets())[s]) == null ? void 0 : a.map((d) => d.id)) ?? [];
      try {
        await t.deleteAssetIdsFromBlockAssetKey(s, k), await t.addAssetIdsToBlockAssetKey(s, e);
      } catch (d) {
        console.error(d);
      }
      c();
    }
  };
};
export {
  K as useBlockAssets
};
//# sourceMappingURL=useBlockAssets.es.js.map
