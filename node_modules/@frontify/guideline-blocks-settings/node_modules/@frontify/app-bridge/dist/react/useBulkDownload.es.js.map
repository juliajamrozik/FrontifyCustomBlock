{"version":3,"file":"useBulkDownload.es.js","sources":["../../src/react/useBulkDownload.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useRef, useState } from 'react';\nimport type { AppBridgeBlock } from '../AppBridgeBlock';\n\nexport enum BulkDownloadState {\n    Init = 'init',\n    Started = 'started',\n    Pending = 'pending',\n    Ready = 'ready',\n    Error = 'error',\n}\n\nexport const useBulkDownload = (appBridge: AppBridgeBlock) => {\n    const intervalId = useRef<number | null>(null);\n    const [status, setStatus] = useState<BulkDownloadState>(BulkDownloadState.Init);\n    const [downloadUrl, setDownloadUrl] = useState<Nullable<string>>(null);\n\n    const generateBulkDownload = async (assetIds: number[], setIds?: number[]) => {\n        try {\n            setStatus(BulkDownloadState.Started);\n\n            const token = await appBridge.getBulkDownloadToken(assetIds, setIds);\n\n            setDownloadUrl(null);\n            startDownload(token);\n        } catch (error) {\n            setStatus(BulkDownloadState.Error);\n            console.error(error);\n        }\n    };\n\n    const startDownload = async (token: string) => {\n        try {\n            const download = await appBridge.getBulkDownloadByToken(token);\n\n            if (download.downloadUrl) {\n                setDownloadUrl(download.downloadUrl);\n                setStatus(BulkDownloadState.Ready);\n            } else {\n                setStatus(BulkDownloadState.Pending);\n                intervalId.current = listenForBulkDownloadReady(download.signature);\n            }\n        } catch (error) {\n            setStatus(BulkDownloadState.Error);\n            console.error(error);\n        }\n    };\n\n    const listenForBulkDownloadReady = (signature: string) => {\n        return window.setInterval(async () => {\n            try {\n                const download = await appBridge.getBulkDownloadBySignature(signature);\n\n                if (download.downloadUrl) {\n                    setStatus(BulkDownloadState.Ready);\n                    setDownloadUrl(download.downloadUrl);\n                    intervalId.current && clearInterval(intervalId.current);\n                }\n            } catch (error) {\n                setStatus(BulkDownloadState.Error);\n                console.error(error);\n                intervalId.current && clearInterval(intervalId.current);\n            }\n        }, 2500);\n    };\n\n    return { generateBulkDownload, status, downloadUrl };\n};\n"],"names":["BulkDownloadState","useBulkDownload","appBridge","intervalId","useRef","status","setStatus","useState","downloadUrl","setDownloadUrl","generateBulkDownload","assetIds","setIds","token","startDownload","error","download","listenForBulkDownloadReady","signature"],"mappings":";AAKY,IAAAA,sBAAAA,OACRA,EAAA,OAAO,QACPA,EAAA,UAAU,WACVA,EAAA,UAAU,WACVA,EAAA,QAAQ,SACRA,EAAA,QAAQ,SALAA,IAAAA,KAAA,CAAA,CAAA;AAQC,MAAAC,IAAkB,CAACC,MAA8B;AACpD,QAAAC,IAAaC,EAAsB,IAAI,GACvC,CAACC,GAAQC,CAAS,IAAIC;AAAA,IAA4B;AAAA;AAAA,EAAsB,GACxE,CAACC,GAAaC,CAAc,IAAIF,EAA2B,IAAI,GAE/DG,IAAuB,OAAOC,GAAoBC,MAAsB;AACtE,QAAA;AACA,MAAAN;AAAA,QAAU;AAAA;AAAA,MAAyB;AAEnC,YAAMO,IAAQ,MAAMX,EAAU,qBAAqBS,GAAUC,CAAM;AAEnE,MAAAH,EAAe,IAAI,GACnBK,EAAcD,CAAK;AAAA,aACdE,GAAO;AACZ,MAAAT;AAAA,QAAU;AAAA;AAAA,MAAuB,GACjC,QAAQ,MAAMS,CAAK;AAAA,IACvB;AAAA,EAAA,GAGED,IAAgB,OAAOD,MAAkB;AACvC,QAAA;AACA,YAAMG,IAAW,MAAMd,EAAU,uBAAuBW,CAAK;AAE7D,MAAIG,EAAS,eACTP,EAAeO,EAAS,WAAW,GACnCV;AAAA,QAAU;AAAA;AAAA,MAAuB,MAEjCA;AAAA,QAAU;AAAA;AAAA,MAAyB,GACxBH,EAAA,UAAUc,EAA2BD,EAAS,SAAS;AAAA,aAEjED,GAAO;AACZ,MAAAT;AAAA,QAAU;AAAA;AAAA,MAAuB,GACjC,QAAQ,MAAMS,CAAK;AAAA,IACvB;AAAA,EAAA,GAGEE,IAA6B,CAACC,MACzB,OAAO,YAAY,YAAY;AAC9B,QAAA;AACA,YAAMF,IAAW,MAAMd,EAAU,2BAA2BgB,CAAS;AAErE,MAAIF,EAAS,gBACTV;AAAA,QAAU;AAAA;AAAA,MAAuB,GACjCG,EAAeO,EAAS,WAAW,GACxBb,EAAA,WAAW,cAAcA,EAAW,OAAO;AAAA,aAErDY,GAAO;AACZ,MAAAT;AAAA,QAAU;AAAA;AAAA,MAAuB,GACjC,QAAQ,MAAMS,CAAK,GACRZ,EAAA,WAAW,cAAcA,EAAW,OAAO;AAAA,IAC1D;AAAA,KACD,IAAI;AAGJ,SAAA,EAAE,sBAAAO,GAAsB,QAAAL,GAAQ,aAAAG;AAC3C;"}