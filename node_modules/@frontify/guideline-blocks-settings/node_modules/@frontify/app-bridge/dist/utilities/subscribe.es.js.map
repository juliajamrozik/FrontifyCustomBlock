{"version":3,"file":"subscribe.es.js","sources":["../../src/utilities/subscribe.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { FetchError } from '../errors/NotifyError';\nimport { TimeoutReachedError } from '../errors/TimeoutReachedError';\nimport { CrossDocumentMessageResponse, Topic } from '../types';\n\nexport type SubscribeOptions = {\n    timeout?: number;\n};\n\nexport const SUBSCRIBE_TIMEOUT = 3 * 1000;\n\nexport function subscribe<T>(topic: Topic, token: string, options?: SubscribeOptions): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n        const subscribeResponseCallback = (event: MessageEvent) => {\n            const response: CrossDocumentMessageResponse<T> = event.data;\n\n            if (response.token === token && response.topic === topic && response.success) {\n                resolve(<T>(response.data || true));\n            } else {\n                reject(new FetchError(topic));\n            }\n\n            window.removeEventListener('message', subscribeResponseCallback);\n        };\n\n        window.addEventListener('message', subscribeResponseCallback);\n\n        setTimeout(\n            () => {\n                reject(new TimeoutReachedError(topic));\n            },\n            options?.timeout || SUBSCRIBE_TIMEOUT,\n        );\n    });\n}\n"],"names":["SUBSCRIBE_TIMEOUT","subscribe","topic","token","options","resolve","reject","subscribeResponseCallback","event","response","FetchError","TimeoutReachedError"],"mappings":";;AAUO,MAAMA,IAAoB,IAAI;AAErB,SAAAC,EAAaC,GAAcC,GAAeC,GAAwC;AAC9F,SAAO,IAAI,QAAW,CAACC,GAASC,MAAW;AACjC,UAAAC,IAA4B,CAACC,MAAwB;AACvD,YAAMC,IAA4CD,EAAM;AAExD,MAAIC,EAAS,UAAUN,KAASM,EAAS,UAAUP,KAASO,EAAS,UACrDJ,EAAAI,EAAS,QAAQ,EAAK,IAE3BH,EAAA,IAAII,EAAWR,CAAK,CAAC,GAGzB,OAAA,oBAAoB,WAAWK,CAAyB;AAAA,IAAA;AAG5D,WAAA,iBAAiB,WAAWA,CAAyB,GAE5D;AAAA,MACI,MAAM;AACK,QAAAD,EAAA,IAAIK,EAAoBT,CAAK,CAAC;AAAA,MACzC;AAAA,OACAE,KAAA,gBAAAA,EAAS,YAAWJ;AAAA,IAAA;AAAA,EACxB,CACH;AACL;"}