{"version":3,"file":"borderRadiusExtended.es.js","sources":["../../src/settings/borderRadiusExtended.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { MultiInputLayout, SettingBlock, appendUnit, numericalOrPixelRule, presetCustomValue } from '../';\nimport { getBorderRadiusSlider } from './borderRadius';\nimport { Radius, radiusStyleMap } from './types';\n\n/**\n * Returns border radius settings: border radius switch, radius slider, custom radius inputs for every corner\n *\n * @param options Options for the settings\n * @param options.id Custom suffix for the setting ids\n * @param options.dependentSettingId Id of setting which the border radius is dependent on\n * @returns {SettingBlock} Returns border settings\n */\n\ntype BorderRadiusSettingsType = {\n    id?: string;\n    dependentSettingId?: string;\n    defaultValue?: Radius;\n};\n\nexport const getExtendedBorderRadiusSettings = (options?: BorderRadiusSettingsType): SettingBlock => {\n    const hasId = options?.id ? `hasExtendedCustomRadius_${options.id}` : 'hasExtendedCustomRadius';\n    const valueId = options?.id ? `extendedRadiusValue_${options.id}` : 'extendedRadiusValue';\n    const choiceId = options?.id ? `extendedRadiusChoice_${options.id}` : 'extendedRadiusChoice';\n    const topLeftId = options?.id ? `extendedRadiusTopLeft_${options.id}` : 'extendedRadiusTopLeft';\n    const topRightId = options?.id ? `extendedRadiusTopRight_${options.id}` : 'extendedRadiusTopRight';\n    const bottomLeftId = options?.id ? `extendedRadiusBottomLeft_${options.id}` : 'extendedRadiusBottomLeft';\n    const bottomRightId = options?.id ? `extendedRadiusBottomRight_${options.id}` : 'extendedRadiusBottomRight';\n\n    return {\n        id: hasId,\n        label: 'Corner radius',\n        type: 'switch',\n        switchLabel: 'Custom',\n        defaultValue: false,\n        info: 'Determining how rounded the corners are.',\n        show: (bundle) => (options?.dependentSettingId ? !!bundle.getBlock(options.dependentSettingId)?.value : true),\n        onChange: (bundle) => {\n            presetCustomValue(bundle, choiceId, topLeftId, radiusStyleMap);\n            presetCustomValue(bundle, choiceId, topRightId, radiusStyleMap);\n            presetCustomValue(bundle, choiceId, bottomLeftId, radiusStyleMap);\n            presetCustomValue(bundle, choiceId, bottomRightId, radiusStyleMap);\n        },\n        on: [\n            {\n                id: valueId,\n                type: 'multiInput',\n                layout: MultiInputLayout.Columns,\n                blocks: [\n                    {\n                        id: topLeftId,\n                        type: 'input',\n                        label: 'Top Left',\n                        rules: [numericalOrPixelRule],\n                        onChange: (bundle) => appendUnit(bundle, topLeftId),\n                    },\n                    {\n                        id: topRightId,\n                        type: 'input',\n                        label: 'Top Right',\n                        rules: [numericalOrPixelRule],\n                        onChange: (bundle) => appendUnit(bundle, topRightId),\n                    },\n                    {\n                        id: bottomLeftId,\n                        type: 'input',\n                        label: 'Bottom Left',\n                        rules: [numericalOrPixelRule],\n                        onChange: (bundle) => appendUnit(bundle, bottomLeftId),\n                    },\n                    {\n                        id: bottomRightId,\n                        type: 'input',\n                        label: 'Bottom Right',\n                        rules: [numericalOrPixelRule],\n                        onChange: (bundle) => appendUnit(bundle, bottomRightId),\n                    },\n                ],\n            },\n        ],\n        off: [getBorderRadiusSlider(choiceId, options?.defaultValue)],\n    };\n};\n"],"names":["getExtendedBorderRadiusSettings","options","hasId","valueId","choiceId","topLeftId","topRightId","bottomLeftId","bottomRightId","bundle","_a","presetCustomValue","radiusStyleMap","MultiInputLayout","numericalOrPixelRule","appendUnit","getBorderRadiusSlider"],"mappings":";;;;AAqBa,MAAAA,IAAkC,CAACC,MAAqD;AACjG,QAAMC,IAAQD,KAAA,QAAAA,EAAS,KAAK,2BAA2BA,EAAQ,EAAE,KAAK,2BAChEE,IAAUF,KAAA,QAAAA,EAAS,KAAK,uBAAuBA,EAAQ,EAAE,KAAK,uBAC9DG,IAAWH,KAAA,QAAAA,EAAS,KAAK,wBAAwBA,EAAQ,EAAE,KAAK,wBAChEI,IAAYJ,KAAA,QAAAA,EAAS,KAAK,yBAAyBA,EAAQ,EAAE,KAAK,yBAClEK,IAAaL,KAAA,QAAAA,EAAS,KAAK,0BAA0BA,EAAQ,EAAE,KAAK,0BACpEM,IAAeN,KAAA,QAAAA,EAAS,KAAK,4BAA4BA,EAAQ,EAAE,KAAK,4BACxEO,IAAgBP,KAAA,QAAAA,EAAS,KAAK,6BAA6BA,EAAQ,EAAE,KAAK;AAEzE,SAAA;AAAA,IACH,IAAIC;AAAA,IACJ,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,MAAM,CAACO;;AAAY,aAAAR,KAAA,QAAAA,EAAS,qBAAqB,CAAC,GAACS,IAAAD,EAAO,SAASR,EAAQ,kBAAkB,MAA1C,QAAAS,EAA6C,SAAQ;AAAA;AAAA,IACxG,UAAU,CAACD,MAAW;AACA,MAAAE,EAAAF,GAAQL,GAAUC,GAAWO,CAAc,GAC3CD,EAAAF,GAAQL,GAAUE,GAAYM,CAAc,GAC5CD,EAAAF,GAAQL,GAAUG,GAAcK,CAAc,GAC9CD,EAAAF,GAAQL,GAAUI,GAAeI,CAAc;AAAA,IACrE;AAAA,IACA,IAAI;AAAA,MACA;AAAA,QACI,IAAIT;AAAA,QACJ,MAAM;AAAA,QACN,QAAQU,EAAiB;AAAA,QACzB,QAAQ;AAAA,UACJ;AAAA,YACI,IAAIR;AAAA,YACJ,MAAM;AAAA,YACN,OAAO;AAAA,YACP,OAAO,CAACS,CAAoB;AAAA,YAC5B,UAAU,CAACL,MAAWM,EAAWN,GAAQJ,CAAS;AAAA,UACtD;AAAA,UACA;AAAA,YACI,IAAIC;AAAA,YACJ,MAAM;AAAA,YACN,OAAO;AAAA,YACP,OAAO,CAACQ,CAAoB;AAAA,YAC5B,UAAU,CAACL,MAAWM,EAAWN,GAAQH,CAAU;AAAA,UACvD;AAAA,UACA;AAAA,YACI,IAAIC;AAAA,YACJ,MAAM;AAAA,YACN,OAAO;AAAA,YACP,OAAO,CAACO,CAAoB;AAAA,YAC5B,UAAU,CAACL,MAAWM,EAAWN,GAAQF,CAAY;AAAA,UACzD;AAAA,UACA;AAAA,YACI,IAAIC;AAAA,YACJ,MAAM;AAAA,YACN,OAAO;AAAA,YACP,OAAO,CAACM,CAAoB;AAAA,YAC5B,UAAU,CAACL,MAAWM,EAAWN,GAAQD,CAAa;AAAA,UAC1D;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,KAAK,CAACQ,EAAsBZ,GAAUH,KAAA,gBAAAA,EAAS,YAAY,CAAC;AAAA,EAAA;AAEpE;"}