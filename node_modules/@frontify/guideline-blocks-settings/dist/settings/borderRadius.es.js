import "../styles.css.es.js";
import { presetCustomValue as g, numericalOrPixelRule as m, appendUnit as f } from "@frontify/sidebar-settings";
import { Radius as a, radiusStyleMap as i } from "./types.es.js";
const t = (e, l = a.None) => ({
  id: e,
  type: "segmentedControls",
  defaultValue: l,
  choices: [
    {
      value: a.None,
      label: "None"
    },
    {
      value: a.Small,
      label: "S"
    },
    {
      value: a.Medium,
      label: "M"
    },
    {
      value: a.Large,
      label: "L"
    }
  ]
}), b = (e) => {
  const l = e != null && e.id ? `hasRadius_${e.id}` : "hasRadius", u = e != null && e.id ? `radiusValue_${e.id}` : "radiusValue", r = e != null && e.id ? `radiusChoice_${e.id}` : "radiusChoice", h = (e == null ? void 0 : e.defaultRadius) || a.None;
  return {
    id: l,
    label: "Corner radius",
    type: "switch",
    switchLabel: "Custom",
    defaultValue: !1,
    info: "Determining how rounded the corners are.",
    show: (d) => {
      var c;
      return e != null && e.dependentSettingId ? !!((c = d.getBlock(e.dependentSettingId)) != null && c.value) : !0;
    },
    onChange: (d) => g(d, r, u, (e == null ? void 0 : e.radiusStyleMap) || i),
    on: [
      {
        id: u,
        type: "input",
        placeholder: "e.g. 10px",
        rules: [m],
        onChange: (d) => f(d, u)
      }
    ],
    off: [t(r, h)]
  };
};
export {
  b as getBorderRadiusSettings,
  t as getBorderRadiusSlider
};
//# sourceMappingURL=borderRadius.es.js.map
