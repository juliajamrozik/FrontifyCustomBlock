import "../styles.css.es.js";
import { presetCustomValue as a, MultiInputLayout as x, numericalOrPixelRule as u, appendUnit as l } from "@frontify/sidebar-settings";
import { getBorderRadiusSlider as C } from "./borderRadius.es.js";
import { radiusStyleMap as r } from "./types.es.js";
const _ = (e) => {
  const c = e != null && e.id ? `hasExtendedCustomRadius_${e.id}` : "hasExtendedCustomRadius", f = e != null && e.id ? `extendedRadiusValue_${e.id}` : "extendedRadiusValue", t = e != null && e.id ? `extendedRadiusChoice_${e.id}` : "extendedRadiusChoice", R = e != null && e.id ? `extendedRadiusTopLeft_${e.id}` : "extendedRadiusTopLeft", h = e != null && e.id ? `extendedRadiusTopRight_${e.id}` : "extendedRadiusTopRight", m = e != null && e.id ? `extendedRadiusBottomLeft_${e.id}` : "extendedRadiusBottomLeft", g = e != null && e.id ? `extendedRadiusBottomRight_${e.id}` : "extendedRadiusBottomRight";
  return {
    id: c,
    label: "Corner radius",
    type: "switch",
    switchLabel: "Custom",
    defaultValue: !1,
    info: "Determining how rounded the corners are.",
    show: (d) => {
      var i;
      return e != null && e.dependentSettingId ? !!((i = d.getBlock(e.dependentSettingId)) != null && i.value) : !0;
    },
    onChange: (d) => {
      a(d, t, R, r), a(d, t, h, r), a(d, t, m, r), a(d, t, g, r);
    },
    on: [
      {
        id: f,
        type: "multiInput",
        layout: x.Columns,
        blocks: [
          {
            id: R,
            type: "input",
            label: "Top Left",
            rules: [u],
            onChange: (d) => l(d, R)
          },
          {
            id: h,
            type: "input",
            label: "Top Right",
            rules: [u],
            onChange: (d) => l(d, h)
          },
          {
            id: m,
            type: "input",
            label: "Bottom Left",
            rules: [u],
            onChange: (d) => l(d, m)
          },
          {
            id: g,
            type: "input",
            label: "Bottom Right",
            rules: [u],
            onChange: (d) => l(d, g)
          }
        ]
      }
    ],
    off: [C(t, e == null ? void 0 : e.defaultValue)]
  };
};
export {
  _ as getExtendedBorderRadiusSettings
};
//# sourceMappingURL=borderRadiusExtended.es.js.map
