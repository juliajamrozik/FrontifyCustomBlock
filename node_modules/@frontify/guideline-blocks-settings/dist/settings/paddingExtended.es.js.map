{"version":3,"file":"paddingExtended.es.js","sources":["../../src/settings/paddingExtended.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport {\n    MultiInputLayout,\n    SettingBlock,\n    appendUnit,\n    maximumNumericalOrPixelOrAutoRule,\n    numericalOrPixelRule,\n    presetCustomValue,\n} from '../';\nimport { PADDING_DEFAULT_PLACEHOLDER } from './defaultValues';\nimport { getPaddingSlider } from './padding';\nimport { paddingStyleMap } from './types';\n\ntype PaddingSettingsType = {\n    id?: string;\n};\n\n/**\n * Returns padding settings: padding switch, padding slider, custom padding input for every direction\n *\n * @param options Options for the settings\n * @param options.id Custom suffix for the setting ids\n * @returns {SettingBlock} Returns padding settings\n */\nexport const getPaddingExtendedSettings = (options?: PaddingSettingsType): SettingBlock => {\n    const hasId = options?.id ? `hasExtendedCustomPadding_${options?.id}` : 'hasExtendedCustomPadding';\n    const valueId = options?.id ? `extendedPaddingValues_${options?.id}` : 'extendedPaddingValues';\n    const choiceId = options?.id ? `extendedPaddingChoice_${options?.id}` : 'extendedPaddingChoice';\n    const topId = options?.id ? `extendedPaddingTop_${options?.id}` : 'extendedPaddingTop';\n    const leftId = options?.id ? `extendedPaddingLeft_${options?.id}` : 'extendedPaddingLeft';\n    const rightId = options?.id ? `extendedPaddingRight_${options?.id}` : 'extendedPaddingRight';\n    const bottomId = options?.id ? `extendedPaddingBottom_${options?.id}` : 'extendedPaddingBottom';\n\n    return {\n        id: hasId,\n        label: 'Padding',\n        type: 'switch',\n        switchLabel: 'Custom',\n        defaultValue: false,\n        info: 'The spacing around UI elements to create more negative space',\n        onChange: (bundle) => {\n            presetCustomValue(bundle, choiceId, topId, paddingStyleMap);\n            presetCustomValue(bundle, choiceId, leftId, paddingStyleMap);\n            presetCustomValue(bundle, choiceId, rightId, paddingStyleMap);\n            presetCustomValue(bundle, choiceId, bottomId, paddingStyleMap);\n        },\n        on: [\n            {\n                id: valueId,\n                type: 'multiInput',\n                layout: MultiInputLayout.Spider,\n                blocks: [\n                    {\n                        id: topId,\n                        type: 'input',\n                        label: 'Top',\n                        placeholder: PADDING_DEFAULT_PLACEHOLDER,\n                        onChange: (bundle) => appendUnit(bundle, topId),\n                        rules: [numericalOrPixelRule, maximumNumericalOrPixelOrAutoRule(500)],\n                    },\n                    {\n                        id: leftId,\n                        type: 'input',\n                        label: 'Left',\n                        placeholder: PADDING_DEFAULT_PLACEHOLDER,\n                        onChange: (bundle) => appendUnit(bundle, leftId),\n                        rules: [numericalOrPixelRule, maximumNumericalOrPixelOrAutoRule(500)],\n                    },\n                    {\n                        id: rightId,\n                        type: 'input',\n                        label: 'Right',\n                        placeholder: PADDING_DEFAULT_PLACEHOLDER,\n                        onChange: (bundle) => appendUnit(bundle, rightId),\n                        rules: [numericalOrPixelRule, maximumNumericalOrPixelOrAutoRule(500)],\n                    },\n                    {\n                        id: bottomId,\n                        type: 'input',\n                        label: 'Bottom',\n                        placeholder: PADDING_DEFAULT_PLACEHOLDER,\n                        onChange: (bundle) => appendUnit(bundle, bottomId),\n                        rules: [numericalOrPixelRule, maximumNumericalOrPixelOrAutoRule(500)],\n                    },\n                ],\n            },\n        ],\n        off: [getPaddingSlider(choiceId)],\n    };\n};\n"],"names":["getPaddingExtendedSettings","options","hasId","valueId","choiceId","topId","leftId","rightId","bottomId","bundle","presetCustomValue","paddingStyleMap","MultiInputLayout","PADDING_DEFAULT_PLACEHOLDER","appendUnit","numericalOrPixelRule","maximumNumericalOrPixelOrAutoRule","getPaddingSlider"],"mappings":";;;;;AAyBa,MAAAA,IAA6B,CAACC,MAAgD;AACvF,QAAMC,IAAQD,KAAA,QAAAA,EAAS,KAAK,4BAA4BA,KAAA,gBAAAA,EAAS,EAAE,KAAK,4BAClEE,IAAUF,KAAA,QAAAA,EAAS,KAAK,yBAAyBA,KAAA,gBAAAA,EAAS,EAAE,KAAK,yBACjEG,IAAWH,KAAA,QAAAA,EAAS,KAAK,yBAAyBA,KAAA,gBAAAA,EAAS,EAAE,KAAK,yBAClEI,IAAQJ,KAAA,QAAAA,EAAS,KAAK,sBAAsBA,KAAA,gBAAAA,EAAS,EAAE,KAAK,sBAC5DK,IAASL,KAAA,QAAAA,EAAS,KAAK,uBAAuBA,KAAA,gBAAAA,EAAS,EAAE,KAAK,uBAC9DM,IAAUN,KAAA,QAAAA,EAAS,KAAK,wBAAwBA,KAAA,gBAAAA,EAAS,EAAE,KAAK,wBAChEO,IAAWP,KAAA,QAAAA,EAAS,KAAK,yBAAyBA,KAAA,gBAAAA,EAAS,EAAE,KAAK;AAEjE,SAAA;AAAA,IACH,IAAIC;AAAA,IACJ,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,UAAU,CAACO,MAAW;AACA,MAAAC,EAAAD,GAAQL,GAAUC,GAAOM,CAAe,GACxCD,EAAAD,GAAQL,GAAUE,GAAQK,CAAe,GACzCD,EAAAD,GAAQL,GAAUG,GAASI,CAAe,GAC1CD,EAAAD,GAAQL,GAAUI,GAAUG,CAAe;AAAA,IACjE;AAAA,IACA,IAAI;AAAA,MACA;AAAA,QACI,IAAIR;AAAA,QACJ,MAAM;AAAA,QACN,QAAQS,EAAiB;AAAA,QACzB,QAAQ;AAAA,UACJ;AAAA,YACI,IAAIP;AAAA,YACJ,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAaQ;AAAA,YACb,UAAU,CAACJ,MAAWK,EAAWL,GAAQJ,CAAK;AAAA,YAC9C,OAAO,CAACU,GAAsBC,EAAkC,GAAG,CAAC;AAAA,UACxE;AAAA,UACA;AAAA,YACI,IAAIV;AAAA,YACJ,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAaO;AAAA,YACb,UAAU,CAACJ,MAAWK,EAAWL,GAAQH,CAAM;AAAA,YAC/C,OAAO,CAACS,GAAsBC,EAAkC,GAAG,CAAC;AAAA,UACxE;AAAA,UACA;AAAA,YACI,IAAIT;AAAA,YACJ,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAaM;AAAA,YACb,UAAU,CAACJ,MAAWK,EAAWL,GAAQF,CAAO;AAAA,YAChD,OAAO,CAACQ,GAAsBC,EAAkC,GAAG,CAAC;AAAA,UACxE;AAAA,UACA;AAAA,YACI,IAAIR;AAAA,YACJ,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAaK;AAAA,YACb,UAAU,CAACJ,MAAWK,EAAWL,GAAQD,CAAQ;AAAA,YACjD,OAAO,CAACO,GAAsBC,EAAkC,GAAG,CAAC;AAAA,UACxE;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,KAAK,CAACC,EAAiBb,CAAQ,CAAC;AAAA,EAAA;AAExC;"}