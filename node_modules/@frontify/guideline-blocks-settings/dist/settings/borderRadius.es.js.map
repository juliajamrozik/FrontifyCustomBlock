{"version":3,"file":"borderRadius.es.js","sources":["../../src/settings/borderRadius.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { SettingBlock, appendUnit, numericalOrPixelRule, presetCustomValue } from '../';\n\nimport { Radius, radiusStyleMap } from './types';\n\n/**\n * Returns border radius settings: border radius switch, radius slider, custom radius input\n *\n * @param options Options for the settings\n * @param options.id Custom suffix for the setting ids\n * @param options.dependentSettingId Id of setting which the border radius is dependent on\n * @returns {SettingBlock} Returns border settings\n */\n\ntype BorderRadiusSettingsType = {\n    id?: string;\n    dependentSettingId?: string;\n    radiusStyleMap?: Record<Radius, string>;\n    defaultRadius?: Radius;\n};\n\nexport const getBorderRadiusSlider = (id: string, defaultValue: Radius = Radius.None): SettingBlock => ({\n    id,\n    type: 'segmentedControls',\n    defaultValue,\n    choices: [\n        {\n            value: Radius.None,\n            label: 'None',\n        },\n        {\n            value: Radius.Small,\n            label: 'S',\n        },\n        {\n            value: Radius.Medium,\n            label: 'M',\n        },\n        {\n            value: Radius.Large,\n            label: 'L',\n        },\n    ],\n});\n\nexport const getBorderRadiusSettings = (options?: BorderRadiusSettingsType): SettingBlock => {\n    const hasId = options?.id ? `hasRadius_${options.id}` : 'hasRadius';\n    const valueId = options?.id ? `radiusValue_${options.id}` : 'radiusValue';\n    const choiceId = options?.id ? `radiusChoice_${options.id}` : 'radiusChoice';\n    const defaultValue = options?.defaultRadius || Radius.None;\n\n    return {\n        id: hasId,\n        label: 'Corner radius',\n        type: 'switch',\n        switchLabel: 'Custom',\n        defaultValue: false,\n        info: 'Determining how rounded the corners are.',\n        show: (bundle) => (options?.dependentSettingId ? !!bundle.getBlock(options.dependentSettingId)?.value : true),\n        onChange: (bundle) => presetCustomValue(bundle, choiceId, valueId, options?.radiusStyleMap || radiusStyleMap),\n        on: [\n            {\n                id: valueId,\n                type: 'input',\n                placeholder: 'e.g. 10px',\n                rules: [numericalOrPixelRule],\n                onChange: (bundle) => appendUnit(bundle, valueId),\n            },\n        ],\n        off: [getBorderRadiusSlider(choiceId, defaultValue)],\n    };\n};\n"],"names":["getBorderRadiusSlider","id","defaultValue","Radius","getBorderRadiusSettings","options","hasId","valueId","choiceId","bundle","_a","presetCustomValue","radiusStyleMap","numericalOrPixelRule","appendUnit"],"mappings":";;;AAsBO,MAAMA,IAAwB,CAACC,GAAYC,IAAuBC,EAAO,UAAwB;AAAA,EACpG,IAAAF;AAAA,EACA,MAAM;AAAA,EACN,cAAAC;AAAA,EACA,SAAS;AAAA,IACL;AAAA,MACI,OAAOC,EAAO;AAAA,MACd,OAAO;AAAA,IACX;AAAA,IACA;AAAA,MACI,OAAOA,EAAO;AAAA,MACd,OAAO;AAAA,IACX;AAAA,IACA;AAAA,MACI,OAAOA,EAAO;AAAA,MACd,OAAO;AAAA,IACX;AAAA,IACA;AAAA,MACI,OAAOA,EAAO;AAAA,MACd,OAAO;AAAA,IACX;AAAA,EACJ;AACJ,IAEaC,IAA0B,CAACC,MAAqD;AACzF,QAAMC,IAAQD,KAAA,QAAAA,EAAS,KAAK,aAAaA,EAAQ,EAAE,KAAK,aAClDE,IAAUF,KAAA,QAAAA,EAAS,KAAK,eAAeA,EAAQ,EAAE,KAAK,eACtDG,IAAWH,KAAA,QAAAA,EAAS,KAAK,gBAAgBA,EAAQ,EAAE,KAAK,gBACxDH,KAAeG,KAAA,gBAAAA,EAAS,kBAAiBF,EAAO;AAE/C,SAAA;AAAA,IACH,IAAIG;AAAA,IACJ,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,MAAM,CAACG;;AAAY,aAAAJ,KAAA,QAAAA,EAAS,qBAAqB,CAAC,GAACK,IAAAD,EAAO,SAASJ,EAAQ,kBAAkB,MAA1C,QAAAK,EAA6C,SAAQ;AAAA;AAAA,IACxG,UAAU,CAACD,MAAWE,EAAkBF,GAAQD,GAAUD,IAASF,KAAA,gBAAAA,EAAS,mBAAkBO,CAAc;AAAA,IAC5G,IAAI;AAAA,MACA;AAAA,QACI,IAAIL;AAAA,QACJ,MAAM;AAAA,QACN,aAAa;AAAA,QACb,OAAO,CAACM,CAAoB;AAAA,QAC5B,UAAU,CAACJ,MAAWK,EAAWL,GAAQF,CAAO;AAAA,MACpD;AAAA,IACJ;AAAA,IACA,KAAK,CAACP,EAAsBQ,GAAUN,CAAY,CAAC;AAAA,EAAA;AAE3D;"}