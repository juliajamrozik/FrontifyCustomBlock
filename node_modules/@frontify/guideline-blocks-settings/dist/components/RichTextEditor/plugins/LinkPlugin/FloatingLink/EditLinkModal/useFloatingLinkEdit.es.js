import { useEditorRef as y, usePlateSelectors as F, useFloatingLinkSelectors as l, getPluginOptions as h, ELEMENT_LINK as n, getAboveNode as C, getPluginType as d, getRangeBoundingClientRect as R, getStartPoint as P, getEndPoint as b, getDefaultBoundingClientRect as N, useVirtualFloatingLink as O, floatingLinkActions as o, someNode as S, floatingLinkSelectors as c, useHotkeys as B, triggerFloatingLinkEdit as I, useFloatingLinkEnter as v, useFloatingLinkEscape as x, useComposedRef as A } from "@udecode/plate";
import { useCallback as D, useEffect as H } from "react";
import { getUrlFromEditor as T } from "../../utils/getUrl.es.js";
const M = ({ floatingOptions: g, ...i }) => {
  const e = y(), u = F().keyEditor(), a = l().mode(), f = l().isOpen(e.id), { triggerFloatingLinkHotkeys: m = "command+k, ctrl+k" } = h(e, n), k = D(() => {
    const t = C(e, {
      match: { type: d(e, n) }
    });
    if (t) {
      const [, s] = t;
      return R(e, {
        anchor: P(e, s),
        focus: b(e, s)
      });
    }
    return N();
  }, [e]), p = f && a === "edit", { update: r, style: E, floating: L } = O({
    editorId: e.id,
    open: p,
    getBoundingClientRect: k,
    ...g
  });
  return H(() => {
    const t = T(e);
    if (t && o.url(t), e.selection && S(e, {
      match: { type: d(e, n) }
    })) {
      o.show("edit", e.id), r();
      return;
    }
    c.mode() === "edit" && o.hide();
  }, [e, u, r]), B(
    m,
    (t) => {
      t.preventDefault(), c.mode() === "edit" && I(e);
    },
    {
      enableOnContentEditable: !0
    },
    []
  ), v(), x(), {
    style: {
      ...E,
      zIndex: 1e3
    },
    ...i,
    ref: A(i.ref, L)
  };
};
export {
  M as useFloatingLinkEdit
};
//# sourceMappingURL=useFloatingLinkEdit.es.js.map
