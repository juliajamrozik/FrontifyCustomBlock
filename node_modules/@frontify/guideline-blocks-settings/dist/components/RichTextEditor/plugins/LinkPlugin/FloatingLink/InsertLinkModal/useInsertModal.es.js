import { CheckboxState as r } from "@frontify/fondue";
import { useEditorRef as m, floatingLinkSelectors as u, getPluginOptions as h, ELEMENT_LINK as y, useHotkeys as E, floatingLinkActions as a, submitFloatingLink as b } from "@udecode/plate";
import { useEffect as k, useReducer as U } from "react";
import { isValidUrlOrEmpty as d } from "../../utils/url.es.js";
import { getLegacyUrl as x, getUrl as w } from "../../utils/getUrl.es.js";
import { addHttps as I } from "../../../../../../helpers/addHttps.es.js";
const L = {
  url: "",
  text: "",
  newTab: r.Unchecked
}, S = () => {
  const [o, n] = U((e, c) => {
    const { type: s, payload: l } = c;
    switch (s) {
      case "NEW_TAB":
        return {
          ...e,
          newTab: r.Checked
        };
      case "SAME_TAB":
        return {
          ...e,
          newTab: r.Unchecked
        };
      case "URL":
      case "TEXT":
      case "INIT":
        return {
          ...e,
          ...l
        };
      default:
        return e;
    }
  }, L);
  return [o, n];
}, R = () => {
  const o = m(), [n, e] = S();
  k(() => {
    const t = x(o), i = w(o);
    e({
      type: "INIT",
      payload: {
        text: u.text(),
        newTab: u.newTab() ? r.Checked : r.Unchecked,
        url: t && i === "" ? t : u.url()
      }
    });
  }, [e, o]);
  const c = (t) => {
    e({
      type: "TEXT",
      payload: { text: t }
    });
  }, s = (t) => {
    e({
      type: "URL",
      payload: { url: t }
    });
  }, l = (t) => {
    e(t ? { type: "NEW_TAB" } : { type: "SAME_TAB" });
  }, f = () => {
    a.hide();
  }, p = (t) => {
    if (!d(n.url) || !T)
      return;
    const i = I(n.url);
    a.text(n.text), a.url(i), a.newTab(n.newTab === r.Checked), b(o) && (t == null || t.preventDefault());
  }, T = n.url !== "" && n.text !== "", { appBridge: g } = h(o, y);
  return E(
    "enter",
    p,
    {
      enableOnFormTags: ["INPUT"]
    },
    []
  ), {
    state: n,
    onTextChange: c,
    onUrlChange: s,
    onToggleTab: l,
    onCancel: f,
    onSave: p,
    hasValues: T,
    isValidUrlOrEmpty: d,
    appBridge: g
  };
};
export {
  S as InsertModalState,
  R as useInsertModal
};
//# sourceMappingURL=useInsertModal.es.js.map
