import { jsx as l } from "react/jsx-runtime";
import { createPluginFactory as u } from "@udecode/plate";
import { Plugin as a, TextStyles as o, MarkupElement as c, merge as i, alignmentClassnames as p, getColumnBreakClasses as g } from "@frontify/fondue";
import { BlockStyles as y } from "../styles.es.js";
const C = "textstyle-custom3-plugin";
class P extends a {
  constructor({ styles: s = y.custom3, ...e } = {}) {
    super(o.custom3, {
      label: "Custom 3",
      markupElement: new k(),
      ...e
    }), this.styles = {}, this.styles = s;
  }
  plugins() {
    return [d(this.styles)];
  }
}
class k extends c {
  constructor(s = C, e = r) {
    super(s, e);
  }
}
const r = ({ element: t, attributes: s, children: e, styles: n }) => {
  const m = t.align;
  return /* @__PURE__ */ l(
    "p",
    {
      ...s,
      className: i([m && p[m], g(t), "a-custom3"]),
      children: /* @__PURE__ */ l("span", { style: n, children: e })
    }
  );
}, d = (t) => u({
  key: o.custom3,
  isElement: !0,
  deserializeHtml: {
    rules: [{ validClassName: o.custom3 }]
  }
})({
  component: (s) => /* @__PURE__ */ l(r, { ...s, styles: t })
});
export {
  P as Custom3Plugin
};
//# sourceMappingURL=custom3Plugin.es.js.map
