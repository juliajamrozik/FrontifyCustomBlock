{"version":3,"file":"quotePlugin.es.js","sources":["../../../../../src/components/RichTextEditor/plugins/TextStylePlugins/quotePlugin.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { createPluginFactory } from '@udecode/plate';\nimport type { CSSProperties } from 'react';\nimport {\n    MarkupElement,\n    Plugin,\n    PluginProps,\n    TextStyleRenderElementProps,\n    alignmentClassnames,\n    getColumnBreakClasses,\n    merge,\n} from '@frontify/fondue';\nimport { BlockStyles, TextStyles } from '../styles';\n\nconst ID = 'textstyle-quote-plugin';\n\nexport class QuotePlugin extends Plugin {\n    public styles: CSSProperties = {};\n    constructor({ styles = BlockStyles.quote, ...props }: PluginProps = {}) {\n        super(TextStyles.quote, {\n            label: 'Quote',\n            markupElement: new QuoteMarkupElement(),\n            ...props,\n        });\n        this.styles = styles;\n    }\n\n    plugins() {\n        return [createQuotePlugin(this.styles)];\n    }\n}\n\nclass QuoteMarkupElement extends MarkupElement {\n    constructor(id = ID, node = QuoteMarkupElementNode) {\n        super(id, node);\n    }\n}\n\nexport const QuoteMarkupElementNode = ({ element, attributes, children, styles }: TextStyleRenderElementProps) => {\n    const align = element.align as string;\n    return (\n        <blockquote\n            {...attributes}\n            className={merge([align && alignmentClassnames[align], getColumnBreakClasses(element), 'a-quote'])}\n        >\n            <span style={styles}>{children}</span>\n        </blockquote>\n    );\n};\n\nexport const createQuotePlugin = (styles: CSSProperties) =>\n    createPluginFactory({\n        key: TextStyles.quote,\n        isElement: true,\n        component: QuoteMarkupElementNode,\n        deserializeHtml: {\n            rules: [{ validNodeName: ['blockquote', 'BLOCKQUOTE'] }],\n        },\n    })({\n        component: (props: TextStyleRenderElementProps) => <QuoteMarkupElementNode {...props} styles={styles} />,\n    });\n"],"names":["ID","QuotePlugin","Plugin","styles","BlockStyles","props","TextStyles","QuoteMarkupElement","createQuotePlugin","MarkupElement","id","node","QuoteMarkupElementNode","element","attributes","children","align","jsx","merge","alignmentClassnames","getColumnBreakClasses","createPluginFactory"],"mappings":";;;;AAeA,MAAMA,IAAK;AAEJ,MAAMC,UAAoBC,EAAO;AAAA,EAEpC,YAAY,EAAE,QAAAC,IAASC,EAAY,OAAO,GAAGC,EAAuB,IAAA,IAAI;AACpE,UAAMC,EAAW,OAAO;AAAA,MACpB,OAAO;AAAA,MACP,eAAe,IAAIC,EAAmB;AAAA,MACtC,GAAGF;AAAA,IAAA,CACN,GANL,KAAO,SAAwB,IAO3B,KAAK,SAASF;AAAA,EAClB;AAAA,EAEA,UAAU;AACN,WAAO,CAACK,EAAkB,KAAK,MAAM,CAAC;AAAA,EAC1C;AACJ;AAEA,MAAMD,UAA2BE,EAAc;AAAA,EAC3C,YAAYC,IAAKV,GAAIW,IAAOC,GAAwB;AAChD,UAAMF,GAAIC,CAAI;AAAA,EAClB;AACJ;AAEO,MAAMC,IAAyB,CAAC,EAAE,SAAAC,GAAS,YAAAC,GAAY,UAAAC,GAAU,QAAAZ,QAA0C;AAC9G,QAAMa,IAAQH,EAAQ;AAElB,SAAA,gBAAAI;AAAA,IAAC;AAAA,IAAA;AAAA,MACI,GAAGH;AAAA,MACJ,WAAWI,EAAM,CAACF,KAASG,EAAoBH,CAAK,GAAGI,EAAsBP,CAAO,GAAG,SAAS,CAAC;AAAA,MAEjG,UAAC,gBAAAI,EAAA,QAAA,EAAK,OAAOd,GAAS,UAAAY,GAAS;AAAA,IAAA;AAAA,EAAA;AAG3C,GAEaP,IAAoB,CAACL,MAC9BkB,EAAoB;AAAA,EAChB,KAAKf,EAAW;AAAA,EAChB,WAAW;AAAA,EACX,WAAWM;AAAA,EACX,iBAAiB;AAAA,IACb,OAAO,CAAC,EAAE,eAAe,CAAC,cAAc,YAAY,GAAG;AAAA,EAC3D;AACJ,CAAC,EAAE;AAAA,EACC,WAAW,CAACP,wBAAwCO,GAAwB,EAAA,GAAGP,GAAO,QAAAF,GAAgB;AAC1G,CAAC;"}