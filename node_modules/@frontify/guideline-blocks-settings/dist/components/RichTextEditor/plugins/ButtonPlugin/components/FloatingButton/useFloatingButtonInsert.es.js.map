{"version":3,"file":"useFloatingButtonInsert.es.js","sources":["../../../../../../../src/components/RichTextEditor/plugins/ButtonPlugin/components/FloatingButton/useFloatingButtonInsert.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport {\n    HTMLPropsAs,\n    getPluginOptions,\n    getSelectionBoundingClientRect,\n    useComposedRef,\n    useEditorRef,\n    useHotkeys,\n} from '@udecode/plate';\nimport { useEffect } from 'react';\nimport { useFocused } from 'slate-react';\nimport { ButtonPlugin, ELEMENT_BUTTON } from '../../createButtonPlugin';\nimport { triggerFloatingButtonInsert } from '../../utils/triggerFloatingButtonInsert';\nimport {\n    FloatingButtonProps,\n    floatingButtonActions,\n    useFloatingButtonEscape,\n    useFloatingButtonSelectors,\n    useVirtualFloatingButton,\n} from '.';\n\nexport const useFloatingButtonInsert = ({ floatingOptions, ...props }: FloatingButtonProps): HTMLPropsAs<'div'> => {\n    const editor = useEditorRef();\n    const focused = useFocused();\n    const mode = useFloatingButtonSelectors().mode();\n    const open = useFloatingButtonSelectors().isOpen(editor.id);\n\n    const { triggerFloatingButtonHotkeys } = getPluginOptions<ButtonPlugin>(editor, ELEMENT_BUTTON);\n\n    useHotkeys(\n        triggerFloatingButtonHotkeys,\n        (e) => {\n            e.preventDefault();\n\n            triggerFloatingButtonInsert(editor, {\n                focused,\n            });\n        },\n        {\n            enableOnContentEditable: true,\n        },\n        [focused],\n    );\n\n    const { update, style, floating } = useVirtualFloatingButton({\n        open: open && mode === 'insert',\n        getBoundingClientRect: getSelectionBoundingClientRect,\n        whileElementsMounted: undefined,\n        ...floatingOptions,\n    });\n\n    // wait for update before focusing input\n    useEffect(() => {\n        if (open) {\n            update();\n        }\n        floatingButtonActions.updated(open);\n    }, [open, update]);\n\n    useFloatingButtonEscape();\n\n    return {\n        style: {\n            ...style,\n            zIndex: 1000,\n        },\n        ...props,\n        ref: useComposedRef<HTMLElement | null>(props.ref, floating),\n    };\n};\n"],"names":["useFloatingButtonInsert","floatingOptions","props","editor","useEditorRef","focused","useFocused","mode","useFloatingButtonSelectors","open","triggerFloatingButtonHotkeys","getPluginOptions","ELEMENT_BUTTON","useHotkeys","e","triggerFloatingButtonInsert","update","style","floating","useVirtualFloatingButton","getSelectionBoundingClientRect","useEffect","floatingButtonActions","useFloatingButtonEscape","useComposedRef"],"mappings":";;;;;;;;AAsBO,MAAMA,IAA0B,CAAC,EAAE,iBAAAC,GAAiB,GAAGC,QAAqD;AAC/G,QAAMC,IAASC,KACTC,IAAUC,KACVC,IAAOC,IAA6B,QACpCC,IAAOD,EAA6B,EAAA,OAAOL,EAAO,EAAE,GAEpD,EAAE,8BAAAO,EAAiC,IAAAC,EAA+BR,GAAQS,CAAc;AAE9F,EAAAC;AAAA,IACIH;AAAA,IACA,CAACI,MAAM;AACH,MAAAA,EAAE,eAAe,GAEjBC,EAA4BZ,GAAQ;AAAA,QAChC,SAAAE;AAAA,MAAA,CACH;AAAA,IACL;AAAA,IACA;AAAA,MACI,yBAAyB;AAAA,IAC7B;AAAA,IACA,CAACA,CAAO;AAAA,EAAA;AAGZ,QAAM,EAAE,QAAAW,GAAQ,OAAAC,GAAO,UAAAC,EAAA,IAAaC,EAAyB;AAAA,IACzD,MAAMV,KAAQF,MAAS;AAAA,IACvB,uBAAuBa;AAAA,IACvB,sBAAsB;AAAA,IACtB,GAAGnB;AAAA,EAAA,CACN;AAGD,SAAAoB,EAAU,MAAM;AACZ,IAAIZ,KACOO,KAEXM,EAAsB,QAAQb,CAAI;AAAA,EAAA,GACnC,CAACA,GAAMO,CAAM,CAAC,GAEOO,KAEjB;AAAA,IACH,OAAO;AAAA,MACH,GAAGN;AAAA,MACH,QAAQ;AAAA,IACZ;AAAA,IACA,GAAGf;AAAA,IACH,KAAKsB,EAAmCtB,EAAM,KAAKgB,CAAQ;AAAA,EAAA;AAEnE;"}