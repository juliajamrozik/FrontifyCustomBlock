import { isCollapsed as i, getAboveNode as a, getPluginType as l, isStartPoint as g, getPreviousNodeEndPoint as x, isEndPoint as P, getNextNodeStartPoint as m, select as u, insertNodes as E, withRemoveEmptyNodes as h, mockPlugin as r } from "@udecode/plate";
import { Path as w } from "slate";
import { ELEMENT_BUTTON as p } from "./createButtonPlugin.es.js";
const B = (t, { type: N }) => {
  const { apply: f, normalizeNode: y } = t;
  return t.apply = (s) => {
    if (s.type !== "set_selection") {
      f(s);
      return;
    }
    const n = s.newProperties;
    if (!(n != null && n.focus) || !n.anchor || !i(n)) {
      f(s);
      return;
    }
    const c = a(t, {
      at: n,
      match: { type: l(t, p) }
    });
    if (c) {
      const [, o] = c;
      let e;
      g(t, n.focus, o) && (e = x(t, o)), P(t, n.focus, o) && (e = m(t, o)), e && (s.newProperties = {
        anchor: e,
        focus: e
      });
    }
    f(s);
  }, t.normalizeNode = ([s, n]) => {
    if (s.type === l(t, p)) {
      const c = t.selection;
      if (c && i(c) && P(t, c.focus, n)) {
        const o = m(t, n);
        if (o)
          u(t, o);
        else {
          const e = w.next(n);
          E(t, { text: "" }, { at: e }), u(t, e);
        }
      }
    }
    y([s, n]);
  }, h(
    t,
    r({
      options: { types: N }
    })
  );
};
export {
  B as withButton
};
//# sourceMappingURL=withButton.es.js.map
