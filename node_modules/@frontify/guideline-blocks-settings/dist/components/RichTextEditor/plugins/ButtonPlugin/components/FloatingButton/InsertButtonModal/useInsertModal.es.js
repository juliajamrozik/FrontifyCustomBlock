import { useEffect as S, useReducer as b } from "react";
import { useEditorRef as h, getPluginOptions as E, useHotkeys as g } from "@udecode/plate";
import { floatingButtonSelectors as u, floatingButtonActions as a } from "../floatingButtonStore.es.js";
import { ELEMENT_BUTTON as B } from "../../../createButtonPlugin.es.js";
import { submitFloatingButton as U } from "../../../transforms/submitFloatingButton.es.js";
import { getButtonStyle as x } from "../../../utils/getButtonStyle.es.js";
import { CheckboxState as r } from "@frontify/fondue";
import { isValidUrlOrEmpty as p } from "../../../../LinkPlugin/utils/url.es.js";
import { addHttps as N } from "../../../../../../../helpers/addHttps.es.js";
const k = {
  url: "",
  text: "",
  buttonStyle: "primary",
  newTab: r.Unchecked
}, w = () => {
  const [n, o] = b((e, s) => {
    const { type: c, payload: l } = s;
    switch (c) {
      case "NEW_TAB":
        return {
          ...e,
          newTab: r.Checked
        };
      case "SAME_TAB":
        return {
          ...e,
          newTab: r.Unchecked
        };
      case "URL":
      case "TEXT":
      case "BUTTON_STYLE":
      case "INIT":
        return {
          ...e,
          ...l
        };
      default:
        return e;
    }
  }, k);
  return [n, o];
}, H = () => {
  const n = h(), [o, e] = w();
  S(() => {
    const t = x(n);
    e({
      type: "INIT",
      payload: {
        text: u.text(),
        buttonStyle: t,
        newTab: u.newTab() ? r.Checked : r.Unchecked,
        url: u.url()
      }
    });
  }, [e, n]);
  const s = (t) => {
    e({
      type: "TEXT",
      payload: { text: t }
    });
  }, c = (t) => {
    e({
      type: "BUTTON_STYLE",
      payload: { buttonStyle: t }
    });
  }, l = (t) => {
    e({
      type: "URL",
      payload: { url: t }
    });
  }, d = (t) => {
    e(t ? { type: "NEW_TAB" } : { type: "SAME_TAB" });
  }, m = () => {
    a.hide();
  }, T = (t) => {
    if (!p(o.url) || !i)
      return;
    const f = N(o.url);
    a.text(o.text), a.url(f), a.buttonStyle(o.buttonStyle), a.newTab(o.newTab === r.Checked), U(n) && (t == null || t.preventDefault());
  }, i = o.url !== "" && o.text !== "", { appBridge: y } = E(n, B);
  return g(
    "enter",
    T,
    {
      enableOnFormTags: ["INPUT"]
    },
    []
  ), {
    state: o,
    onTextChange: s,
    onButtonStyleChange: c,
    onUrlChange: l,
    onToggleTab: d,
    onCancel: m,
    onSave: T,
    hasValues: i,
    isValidUrlOrEmpty: p,
    appBridge: y
  };
};
export {
  w as InsertModalState,
  H as useInsertModal
};
//# sourceMappingURL=useInsertModal.es.js.map
