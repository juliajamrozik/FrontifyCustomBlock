{"version":3,"file":"unwrapButton.es.js","sources":["../../../../../../src/components/RichTextEditor/plugins/ButtonPlugin/transforms/unwrapButton.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport {\n    PlateEditor,\n    UnwrapNodesOptions,\n    Value,\n    getAboveNode,\n    getPluginType,\n    isElement,\n    splitNodes,\n    unwrapNodes,\n    withoutNormalizing,\n} from '@udecode/plate';\nimport { ELEMENT_BUTTON } from '../createButtonPlugin';\n\n/**\n * Unwrap button node.\n */\nexport const unwrapButton = <V extends Value>(\n    editor: PlateEditor<V>,\n    options?: UnwrapNodesOptions & {\n        split?: boolean;\n    },\n) => {\n    return withoutNormalizing(editor, () => {\n        if (options?.split) {\n            const buttonAboveAnchor = getAboveNode(editor, {\n                at: editor.selection?.anchor,\n                match: { type: getPluginType(editor, ELEMENT_BUTTON) },\n            });\n\n            // anchor in button\n            if (buttonAboveAnchor) {\n                splitNodes(editor, {\n                    at: editor.selection?.anchor,\n                    match: (n) => isElement(n) && n.type === getPluginType(editor, ELEMENT_BUTTON),\n                });\n                unwrapButton(editor, {\n                    at: editor.selection?.anchor,\n                });\n                return true;\n            }\n            const buttonAboveFocus = getAboveNode(editor, {\n                at: editor.selection?.focus,\n                match: { type: getPluginType(editor, ELEMENT_BUTTON) },\n            });\n\n            // focus in button\n            if (buttonAboveFocus) {\n                splitNodes(editor, {\n                    at: editor.selection?.focus,\n                    match: (n) => isElement(n) && n.type === getPluginType(editor, ELEMENT_BUTTON),\n                });\n                unwrapButton(editor, {\n                    at: editor.selection?.focus,\n                });\n                return true;\n            }\n        }\n\n        unwrapNodes(editor, {\n            match: { type: getPluginType(editor, ELEMENT_BUTTON) },\n            ...options,\n        });\n\n        return;\n    });\n};\n"],"names":["unwrapButton","editor","options","withoutNormalizing","getAboveNode","_a","getPluginType","ELEMENT_BUTTON","splitNodes","_b","n","isElement","_c","_d","_e","_f","unwrapNodes"],"mappings":";;AAkBa,MAAAA,IAAe,CACxBC,GACAC,MAIOC,EAAmBF,GAAQ,MAAM;;AACpC,MAAIC,KAAA,QAAAA,EAAS,OAAO;AAOhB,QAN0BE,EAAaH,GAAQ;AAAA,MAC3C,KAAII,IAAAJ,EAAO,cAAP,gBAAAI,EAAkB;AAAA,MACtB,OAAO,EAAE,MAAMC,EAAcL,GAAQM,CAAc,EAAE;AAAA,IAAA,CACxD;AAIG,aAAAC,EAAWP,GAAQ;AAAA,QACf,KAAIQ,IAAAR,EAAO,cAAP,gBAAAQ,EAAkB;AAAA,QACtB,OAAO,CAACC,MAAMC,EAAUD,CAAC,KAAKA,EAAE,SAASJ,EAAcL,GAAQM,CAAc;AAAA,MAAA,CAChF,GACDP,EAAaC,GAAQ;AAAA,QACjB,KAAIW,IAAAX,EAAO,cAAP,gBAAAW,EAAkB;AAAA,MAAA,CACzB,GACM;AAQX,QANyBR,EAAaH,GAAQ;AAAA,MAC1C,KAAIY,IAAAZ,EAAO,cAAP,gBAAAY,EAAkB;AAAA,MACtB,OAAO,EAAE,MAAMP,EAAcL,GAAQM,CAAc,EAAE;AAAA,IAAA,CACxD;AAIG,aAAAC,EAAWP,GAAQ;AAAA,QACf,KAAIa,IAAAb,EAAO,cAAP,gBAAAa,EAAkB;AAAA,QACtB,OAAO,CAACJ,MAAMC,EAAUD,CAAC,KAAKA,EAAE,SAASJ,EAAcL,GAAQM,CAAc;AAAA,MAAA,CAChF,GACDP,EAAaC,GAAQ;AAAA,QACjB,KAAIc,IAAAd,EAAO,cAAP,gBAAAc,EAAkB;AAAA,MAAA,CACzB,GACM;AAAA,EAEf;AAEA,EAAAC,EAAYf,GAAQ;AAAA,IAChB,OAAO,EAAE,MAAMK,EAAcL,GAAQM,CAAc,EAAE;AAAA,IACrD,GAAGL;AAAA,EAAA,CACN;AAED,CACH;"}