{"version":3,"file":"createButtonPlugin.es.js","sources":["../../../../../src/components/RichTextEditor/plugins/ButtonPlugin/createButtonPlugin.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { AppBridgeBlock } from '@frontify/app-bridge';\nimport { Plugin, PluginProps } from '@frontify/fondue';\nimport { RangeBeforeOptions, createPluginFactory } from '@udecode/plate';\nimport type { CSSProperties } from 'react';\nimport { isValidUrl } from '../LinkPlugin/utils/url';\nimport { ButtonMarkupElement } from './ButtonMarkupElement';\nimport { ButtonButton } from './components/ButtonButton';\nimport { CustomFloatingButton } from './components/FloatingButton/CustomFloatingButton';\nimport { BlockButtonStyles } from './utils';\nimport { withButton } from './withButton';\n\nexport const ELEMENT_BUTTON = 'button';\nexport const BUTTON_PLUGIN = 'button-plugin';\n\n// eslint-disable-next-line\nexport interface ButtonPlugin {\n    forceSubmit?: boolean;\n\n    /**\n     * Allow custom config for rangeBeforeOptions.\n     * @example default\n     * {\n     *   matchString: ' ',\n     *   skipInvalid: true,\n     *   afterMatch: true,\n     * }\n     */\n    rangeBeforeOptions?: RangeBeforeOptions;\n\n    /**\n     * Hotkeys to trigger floating button.\n     * @default 'command+k, ctrl+k'\n     */\n    triggerFloatingButtonHotkeys: string;\n\n    /**\n     * Callback to validate an url.\n     * @default isUrl\n     */\n    isUrl: (text: string) => boolean;\n\n    /**\n     * Callback to optionally get the href for a url\n     * @returns href: an optional link to be used that is different from the text content (example https://google.com for google.com)\n     */\n    getUrlHref?: (url: string) => string | undefined;\n\n    /**\n     * On keyboard shortcut or toolbar mousedown, get the link url by calling this promise. The\n     * default behavior is to use the browser's native `prompt`.\n     */\n    getLinkUrl?: (prevUrl: string | null) => Promise<string | null>;\n}\n\n/**\n * Enables support for hyperlinks.\n */\nexport const createButtonPlugin = (appBridge: AppBridgeBlock) =>\n    createPluginFactory({\n        key: ELEMENT_BUTTON,\n        isElement: true,\n        isInline: true,\n        props: ({ element }) => ({\n            nodeProps: { href: element?.url, target: element?.target },\n        }),\n        withOverrides: withButton,\n        renderAfterEditable: CustomFloatingButton,\n        options: {\n            isUrl: isValidUrl,\n            rangeBeforeOptions: {\n                matchString: ' ',\n                skipInvalid: true,\n                afterMatch: true,\n            },\n            triggerFloatingButtonHotkeys: 'command+shift+k, ctrl+shift+k',\n            appBridge,\n        },\n        then: (editor, { type }) => ({\n            deserializeHtml: {\n                rules: [\n                    {\n                        validNodeName: 'A',\n                        validClassName: 'btn',\n                    },\n                ],\n                getNode: (el) => ({\n                    type,\n                    url: el.getAttribute('href'),\n                    target: el.getAttribute('target') || '_blank',\n                }),\n            },\n        }),\n    })();\n\nexport type ButtonPluginProps = Omit<PluginProps, 'styles'> & {\n    styles?: Record<string, CSSProperties & { hover?: CSSProperties }>;\n} & { appBridge: AppBridgeBlock };\n\n// eslint-disable-next-line\nexport class ButtonPlugin extends Plugin {\n    public styles: CSSProperties = {};\n    private appBridge: AppBridgeBlock;\n    constructor({ styles = BlockButtonStyles, ...props }: ButtonPluginProps) {\n        super(BUTTON_PLUGIN, {\n            button: ButtonButton,\n            markupElement: new ButtonMarkupElement(),\n            ...props,\n        });\n        this.styles = styles;\n        this.appBridge = props?.appBridge as AppBridgeBlock;\n    }\n\n    plugins() {\n        return [createButtonPlugin(this.appBridge)];\n    }\n}\n"],"names":["ELEMENT_BUTTON","BUTTON_PLUGIN","createButtonPlugin","appBridge","createPluginFactory","element","withButton","CustomFloatingButton","isValidUrl","editor","type","el","ButtonPlugin","Plugin","styles","BlockButtonStyles","props","ButtonButton","ButtonMarkupElement"],"mappings":";;;;;;;;AAaO,MAAMA,IAAiB,UACjBC,IAAgB,iBA6ChBC,IAAqB,CAACC,MAC/BC,EAAoB;AAAA,EAChB,KAAKJ;AAAA,EACL,WAAW;AAAA,EACX,UAAU;AAAA,EACV,OAAO,CAAC,EAAE,SAAAK,SAAe;AAAA,IACrB,WAAW,EAAE,MAAMA,KAAA,gBAAAA,EAAS,KAAK,QAAQA,KAAA,gBAAAA,EAAS,OAAO;AAAA,EAAA;AAAA,EAE7D,eAAeC;AAAA,EACf,qBAAqBC;AAAA,EACrB,SAAS;AAAA,IACL,OAAOC;AAAA,IACP,oBAAoB;AAAA,MAChB,aAAa;AAAA,MACb,aAAa;AAAA,MACb,YAAY;AAAA,IAChB;AAAA,IACA,8BAA8B;AAAA,IAC9B,WAAAL;AAAA,EACJ;AAAA,EACA,MAAM,CAACM,GAAQ,EAAE,MAAAC,SAAY;AAAA,IACzB,iBAAiB;AAAA,MACb,OAAO;AAAA,QACH;AAAA,UACI,eAAe;AAAA,UACf,gBAAgB;AAAA,QACpB;AAAA,MACJ;AAAA,MACA,SAAS,CAACC,OAAQ;AAAA,QACd,MAAAD;AAAA,QACA,KAAKC,EAAG,aAAa,MAAM;AAAA,QAC3B,QAAQA,EAAG,aAAa,QAAQ,KAAK;AAAA,MAAA;AAAA,IAE7C;AAAA,EAAA;AAER,CAAC,EAAE;AAOA,MAAMC,UAAqBC,EAAO;AAAA,EAGrC,YAAY,EAAE,QAAAC,IAASC,GAAmB,GAAGC,KAA4B;AACrE,UAAMf,GAAe;AAAA,MACjB,QAAQgB;AAAA,MACR,eAAe,IAAIC,EAAoB;AAAA,MACvC,GAAGF;AAAA,IAAA,CACN,GAPL,KAAO,SAAwB,IAQ3B,KAAK,SAASF,GACd,KAAK,YAAYE,KAAA,gBAAAA,EAAO;AAAA,EAC5B;AAAA,EAEA,UAAU;AACN,WAAO,CAACd,EAAmB,KAAK,SAAS,CAAC;AAAA,EAC9C;AACJ;"}