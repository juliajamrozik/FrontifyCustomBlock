{"version":3,"file":"useFloatingButtonEdit.es.js","sources":["../../../../../../../src/components/RichTextEditor/plugins/ButtonPlugin/components/FloatingButton/useFloatingButtonEdit.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport {\n    HTMLPropsAs,\n    getAboveNode,\n    getDefaultBoundingClientRect,\n    getEndPoint,\n    getPluginOptions,\n    getPluginType,\n    getRangeBoundingClientRect,\n    getStartPoint,\n    someNode,\n    useComposedRef,\n    useEditorRef,\n    useHotkeys,\n    usePlateSelectors,\n} from '@udecode/plate';\nimport { useCallback, useEffect } from 'react';\nimport { ButtonPlugin, ELEMENT_BUTTON } from '../../createButtonPlugin';\nimport { getUrlFromEditor } from '../../utils';\nimport { triggerFloatingButtonEdit } from '../../utils/triggerFloatingButtonEdit';\nimport {\n    FloatingButtonProps,\n    floatingButtonActions,\n    floatingButtonSelectors,\n    useFloatingButtonEnter,\n    useFloatingButtonEscape,\n    useFloatingButtonSelectors,\n    useVirtualFloatingButton,\n} from '.';\n\nexport const useFloatingButtonEdit = ({ floatingOptions, ...props }: FloatingButtonProps): HTMLPropsAs<'div'> => {\n    const editor = useEditorRef();\n    const keyEditor = usePlateSelectors(editor.id).keyEditor();\n    const mode = useFloatingButtonSelectors().mode();\n    const open = useFloatingButtonSelectors().isOpen(editor.id);\n\n    const { triggerFloatingButtonHotkeys } = getPluginOptions<ButtonPlugin>(editor, ELEMENT_BUTTON);\n\n    const getBoundingClientRect = useCallback(() => {\n        const entry = getAboveNode(editor, {\n            match: { type: getPluginType(editor, ELEMENT_BUTTON) },\n        });\n\n        if (entry) {\n            const [, path] = entry;\n            return getRangeBoundingClientRect(editor, {\n                anchor: getStartPoint(editor, path),\n                focus: getEndPoint(editor, path),\n            });\n        }\n\n        return getDefaultBoundingClientRect();\n    }, [editor]);\n\n    const isOpen = open && mode === 'edit';\n\n    const { update, style, floating } = useVirtualFloatingButton({\n        open: isOpen,\n        getBoundingClientRect,\n        ...floatingOptions,\n    });\n\n    useEffect(() => {\n        const url = getUrlFromEditor(editor);\n        if (url) {\n            floatingButtonActions.url(url);\n        }\n\n        if (\n            editor.selection &&\n            someNode(editor, {\n                match: { type: getPluginType(editor, ELEMENT_BUTTON) },\n            })\n        ) {\n            floatingButtonActions.show('edit', editor.id);\n            update();\n            return;\n        }\n\n        if (floatingButtonSelectors.mode() === 'edit') {\n            floatingButtonActions.hide();\n        }\n    }, [editor, keyEditor, update]);\n\n    useHotkeys(\n        triggerFloatingButtonHotkeys,\n        (e) => {\n            e.preventDefault();\n\n            if (floatingButtonSelectors.mode() === 'edit') {\n                triggerFloatingButtonEdit(editor);\n            }\n        },\n        {\n            enableOnContentEditable: true,\n        },\n        [],\n    );\n\n    useFloatingButtonEnter();\n\n    useFloatingButtonEscape();\n\n    return {\n        style: {\n            ...style,\n            zIndex: 1000,\n        },\n        ...props,\n        ref: useComposedRef<HTMLElement | null>(props.ref, floating),\n    };\n};\n"],"names":["useFloatingButtonEdit","floatingOptions","props","editor","useEditorRef","keyEditor","usePlateSelectors","mode","useFloatingButtonSelectors","open","triggerFloatingButtonHotkeys","getPluginOptions","ELEMENT_BUTTON","getBoundingClientRect","useCallback","entry","getAboveNode","getPluginType","path","getRangeBoundingClientRect","getStartPoint","getEndPoint","getDefaultBoundingClientRect","isOpen","update","style","floating","useVirtualFloatingButton","useEffect","url","getUrlFromEditor","floatingButtonActions","someNode","floatingButtonSelectors","useHotkeys","triggerFloatingButtonEdit","useFloatingButtonEnter","useFloatingButtonEscape","useComposedRef"],"mappings":";;;;;;;;;AA+BO,MAAMA,IAAwB,CAAC,EAAE,iBAAAC,GAAiB,GAAGC,QAAqD;AAC7G,QAAMC,IAASC,KACTC,IAAYC,EAAkBH,EAAO,EAAE,EAAE,UAAU,GACnDI,IAAOC,IAA6B,QACpCC,IAAOD,EAA6B,EAAA,OAAOL,EAAO,EAAE,GAEpD,EAAE,8BAAAO,EAAiC,IAAAC,EAA+BR,GAAQS,CAAc,GAExFC,IAAwBC,EAAY,MAAM;AACtC,UAAAC,IAAQC,EAAab,GAAQ;AAAA,MAC/B,OAAO,EAAE,MAAMc,EAAcd,GAAQS,CAAc,EAAE;AAAA,IAAA,CACxD;AAED,QAAIG,GAAO;AACD,YAAA,CAAG,EAAAG,CAAI,IAAIH;AACjB,aAAOI,EAA2BhB,GAAQ;AAAA,QACtC,QAAQiB,EAAcjB,GAAQe,CAAI;AAAA,QAClC,OAAOG,EAAYlB,GAAQe,CAAI;AAAA,MAAA,CAClC;AAAA,IACL;AAEA,WAAOI,EAA6B;AAAA,EAAA,GACrC,CAACnB,CAAM,CAAC,GAELoB,IAASd,KAAQF,MAAS,QAE1B,EAAE,QAAAiB,GAAQ,OAAAC,GAAO,UAAAC,EAAA,IAAaC,EAAyB;AAAA,IACzD,MAAMJ;AAAA,IACN,uBAAAV;AAAA,IACA,GAAGZ;AAAA,EAAA,CACN;AAED,SAAA2B,EAAU,MAAM;AACN,UAAAC,IAAMC,EAAiB3B,CAAM;AAM/B,QALA0B,KACAE,EAAsB,IAAIF,CAAG,GAI7B1B,EAAO,aACP6B,EAAS7B,GAAQ;AAAA,MACb,OAAO,EAAE,MAAMc,EAAcd,GAAQS,CAAc,EAAE;AAAA,IAAA,CACxD,GACH;AACwB,MAAAmB,EAAA,KAAK,QAAQ5B,EAAO,EAAE,GACrCqB;AACP;AAAA,IACJ;AAEI,IAAAS,EAAwB,KAAK,MAAM,UACnCF,EAAsB,KAAK;AAAA,EAEhC,GAAA,CAAC5B,GAAQE,GAAWmB,CAAM,CAAC,GAE9BU;AAAA,IACIxB;AAAA,IACA,CAAC,MAAM;AACH,QAAE,eAAe,GAEbuB,EAAwB,KAAK,MAAM,UACnCE,EAA0BhC,CAAM;AAAA,IAExC;AAAA,IACA;AAAA,MACI,yBAAyB;AAAA,IAC7B;AAAA,IACA,CAAC;AAAA,EAAA,GAGkBiC,KAECC,KAEjB;AAAA,IACH,OAAO;AAAA,MACH,GAAGZ;AAAA,MACH,QAAQ;AAAA,IACZ;AAAA,IACA,GAAGvB;AAAA,IACH,KAAKoC,EAAmCpC,EAAM,KAAKwB,CAAQ;AAAA,EAAA;AAEnE;"}