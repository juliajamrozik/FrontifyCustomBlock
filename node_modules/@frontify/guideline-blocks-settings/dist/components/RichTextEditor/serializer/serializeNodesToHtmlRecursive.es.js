import { UL_CLASSES as u, getOrderedListClasses as N, LI_CLASSNAMES as p, getLiStyles as f, getLicElementClassNames as L, ELEMENT_CHECK_ITEM as T, alignmentClassnames as C, merge as $, OL_STYLES as M } from "@frontify/fondue";
import { isText as _, ELEMENT_UL as d, ELEMENT_OL as n, ELEMENT_LI as g, ELEMENT_LIC as k, ELEMENT_LINK as y, ELEMENT_MENTION as S } from "@udecode/plate";
import { serializeLeafToHtml as h } from "./utlis/serializeLeafToHtml.es.js";
import { reactCssPropsToCss as E } from "./utlis/reactCssPropsToCss.es.js";
import { buttonNode as b } from "./nodes/button.es.js";
import { linkNode as I } from "./nodes/link.es.js";
import { defaultNode as O } from "./nodes/default.es.js";
import { checkItemNode as A } from "./nodes/checkItemNode.es.js";
import { mentionHtmlNode as H } from "./nodes/mentionHtmlNode.es.js";
import { ELEMENT_BUTTON as v } from "../plugins/ButtonPlugin/createButtonPlugin.es.js";
const i = (t, e) => t.reduce((r, s) => (s.type === e && r++, s.children ? r + i(s.children, e) : r), 0), w = (t, e, { mappedMentionable: r, nestingCount: s = {} }) => {
  if (_(t))
    return h(t);
  const o = s[t.type] || i([t], t.type);
  let l = "";
  for (const m of t.children)
    l += w(m, e, {
      nestingCount: {
        ...s,
        [m.type]: o
      },
      mappedMentionable: r
    });
  const a = x[t.type];
  return typeof a < "u" ? a({
    classNames: c(t.breakAfterColumn, t.align),
    children: l,
    rootNestingCount: o,
    node: t,
    mappedMentionable: r,
    styles: e
  }) : O(
    t,
    l,
    e[t.type],
    c(t.breakAfterColumn, t.align)
  );
}, x = {
  [d]: (t) => `<ul dir="auto" class="${u} ${t.classNames}">${t.children}</ul>`,
  [n]: ({ classNames: t, children: e, node: r, rootNestingCount: s }) => {
    const o = Math.max(s - i([r], n), 0);
    return `<ol dir="auto" class="${N(o)} ${t}" style="${E(
      M
    )}">${e}</ol>`;
  },
  [g]: ({ classNames: t, children: e, node: r, styles: s }) => `<li dir="auto" class="${t} ${p}" style="${E(
    f(r, s)
  )}">${e}</li>`,
  [k]: ({ classNames: t, children: e, node: r }) => `<p dir="auto" class="${t} ${L(r)}"><span>${e}</span></p>`,
  [y]: ({ node: t, children: e, classNames: r, styles: s }) => I(t, e, r, s),
  [v]: ({ node: t, children: e, classNames: r, styles: s }) => b(t, e, r, s),
  [T]: ({ node: t, children: e, classNames: r, styles: s }) => A(t, e, r, s),
  [S]: ({ node: t, mappedMentionable: e }) => H(t, { mentionable: e })
}, c = (t, e) => {
  const r = "tw-break-words", s = t === "active" ? "tw-break-after-column tw-break-inside-avoid-column" : "", o = e ? C[e] : "";
  return $([o, r, s]);
};
export {
  w as serializeNodeToHtmlRecursive
};
//# sourceMappingURL=serializeNodesToHtmlRecursive.es.js.map
