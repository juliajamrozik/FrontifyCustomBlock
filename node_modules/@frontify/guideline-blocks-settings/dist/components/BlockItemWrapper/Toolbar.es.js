import { jsx as e, jsxs as p } from "react/jsx-runtime";
import { Tooltip as l, TooltipPosition as n, Flyout as h, IconDotsHorizontal16 as m, ActionMenu as u, MenuItemContentSize as f } from "@frontify/fondue";
import { DEFAULT_DRAGGING_TOOLTIP as v, DEFAULT_DRAG_TOOLTIP as x } from "./constants.es.js";
import { joinClassNames as g } from "../../utilities/react/joinClassNames.es.js";
const A = ({
  items: w,
  flyoutItems: s,
  isFlyoutOpen: c,
  setIsFlyoutOpen: a,
  isDragging: r,
  isFlyoutDisabled: d
}) => /* @__PURE__ */ e("div", { "data-test-id": "block-item-wrapper-toolbar", className: "tw-flex tw-justify-end", children: /* @__PURE__ */ p("div", { className: "tw-bg-white tw-text-box-selected-inverse tw-pointer-events-auto tw-flex tw-flex-shrink-0 tw-gap-[2px] tw-px-[1px] tw-spacing tw-items-center tw-h-7 tw-self-start tw-border tw-border-box-selected-inverse tw-rounded", children: [
  w.map(
    (t, o) => "draggableProps" in t ? /* @__PURE__ */ e(
      l,
      {
        withArrow: !0,
        hoverDelay: 0,
        enterDelay: 300,
        open: r,
        position: n.Top,
        content: /* @__PURE__ */ e("div", { children: r ? v : t.tooltip ?? x }),
        triggerElement: /* @__PURE__ */ e(
          "button",
          {
            ref: t.setActivatorNodeRef,
            "data-test-id": "block-item-wrapper-toolbar-btn",
            ...t.draggableProps,
            className: g([
              "tw-bg-base tw-inline-flex tw-items-center tw-justify-center tw-w-6 tw-h-6 tw-rounded-sm",
              r ? "tw-cursor-grabbing tw-bg-box-selected-pressed" : "tw-cursor-grab hover:tw-bg-box-selected-hover"
            ]),
            children: t.icon
          }
        )
      },
      o
    ) : /* @__PURE__ */ e(
      l,
      {
        withArrow: !0,
        enterDelay: 300,
        hoverDelay: 0,
        disabled: r,
        position: n.Top,
        content: /* @__PURE__ */ e("div", { children: t.tooltip ?? "" }),
        triggerElement: /* @__PURE__ */ e(
          "button",
          {
            "data-test-id": "block-item-wrapper-toolbar-btn",
            onClick: t.onClick,
            className: "tw-bg-base hover:tw-bg-box-selected-hover active:tw-bg-box-selected-pressed tw-cursor-pointer tw-inline-flex tw-items-center tw-justify-center tw-w-6 tw-h-6 tw-rounded-sm",
            children: t.icon
          }
        )
      },
      o
    )
  ),
  s.length > 0 && /* @__PURE__ */ e("div", { className: "tw-flex tw-flex-shrink-0 tw-flex-1 tw-h-6", children: /* @__PURE__ */ e(
    h,
    {
      isOpen: c && !r,
      isTriggerDisabled: d,
      legacyFooter: !1,
      fitContent: !0,
      hug: !1,
      onOpenChange: a,
      trigger: /* @__PURE__ */ e(
        l,
        {
          withArrow: !0,
          hoverDelay: 0,
          enterDelay: 300,
          disabled: r,
          position: n.Top,
          content: /* @__PURE__ */ e("div", { children: "Options" }),
          triggerElement: /* @__PURE__ */ e(
            "div",
            {
              "data-test-id": "block-item-wrapper-toolbar-flyout",
              className: "tw-bg-base hover:tw-bg-box-selected-hover active:tw-bg-box-selected-pressed tw-cursor-pointer tw-inline-flex  tw-items-center tw-justify-center tw-w-6 tw-h-6 tw-rounded-sm",
              children: /* @__PURE__ */ e(m, {})
            }
          )
        }
      ),
      children: /* @__PURE__ */ e(
        u,
        {
          menuBlocks: s.map((t, o) => ({
            id: o.toString(),
            menuItems: t.map((i, b) => ({
              id: o.toString() + b.toString(),
              size: f.XSmall,
              title: i.title,
              style: i.style,
              onClick: () => {
                a(!1), i.onClick();
              },
              initialValue: !0,
              decorator: /* @__PURE__ */ e("div", { className: "tw-mr-2", children: i.icon })
            }))
          }))
        }
      )
    }
  ) })
] }) });
export {
  A as Toolbar
};
//# sourceMappingURL=Toolbar.es.js.map
