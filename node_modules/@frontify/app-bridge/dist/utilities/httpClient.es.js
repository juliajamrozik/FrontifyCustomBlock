import { HttpClientError as c } from "../errors/HttpClientError.es.js";
const n = async (o, t, e, i) => {
  const a = {
    method: o,
    headers: {
      "Content-Type": "application/json; charset=utf-8",
      ...i
    },
    ...e && { body: JSON.stringify(e) }
  }, s = await window.fetch(`${window.location.origin}${t}`, a), r = await s.json();
  if (!s.ok)
    throw new c(r, s.status, r.error);
  return {
    result: r
  };
};
class p {
  static getCsrfToken() {
    const t = document.getElementsByName("x-csrf-token");
    if (t.length > 0)
      return t[0].content;
  }
  static async get(t) {
    return n("GET", t, "", { "X-CSRF-TOKEN": this.getCsrfToken() });
  }
  static async post(t, e) {
    return n("POST", t, e, { "X-CSRF-TOKEN": this.getCsrfToken() });
  }
  static async put(t, e) {
    return n("PUT", t, e, { "X-CSRF-TOKEN": this.getCsrfToken() });
  }
  static async patch(t, e) {
    return n("PATCH", t, e, { "X-CSRF-TOKEN": this.getCsrfToken() });
  }
  static async delete(t, e) {
    return n("DELETE", t, e, { "X-CSRF-TOKEN": this.getCsrfToken() });
  }
}
export {
  p as HttpClient
};
//# sourceMappingURL=httpClient.es.js.map
