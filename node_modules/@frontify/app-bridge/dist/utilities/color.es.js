const g = (t) => {
  const a = (e) => {
    const n = e.trim();
    return n.startsWith("rgba(") || n.startsWith("rgb(");
  }, s = t.split("(")[1].split(")")[0].split(","), i = s.slice(0, 2).every((e) => e.trim() === parseInt(e).toString());
  if (!a(t) || !i)
    throw new Error(`String is not a valid color (passed: "${t}").`);
  const r = s.map((e) => parseFloat(e));
  return {
    red: r[0],
    green: r[1],
    blue: r[2],
    alpha: (r == null ? void 0 : r[3]) || 1
  };
}, b = (t) => "alpha" in t ? `rgba(${t.red}, ${t.green}, ${t.blue}, ${t.alpha})` : `rgb(${t.red}, ${t.green}, ${t.blue})`;
export {
  b as rgbObjectToRgbString,
  g as rgbStringToRgbObject
};
//# sourceMappingURL=color.es.js.map
