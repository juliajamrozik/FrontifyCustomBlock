import a from "../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/transform.es.js";
import p from "../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/snakeCase.es.js";
import m from "../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/camelCase.es.js";
const O = (e, r) => {
  if (!e || !r || typeof e != "object" || typeof r != "object")
    return !1;
  const n = Object.keys(e), s = Object.keys(r);
  if (n.length !== s.length)
    return !1;
  for (const t of n)
    if (typeof e[t] == "object" && !O(e[t], r[t]) || typeof e[t] != "object" && e[t] !== r[t])
      return !1;
  return !0;
}, c = (e) => e && typeof e == "object" && !Array.isArray(e), f = (e, ...r) => {
  if (r.length === 0)
    return e;
  const n = r.shift();
  if (c(e) && c(n))
    for (const s in n)
      c(n[s]) ? (e[s] || Object.assign(e, { [s]: {} }), f(e[s], n[s])) : Object.assign(e, { [s]: n[s] });
  return f(e, ...r);
}, l = (e, r) => {
  const n = {
    camel: m,
    snake: p
  };
  return a(e, (s, t, o, i) => {
    const y = Array.isArray(i) ? o : n[r](o);
    s[y] = c(t) || Array.isArray(t) ? l(t, r) : t;
  });
};
export {
  O as compareObjects,
  l as convertObjectCase,
  c as isObject,
  f as mergeDeep
};
//# sourceMappingURL=object.es.js.map
