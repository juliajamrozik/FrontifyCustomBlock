import { useCallback as o } from "react";
const J = (n) => {
  const m = o(
    async (e) => {
      const t = await n.createLink(e);
      return window.emitter.emit("AppBridge:GuidelineDocument:Action", {
        document: { ...t, ...e.documentGroupId && { documentGroupId: e.documentGroupId } },
        action: "add"
      }), e.documentGroupId && window.emitter.emit("AppBridge:GuidelineDocumentGroup:DocumentAction", {
        document: { id: t.id, documentGroupId: e.documentGroupId },
        action: "add"
      }), t;
    },
    [n]
  ), r = o(
    async (e) => {
      const t = await n.updateLink(e);
      return window.emitter.emit("AppBridge:GuidelineDocument:Action", {
        document: { ...t, ...e.documentGroupId && { documentGroupId: e.documentGroupId } },
        action: "update"
      }), t;
    },
    [n]
  ), w = o(
    async (e) => {
      await n.deleteLink(e.id), window.emitter.emit("AppBridge:GuidelineDocument:Action", {
        document: e,
        action: "delete"
      }), e.documentGroupId && window.emitter.emit("AppBridge:GuidelineDocumentGroup:DocumentAction", {
        document: { ...e, documentGroupId: e.documentGroupId },
        action: "delete"
      });
    },
    [n]
  ), s = o(
    async (e) => {
      const t = await n.createLibrary(e);
      return window.emitter.emit("AppBridge:GuidelineDocument:Action", {
        document: {
          ...t,
          ...e.documentGroupId && { documentGroupId: e.documentGroupId }
        },
        action: "add"
      }), e.documentGroupId && window.emitter.emit("AppBridge:GuidelineDocumentGroup:DocumentAction", {
        document: { id: t.id, documentGroupId: e.documentGroupId },
        action: "add"
      }), t;
    },
    [n]
  ), l = o(
    async (e) => {
      const t = await n.updateLibrary(e);
      return window.emitter.emit("AppBridge:GuidelineDocument:Action", {
        document: {
          ...t,
          ...e.documentGroupId && { documentGroupId: e.documentGroupId }
        },
        action: "update"
      }), t;
    },
    [n]
  ), G = o(
    async (e) => {
      await n.deleteLibrary(e.id), window.emitter.emit("AppBridge:GuidelineDocument:Action", {
        document: e,
        action: "delete"
      }), e.documentGroupId && window.emitter.emit("AppBridge:GuidelineDocumentGroup:DocumentAction", {
        document: { ...e, documentGroupId: e.documentGroupId },
        action: "delete"
      });
    },
    [n]
  ), D = o(
    async (e) => {
      const t = await n.createStandardDocument(e);
      return window.emitter.emit("AppBridge:GuidelineDocument:Action", {
        document: {
          ...t,
          ...e.documentGroupId && { documentGroupId: e.documentGroupId }
        },
        action: "add"
      }), e.documentGroupId && window.emitter.emit("AppBridge:GuidelineDocumentGroup:DocumentAction", {
        document: { id: t.id, documentGroupId: e.documentGroupId },
        action: "add"
      }), t;
    },
    [n]
  ), A = o(
    async (e) => {
      const t = await n.updateStandardDocument(e);
      return window.emitter.emit("AppBridge:GuidelineDocument:Action", {
        document: {
          ...t,
          ...e.documentGroupId && { documentGroupId: e.documentGroupId }
        },
        action: "update"
      }), t;
    },
    [n]
  ), p = o(
    async (e) => {
      await n.deleteStandardDocument(e.id), window.emitter.emit("AppBridge:GuidelineDocument:Action", {
        document: e,
        action: "delete"
      }), e.documentGroupId && window.emitter.emit("AppBridge:GuidelineDocumentGroup:DocumentAction", {
        document: { ...e, documentGroupId: e.documentGroupId },
        action: "delete"
      });
    },
    [n]
  ), y = o(
    async (e) => {
      const t = await n.createDocumentGroup(e);
      return window.emitter.emit("AppBridge:GuidelineDocumentGroup:Action", {
        documentGroup: t,
        action: "add"
      }), t;
    },
    [n]
  ), g = o(
    async (e) => {
      const t = await n.updateDocumentGroup(e);
      window.emitter.emit("AppBridge:GuidelineDocumentGroup:Action", {
        documentGroup: t,
        action: "update"
      });
    },
    [n]
  ), v = o(
    async (e) => {
      await n.deleteDocumentGroup(e.id), window.emitter.emit("AppBridge:GuidelineDocumentGroup:Action", {
        documentGroup: e,
        action: "delete"
      });
    },
    [n]
  ), I = o(
    async (e) => {
      const t = await n.createDocumentPage(e);
      return window.emitter.emit("AppBridge:GuidelineDocumentPage:Action", {
        documentPage: t,
        action: "add"
      }), e.categoryId && window.emitter.emit("AppBridge:GuidelineDocumentCategory:DocumentPageAction", {
        documentPage: {
          id: t.id,
          categoryId: e.categoryId
        },
        action: "add"
      }), t;
    },
    [n]
  ), C = o(
    async (e) => {
      const t = await n.updateDocumentPage(e);
      return window.emitter.emit("AppBridge:GuidelineDocumentPage:Action", {
        documentPage: t,
        action: "update"
      }), t;
    },
    [n]
  ), P = o(
    async (e) => {
      await n.deleteDocumentPage(e.id), window.emitter.emit("AppBridge:GuidelineDocumentPage:Action", {
        documentPage: { ...e, categoryId: e.categoryId ?? null },
        action: "delete"
      }), e.categoryId ? window.emitter.emit("AppBridge:GuidelineDocumentCategory:DocumentPageAction", {
        documentPage: { ...e, categoryId: e.categoryId },
        action: "delete"
      }) : window.emitter.emit("AppBridge:GuidelineDocument:DocumentPageAction", {
        documentPage: e,
        action: "delete"
      });
    },
    [n]
  ), L = o(
    async ({ id: e, documentId: t, categoryId: i }) => {
      const c = await n.duplicateDocumentPage(e);
      return window.emitter.emit("AppBridge:GuidelineDocumentPage:Action", {
        documentPage: { ...c, title: c.name, documentId: t, categoryId: i },
        action: "add"
      }), i && window.emitter.emit("AppBridge:GuidelineDocumentCategory:DocumentPageAction", {
        documentPage: { id: c.id, categoryId: i },
        action: "add"
      }), c;
    },
    [n]
  ), f = o(
    async (e) => {
      const t = await n.createDocumentCategory(e);
      return window.emitter.emit("AppBridge:GuidelineDocumentCategory:Action", {
        documentCategory: t,
        action: "add"
      }), window.emitter.emit("AppBridge:GuidelineDocument:DocumentCategoryAction", {
        documentCategory: t,
        action: "add"
      }), t;
    },
    [n]
  ), h = o(
    async (e) => {
      const t = await n.updateDocumentCategory(e);
      window.emitter.emit("AppBridge:GuidelineDocumentCategory:Action", {
        documentCategory: t,
        action: "update"
      });
    },
    [n]
  ), S = o(
    async (e) => {
      await n.deleteDocumentCategory(e.id), window.emitter.emit("AppBridge:GuidelineDocumentCategory:Action", {
        documentCategory: e,
        action: "delete"
      }), window.emitter.emit("AppBridge:GuidelineDocument:DocumentCategoryAction", {
        documentCategory: e,
        action: "delete"
      });
    },
    [n]
  ), T = o(
    async (e) => {
      const t = await n.createCoverPage(e);
      return window.emitter.emit("AppBridge:GuidelineCoverPage:Action", {
        coverPage: t,
        action: "add"
      }), t;
    },
    [n]
  ), _ = o(
    async (e) => {
      const t = await n.updateCoverPage(e);
      return window.emitter.emit("AppBridge:GuidelineCoverPage:Action", {
        coverPage: t,
        action: "update"
      }), t;
    },
    [n]
  ), E = o(
    async (e) => {
      const t = {
        ...e.title && { brandhome_title: e.title },
        ...e.draft !== void 0 && { brandhome_draft: e.draft },
        ...e.hideInNav !== void 0 && { brandhome_hide_in_nav: e.hideInNav }
      }, i = await n.updateLegacyCoverPage(t);
      return window.emitter.emit("AppBridge:GuidelineCoverPage:Action", {
        coverPage: e,
        action: "update"
      }), i;
    },
    [n]
  ), M = o(async () => {
    await n.deleteCoverPage(), window.emitter.emit("AppBridge:GuidelineCoverPage:Action", {
      action: "delete"
    });
  }, [n]), U = o(
    async (e) => {
      const t = await n.updateBrandportalLink(e);
      return t && window.emitter.emit("AppBridge:GuidelineBrandportalLink:Action", {
        brandportalLink: t,
        action: "update"
      }), t;
    },
    [n]
  ), N = o(
    async (e, t, i) => {
      const c = "AppBridge:GuidelineDocument:MoveEvent";
      window.emitter.emit(c, {
        document: e,
        position: t,
        newGroupId: i,
        action: "movePreview"
      });
      const u = await n.moveDocument(e.id, t, i), d = "AppBridge:GuidelineDocument:Action";
      e.documentGroupId === i ? window.emitter.emit(d, {
        document: { ...u, sort: t },
        action: "move"
      }) : (window.emitter.emit(d, {
        document: e,
        action: "delete"
      }), window.emitter.emit(d, {
        document: u,
        action: "add"
      }));
    },
    [n]
  ), b = o(
    async (e, t) => {
      const i = "AppBridge:GuidelineDocumentGroup:MoveEvent";
      window.emitter.emit(i, {
        documentGroup: e,
        position: t,
        action: "movePreview"
      }), await n.moveDocumentGroup(e.id, t), window.emitter.emit("AppBridge:GuidelineDocumentGroup:Action", {
        documentGroup: { ...e, sort: t },
        action: "update"
      });
    },
    [n]
  ), k = o(
    async (e, t, i) => {
      const c = "AppBridge:GuidelineDocumentCategory:MoveEvent";
      window.emitter.emit(c, {
        documentCategory: e,
        documentId: t,
        position: i,
        action: "movePreview"
      }), await n.moveDocumentCategory(e.id, t, i), window.emitter.emit("AppBridge:GuidelineDocumentCategory:Action", {
        documentCategory: { ...e, documentId: t, sort: i },
        action: "update"
      });
    },
    [n]
  ), x = o(
    async (e, t, i, c = null) => {
      const u = "AppBridge:GuidelineDocumentPage:MoveEvent";
      window.emitter.emit(u, {
        documentPage: e,
        documentId: t,
        position: i,
        categoryId: c,
        action: "movePreview"
      });
      const d = await n.moveDocumentPage(
        e.id,
        t,
        i,
        c ?? void 0
      ), a = "AppBridge:GuidelineDocumentPage:Action";
      e.categoryId === c && e.documentId === t ? window.emitter.emit(a, {
        documentPage: { ...d, sort: i ?? d.sort },
        action: "move"
      }) : (window.emitter.emit(a, {
        documentPage: { ...e, categoryId: e.categoryId ?? null },
        action: "delete"
      }), window.emitter.emit(a, {
        documentPage: d,
        action: "add"
      }));
      const z = e.categoryId ? "AppBridge:GuidelineDocumentCategory:DocumentPageAction" : "AppBridge:GuidelineDocument:DocumentPageAction", F = d.categoryId ? "AppBridge:GuidelineDocumentCategory:DocumentPageAction" : "AppBridge:GuidelineDocument:DocumentPageAction";
      window.emitter.emit(z, { documentPage: e, action: "delete" }), window.emitter.emit(F, { documentPage: d, action: "add" });
    },
    [n]
  ), j = o(
    async (e, t) => {
      const i = await n.updateDocumentPageTargets(e, t);
      return window.emitter.emit("AppBridge:GuidelineDocumentPageTargets:Action", {
        payload: { targets: e, pageIds: t },
        action: "update"
      }), i;
    },
    [n]
  ), q = o(
    async (e, t) => {
      const i = await n.updateDocumentTargets(e, t);
      return window.emitter.emit("AppBridge:GuidelineDocumentTargets:Action", {
        payload: { targets: e, documentIds: t },
        action: "update"
      }), i;
    },
    [n]
  );
  return {
    createLink: m,
    updateLink: r,
    deleteLink: w,
    createDocumentPage: I,
    updateDocumentPage: C,
    deleteDocumentPage: P,
    duplicateDocumentPage: L,
    moveDocumentPage: x,
    createLibrary: s,
    updateLibrary: l,
    deleteLibrary: G,
    createDocumentCategory: f,
    updateDocumentCategory: h,
    deleteDocumentCategory: S,
    moveDocumentCategory: k,
    createCoverPage: T,
    updateCoverPage: _,
    deleteCoverPage: M,
    updateLegacyCoverPage: E,
    moveDocumentGroup: b,
    createDocumentGroup: y,
    updateDocumentGroup: g,
    deleteDocumentGroup: v,
    updateBrandportalLink: U,
    createDocument: D,
    updateDocument: A,
    deleteDocument: p,
    moveDocument: N,
    updateDocumentPageTargets: j,
    updateDocumentTargets: q
  };
};
export {
  J as useGuidelineActions
};
//# sourceMappingURL=useGuidelineActions.es.js.map
