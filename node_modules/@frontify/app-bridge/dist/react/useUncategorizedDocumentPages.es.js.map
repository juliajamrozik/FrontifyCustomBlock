{"version":3,"file":"useUncategorizedDocumentPages.es.js","sources":["../../src/react/useUncategorizedDocumentPages.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { produce } from 'immer';\n\nimport type { DocumentPage, EmitterEvents } from '../types';\nimport type { AppBridgeBlock } from '../AppBridgeBlock';\nimport type { AppBridgeTheme } from '../AppBridgeTheme';\n\nimport { DocumentPageTargetEvent } from './useDocumentPageTargets';\n\ntype DocumentPagesMoveEvent = EmitterEvents['AppBridge:GuidelineDocumentPage:MoveEvent'];\n\ntype Options = {\n    /**\n     * Whether it should fetch on mount.\n     */\n    enabled?: boolean;\n};\n\nconst sortDocumentPages = (a: DocumentPage, b: DocumentPage) => (a.sort && b.sort ? a.sort - b.sort : 0);\n\nexport const useUncategorizedDocumentPages = (\n    appBridge: AppBridgeBlock | AppBridgeTheme,\n    documentId: number,\n    options: Options = { enabled: true },\n) => {\n    const [documentPages, setDocumentPages] = useState<Map<number, DocumentPage>>(new Map([]));\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n\n    const refetch = useCallback(async () => {\n        setIsLoading(true);\n        setDocumentPages(await fetchDocumentPagesByDocumentId(appBridge, documentId));\n        setIsLoading(false);\n    }, [appBridge, documentId]);\n\n    useEffect(() => {\n        if (options.enabled) {\n            refetch();\n        }\n    }, [options.enabled, refetch]);\n\n    useEffect(() => {\n        const refetchIfPageExistsInMap = (event: DocumentPageTargetEvent) => {\n            for (const id of event.payload.pageIds) {\n                if (documentPages.has(id)) {\n                    refetch();\n                    break;\n                }\n            }\n        };\n\n        const handleDocumentPageMoveEvent = (event: DocumentPagesMoveEvent) => {\n            if (!documentPages.has(event.documentPage.id) || event.categoryId) {\n                return;\n            }\n\n            setDocumentPages(\n                produce((draft) => {\n                    previewDocumentPagesSort(draft, event.documentPage, event.position);\n                }),\n            );\n        };\n\n        const handler = ({ action, documentPage }: EmitterEvents['AppBridge:GuidelineDocumentPage:Action']) => {\n            if (\n                (action === 'update' && documentPages.has(documentPage.id)) ||\n                (action === 'add' && documentPage.documentId === documentId && !documentPage.categoryId)\n            ) {\n                refetch();\n            } else if ((action === 'delete' || action === 'move') && documentPages.has(documentPage.id)) {\n                setDocumentPages(\n                    produce((draft) => {\n                        if (action === 'move') {\n                            moveDocumentPage(draft, documentPage);\n                        } else if (action === 'delete') {\n                            draft.delete(documentPage.id);\n                        }\n                    }),\n                );\n            }\n        };\n\n        window.emitter.on('AppBridge:GuidelineDocumentPage:Action', handler);\n        window.emitter.on('AppBridge:GuidelineDocumentPageTargets:Action', refetchIfPageExistsInMap);\n        window.emitter.on('AppBridge:GuidelineDocumentPage:MoveEvent', handleDocumentPageMoveEvent);\n\n        return () => {\n            window.emitter.off('AppBridge:GuidelineDocumentPage:Action', handler);\n            window.emitter.off('AppBridge:GuidelineDocumentPageTargets:Action', refetchIfPageExistsInMap);\n            window.emitter.off('AppBridge:GuidelineDocumentPage:MoveEvent', handleDocumentPageMoveEvent);\n        };\n    }, [documentId, refetch, documentPages]);\n\n    return { documentPages: Array.from(documentPages.values()), refetch, isLoading };\n};\n\nconst previewDocumentPagesSort = (\n    documentPages: Map<number, DocumentPage>,\n    documentPage: DocumentPagesMoveEvent['documentPage'],\n    newPosition: DocumentPagesMoveEvent['position'],\n) => {\n    if (!documentPage.sort || !newPosition) {\n        return documentPages;\n    }\n\n    const previousDocumentPage = documentPages.get(documentPage.id);\n    const documentPagesAsArray: DocumentPage[] = [...documentPages.values()].sort(sortDocumentPages);\n\n    documentPages.clear();\n\n    let sort = 1;\n    let isOnLastPosition = true;\n    for (const currentDocumentPage of documentPagesAsArray) {\n        if (currentDocumentPage.id === documentPage.id) {\n            continue;\n        }\n\n        if (previousDocumentPage && sort === newPosition) {\n            documentPages.set(documentPage.id, { ...previousDocumentPage, sort: newPosition });\n            isOnLastPosition = false;\n        }\n\n        documentPages.set(currentDocumentPage.id, {\n            ...currentDocumentPage,\n            sort,\n        });\n\n        sort++;\n    }\n\n    if (previousDocumentPage && isOnLastPosition) {\n        documentPages.set(documentPage.id, { ...previousDocumentPage, sort });\n    }\n\n    return documentPages;\n};\n\nconst moveDocumentPage = (draft: Map<number, DocumentPage>, documentPage: DocumentPage) => {\n    const documentPagesAsArray: DocumentPage[] = [...draft.values()];\n    let isPageOnLastPosition = true;\n\n    draft.clear();\n\n    for (const currentDocumentPage of documentPagesAsArray) {\n        if (currentDocumentPage.id === documentPage.id) {\n            continue;\n        }\n\n        if (draft.size === documentPage.sort - 1) {\n            draft.set(documentPage.id, documentPage);\n            isPageOnLastPosition = false;\n        }\n\n        draft.set(currentDocumentPage.id, currentDocumentPage);\n    }\n\n    if (isPageOnLastPosition) {\n        draft.set(documentPage.id, documentPage);\n    }\n\n    return draft;\n};\n\nconst fetchDocumentPagesByDocumentId = async (appBridge: AppBridgeBlock | AppBridgeTheme, documentId: number) => {\n    const pages = await appBridge.getUncategorizedDocumentPagesByDocumentId(documentId);\n    return new Map([...pages].sort(sortDocumentPages).map((page) => [page.id, page]));\n};\n"],"names":["sortDocumentPages","a","b","useUncategorizedDocumentPages","appBridge","documentId","options","documentPages","setDocumentPages","useState","isLoading","setIsLoading","refetch","useCallback","fetchDocumentPagesByDocumentId","useEffect","refetchIfPageExistsInMap","event","id","handleDocumentPageMoveEvent","produce","draft","previewDocumentPagesSort","handler","action","documentPage","moveDocumentPage","newPosition","previousDocumentPage","documentPagesAsArray","sort","isOnLastPosition","currentDocumentPage","isPageOnLastPosition","pages","page"],"mappings":"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"}