{"version":3,"file":"_stringToPath.es.js","sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stringToPath.js"],"sourcesContent":["import memoizeCapped from './_memoizeCapped.js';\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nexport default stringToPath;\n"],"names":["rePropName","reEscapeChar","stringToPath","memoizeCapped","string","result","match","number","quote","subString","stringToPath$1"],"mappings":";AAGA,IAAIA,IAAa,oGAGbC,IAAe,YASfC,IAAeC,EAAc,SAASC,GAAQ;AAChD,MAAIC,IAAS,CAAA;AACb,SAAID,EAAO,WAAW,CAAC,MAAM,MAC3BC,EAAO,KAAK,EAAE,GAEhBD,EAAO,QAAQJ,GAAY,SAASM,GAAOC,GAAQC,GAAOC,GAAW;AACnE,IAAAJ,EAAO,KAAKG,IAAQC,EAAU,QAAQR,GAAc,IAAI,IAAKM,KAAUD,CAAM;AAAA,EACjF,CAAG,GACMD;AACT,CAAC;AAED,MAAAK,IAAeR;","x_google_ignoreList":[0]}