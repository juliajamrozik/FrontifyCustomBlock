{"version":3,"file":"fontInput.es.js","sources":["../../src/blocks/fontInput.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport type { BaseBlock } from './base';\n\n/**\n * The origin of the font.\n */\nexport enum FontProvider {\n    Google = 'Google',\n    Selfhosted = 'Selfhosted',\n    System = 'System',\n}\n\nexport type FontValue = {\n    /**\n     * The origin of the font.\n     */\n    fontProvider: FontProvider | `${FontProvider}`;\n\n    /**\n     * The identifier of the font family.\n     */\n    fontFamily: string | number;\n\n    /**\n     * The rgba-color of the text.\n     */\n    color?: {\n        /**\n         * The red value of the color (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the color (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the color (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * The weight of the font (100-1000, increment of 100).\n     */\n    weight: 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 1000;\n\n    /**\n     * The size of the font.\n     */\n    size?: string;\n\n    /**\n     * The letter spacing of the text.\n     */\n    letterSpacing?: string;\n\n    /**\n     * The line height of the text.\n     */\n    lineHeight?: string;\n\n    /**\n     * Whether the font should be uppercase or not.\n     */\n    uppercase: boolean;\n\n    /**\n     * Whether the font should be italic or not.\n     */\n    italic: boolean;\n\n    /**\n     * Whether the font should be underlined or not.\n     */\n    underline: boolean;\n\n    /**\n     * The rgba-color of the text on hover.\n     */\n    hoverColor?: {\n        /**\n         * The red value of the color (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the color (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the color (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * The background color of the text on hover.\n     */\n    hoverBackgroundColor?: {\n        /**\n         * The red value of the color (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the color (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the color (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * The weight of the font on hover (100-1000, increment of 100).\n     */\n    hoverWeight: 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 1000;\n\n    /**\n     * The size of the font on hover.\n     */\n    hoverSize?: string;\n\n    /**\n     * The letter spacing of the text on hover.\n     */\n    hoverLetterSpacing?: string;\n\n    /**\n     * The line height of the text on hover.\n     */\n    hoverLineHeight?: string;\n\n    /**\n     * Whether the font should be uppercase or not on hover.\n     */\n    hoverUppercase: boolean;\n\n    /**\n     * Whether the font should be italic or not on hover.\n     */\n    hoverItalic: boolean;\n\n    /**\n     * Whether the font should be underlined or not on hover.\n     */\n    hoverUnderline: boolean;\n\n    /**\n     * The color of the text when active.\n     */\n    activeColor?: {\n        /**\n         * The red value of the background color when active (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the background color when active (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the background color when active (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color when active (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * The background color of the text when active.\n     */\n    activeBackgroundColor?: {\n        /**\n         * The red value of the background color when active (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the background color when active (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the background color when active (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the background color when active (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * The weight of the font when active (100-1000, increment of 100).\n     */\n    activeWeight: 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 1000;\n\n    /**\n     * The size of the font when active.\n     */\n    activeSize?: string;\n\n    /**\n     * The letter spacing of the text when active.\n     */\n    activeLetterSpacing?: string;\n\n    /**\n     * The line height of the text when active.\n     */\n    activeLineHeight?: string;\n\n    /**\n     * Whether the font should be uppercase or not when active.\n     */\n    activeUppercase: boolean;\n\n    /**\n     * Whether the font should be italic or not when active.\n     */\n    activeItalic: boolean;\n\n    /**\n     * Whether the font should be underlined or not when active.\n     */\n    activeUnderline: boolean;\n};\n\nexport type FontInputBlock<AppBridge> = {\n    /**\n     * The setting type.\n     */\n    type: 'fontInput';\n\n    /**\n     * The text to be displayed in the setting.\n     * @default \"Lorem Ipsum\"\n     */\n    placeholder?: string;\n} & BaseBlock<AppBridge, FontValue>;\n"],"names":["FontProvider"],"mappings":"AAOY,IAAAA,sBAAAA,OACRA,EAAA,SAAS,UACTA,EAAA,aAAa,cACbA,EAAA,SAAS,UAHDA,IAAAA,KAAA,CAAA,CAAA;"}