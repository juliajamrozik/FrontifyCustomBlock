{"version":3,"file":"index.umd.js","sources":["../src/blocks/assetInput.ts","../src/blocks/fontInput.ts","../src/blocks/legacyAssetInput.ts","../src/blocks/notification.ts","../src/blocks/index.ts","../src/helpers/appendUnit.ts","../src/helpers/generatePaddingString.ts","../src/helpers/presetCustomValue.ts","../src/helpers/rules/numericalOrPercentRule.ts","../src/helpers/rules/minimumNumericRule.ts","../src/helpers/rules/minimumNumericalOrPercentOrAutoRule.ts","../src/helpers/rules/maximumNumericalOrPercentOrAutoRule.ts","../src/helpers/rules/betweenNumericalOrPercentOrAutoRule.ts","../src/helpers/rules/maximumNumericalOrPercentRule.ts","../src/helpers/rules/minimumNumericalOrPercentRule.ts","../src/helpers/rules/betweenPercentRule.ts","../src/helpers/rules/betweenPixelRule.ts","../src/helpers/rules/numericalOrPixelRule.ts","../src/helpers/rules/maximumNumericalOrPixelOrAutoRule.ts","../src/helpers/rules/maximumNumericalRule.ts","../src/helpers/rules/minimumNumericalOrPixelOrAutoRule.ts","../src/helpers/rules/minimumNumericalRule.ts","../src/helpers/rules/pixelRule.ts","../src/helpers/rules/minimumPixelRule.ts","../src/helpers/rules/numericalOrPixelOrAutoRule.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport type { AssetChooserObjectType, AssetChooserProjectType, AssetInputSize, FileExtension } from '.';\nimport type { BaseBlock } from './base';\n\nexport enum AssetInputSource {\n    Library = 'Library',\n    Upload = 'Upload',\n}\n\nexport enum AssetInputMode {\n    BrowseAndUpload = 'BrowseAndUpload',\n    UploadOnly = 'UploadOnly',\n    BrowseOnly = 'BrowseOnly',\n}\n\nexport type AssetInputValue = {\n    source: AssetInputSource;\n    value: number;\n};\n\nexport type AssetInputBlock<AppBridge> = {\n    /**\n     * The setting type.\n     */\n    type: 'assetInput';\n\n    /**\n     * Whether multiple assets can be selected.\n     */\n    multiSelection?: boolean;\n\n    /**\n     * Allowed project types for the asset chooser.\n     */\n    projectTypes?: AssetChooserProjectType[];\n\n    /**\n     * Allowed object types for the asset chooser.\n     */\n    objectTypes?: AssetChooserObjectType[];\n\n    /**\n     * The mode of the asset input.\n     *\n     * It allows to restrict usage of upload and asset chooser.\n     */\n    mode?: AssetInputMode;\n\n    /**\n     * The size of the input.\n     */\n    size?: 'small' | 'large' | AssetInputSize;\n\n    /**\n     * The allowed file extensions to be uploaded.\n     */\n    extensions?: (FileExtension | string)[];\n\n    /**\n     * Whether the file size should be hidden or not.\n     */\n    hideSize?: boolean;\n\n    /**\n     * Whether the file extension should be hidden or not.\n     */\n    hideExtension?: boolean;\n} & BaseBlock<AppBridge, AssetInputValue | AssetInputValue['value']>;\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport type { BaseBlock } from './base';\n\n/**\n * The origin of the font.\n */\nexport enum FontProvider {\n    Google = 'Google',\n    Selfhosted = 'Selfhosted',\n    System = 'System',\n}\n\nexport type FontValue = {\n    /**\n     * The origin of the font.\n     */\n    fontProvider: FontProvider | `${FontProvider}`;\n\n    /**\n     * The identifier of the font family.\n     */\n    fontFamily: string | number;\n\n    /**\n     * The rgba-color of the text.\n     */\n    color?: {\n        /**\n         * The red value of the color (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the color (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the color (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * The weight of the font (100-1000, increment of 100).\n     */\n    weight: 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 1000;\n\n    /**\n     * The size of the font.\n     */\n    size?: string;\n\n    /**\n     * The letter spacing of the text.\n     */\n    letterSpacing?: string;\n\n    /**\n     * The line height of the text.\n     */\n    lineHeight?: string;\n\n    /**\n     * Whether the font should be uppercase or not.\n     */\n    uppercase: boolean;\n\n    /**\n     * Whether the font should be italic or not.\n     */\n    italic: boolean;\n\n    /**\n     * Whether the font should be underlined or not.\n     */\n    underline: boolean;\n\n    /**\n     * The rgba-color of the text on hover.\n     */\n    hoverColor?: {\n        /**\n         * The red value of the color (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the color (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the color (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * The background color of the text on hover.\n     */\n    hoverBackgroundColor?: {\n        /**\n         * The red value of the color (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the color (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the color (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * The weight of the font on hover (100-1000, increment of 100).\n     */\n    hoverWeight: 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 1000;\n\n    /**\n     * The size of the font on hover.\n     */\n    hoverSize?: string;\n\n    /**\n     * The letter spacing of the text on hover.\n     */\n    hoverLetterSpacing?: string;\n\n    /**\n     * The line height of the text on hover.\n     */\n    hoverLineHeight?: string;\n\n    /**\n     * Whether the font should be uppercase or not on hover.\n     */\n    hoverUppercase: boolean;\n\n    /**\n     * Whether the font should be italic or not on hover.\n     */\n    hoverItalic: boolean;\n\n    /**\n     * Whether the font should be underlined or not on hover.\n     */\n    hoverUnderline: boolean;\n\n    /**\n     * The color of the text when active.\n     */\n    activeColor?: {\n        /**\n         * The red value of the background color when active (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the background color when active (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the background color when active (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color when active (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * The background color of the text when active.\n     */\n    activeBackgroundColor?: {\n        /**\n         * The red value of the background color when active (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the background color when active (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the background color when active (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the background color when active (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * The weight of the font when active (100-1000, increment of 100).\n     */\n    activeWeight: 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 1000;\n\n    /**\n     * The size of the font when active.\n     */\n    activeSize?: string;\n\n    /**\n     * The letter spacing of the text when active.\n     */\n    activeLetterSpacing?: string;\n\n    /**\n     * The line height of the text when active.\n     */\n    activeLineHeight?: string;\n\n    /**\n     * Whether the font should be uppercase or not when active.\n     */\n    activeUppercase: boolean;\n\n    /**\n     * Whether the font should be italic or not when active.\n     */\n    activeItalic: boolean;\n\n    /**\n     * Whether the font should be underlined or not when active.\n     */\n    activeUnderline: boolean;\n};\n\nexport type FontInputBlock<AppBridge> = {\n    /**\n     * The setting type.\n     */\n    type: 'fontInput';\n\n    /**\n     * The text to be displayed in the setting.\n     * @default \"Lorem Ipsum\"\n     */\n    placeholder?: string;\n} & BaseBlock<AppBridge, FontValue>;\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport type { AssetChooserObjectType, AssetChooserProjectType, AssetInputSize, FileExtension } from '.';\nimport type { BaseBlock } from './base';\n\nexport enum LegacyAssetInputSource {\n    Library = 'Library',\n    Upload = 'Upload',\n}\n\nexport enum LegacyAssetInputMode {\n    BrowseAndUpload = 'BrowseAndUpload',\n    UploadOnly = 'UploadOnly',\n    BrowseOnly = 'BrowseOnly',\n}\n\nexport type LegacyAssetInputValue = {\n    source: LegacyAssetInputSource;\n    value: number;\n};\n\nexport type LegacyAssetInputBlock<AppBridge> = {\n    type: 'legacyAssetInput';\n    multiSelection?: boolean;\n    extensions?: (FileExtension | string)[];\n    projectTypes?: AssetChooserProjectType[];\n    objectTypes?: AssetChooserObjectType[];\n    mode?: LegacyAssetInputMode;\n    size?: 'small' | 'large' | AssetInputSize;\n} & BaseBlock<AppBridge, LegacyAssetInputValue | LegacyAssetInputValue['value']>;\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport type { BaseBlock } from './base';\n\nexport enum NotificationStyleType {\n    Warning = 'Warning',\n    Negative = 'Negative',\n    Positive = 'Positive',\n    Info = 'Info',\n}\n\nexport type NotificationFooterEvent = 'design-settings.open' | 'general-settings.open';\n\ntype LinkOrEvent = { href: string; target?: '_self' | '_blank' } | { event: NotificationFooterEvent };\n\nexport declare type Footer<Label extends string> = {\n    label?: Label;\n} & (\n    | LinkOrEvent\n    | { replace?: ExtractVariables<Label> extends never ? never : Record<ExtractVariables<Label>, LinkOrEvent> }\n);\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype ExtractVariables<T extends string> = T extends `${infer _Start}[${infer Variable}]${infer Rest}`\n    ? Variable extends string\n        ? Rest extends string\n            ? `${Variable}` | ExtractVariables<Rest>\n            : `${Variable}`\n        : never\n    : never;\n\nexport const createFooter = <Label extends string>(footer: Footer<Label>) => footer as Footer<string>;\n\nexport enum NotificationBlockDividerPosition {\n    Top = 'Top',\n    Bottom = 'Bottom',\n    Both = 'Both',\n    None = 'None',\n}\n\nexport type NotificationBlock<AppBridge> = {\n    /**\n     * The setting type.\n     */\n    type: 'notification';\n\n    /**\n     * The title of the notification.\n     */\n    title?: string;\n\n    /**\n     * The text of the notification.\n     */\n    text?: string;\n\n    /**\n     * @deprecated Use `footer` instead\n     */\n    link?: LinkOrEvent & { label?: string };\n\n    /**\n     * The footer associated with the notification.\n     */\n    footer?: ReturnType<typeof createFooter> | (LinkOrEvent & { label?: string });\n\n    /**\n     * Customization of the notification setting.\n     */\n    styles?: {\n        /**\n         * The type of notification.\n         */\n        type?: 'info' | 'warning' | 'negative' | 'positive' | NotificationStyleType;\n\n        /**\n         * Indicates if the notification should include an icon.\n         */\n        icon?: boolean;\n\n        /**\n         * The position of the divider in the notification.\n         */\n        divider?: 'top' | 'bottom' | 'both' | 'none' | NotificationBlockDividerPosition;\n    };\n} & BaseBlock<AppBridge>;\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { AssetInputBlock } from './assetInput';\nimport { ChecklistBlock } from './checklist';\nimport { ColorInputBlock } from './colorInput';\nimport { DropdownBlock } from './dropdown';\nimport { FontInputBlock } from './fontInput';\nimport { InputBlock } from './input';\nimport { LegacyAssetInputBlock } from './legacyAssetInput';\nimport { LinkChooserBlock } from './linkChooser';\nimport { MultiInputBlock } from './multiInput';\nimport { NotificationBlock } from './notification';\nimport { SectionHeadingBlock } from './sectionHeading';\nimport { SegmentedControlsBlock } from './segmentedControls';\nimport { SwitchBlock } from './switch';\nimport { TemplateInputBlock } from './templateInput';\nimport { LegacyTemplateInputBlock } from './legacyTemplateInput';\nimport { TextareaBlock } from './textarea';\n\ntype UnionOmit<T, K extends string | number | symbol> = T extends unknown ? Omit<T, K> : never;\n\nexport * from './assetInput';\nexport * from './base';\nexport * from './checkbox';\nexport * from './checklist';\nexport * from './choices';\nexport * from './colorInput';\nexport * from './dropdown';\nexport * from './fontInput';\nexport * from './input';\nexport * from './legacyAssetInput';\nexport * from './linkChooser';\nexport * from './multiInput';\nexport * from './notification';\nexport * from './sectionHeading';\nexport * from './segmentedControls';\nexport * from './switch';\nexport * from './templateInput';\nexport * from './legacyTemplateInput';\nexport * from './textarea';\n\nexport {\n    AssetChooserObjectType,\n    AssetChooserProjectType,\n    FileExtension,\n    FileExtensionSets,\n} from '@frontify/app-bridge';\nexport { IconEnum } from '@frontify/fondue';\n\n/**\n * @deprecated\n */\nexport enum AssetInputSize {\n    Small = 'Small',\n    Large = 'Large',\n}\n\n/**\n * @deprecated\n */\nexport enum SwitchSize {\n    Small = 'Small',\n    Medium = 'Medium',\n}\n\n/**\n * @deprecated\n */\nexport enum MultiInputLayout {\n    Columns = 'Columns',\n    Spider = 'Spider',\n}\n\n/**\n * @deprecated\n */\nexport enum DropdownSize {\n    Small = 'Small',\n    Large = 'Large',\n}\n\n/**\n * @deprecated\n */\nexport enum TextInputType {\n    Text = 'text',\n    Password = 'password',\n    Number = 'number',\n}\n\nexport type SimpleSettingBlock<AppBridge> =\n    | AssetInputBlock<AppBridge>\n    | ChecklistBlock<AppBridge>\n    | ColorInputBlock<AppBridge>\n    | DropdownBlock<AppBridge>\n    | FontInputBlock<AppBridge>\n    | InputBlock<AppBridge>\n    | LegacyAssetInputBlock<AppBridge>\n    | LinkChooserBlock<AppBridge>\n    | MultiInputBlock<AppBridge>\n    | NotificationBlock<AppBridge>\n    | SectionHeadingBlock<AppBridge>\n    | SegmentedControlsBlock<AppBridge>\n    | SwitchBlock<AppBridge>\n    | TemplateInputBlock<AppBridge>\n    | LegacyTemplateInputBlock<AppBridge>\n    | TextareaBlock<AppBridge>;\n\nexport type DynamicSupportedBlock<AppBridge> =\n    | InputBlock<AppBridge>\n    | ColorInputBlock<AppBridge>\n    | DropdownBlock<AppBridge>;\n\nexport type DynamicSettingBlock<\n    AppBridge,\n    T extends DynamicSupportedBlock<AppBridge> = DynamicSupportedBlock<AppBridge>,\n> = UnionOmit<T, 'value'> & {\n    value?: DynamicSupportedBlock<AppBridge>['value'][];\n    dynamic: {\n        addButtonLabel: string;\n    };\n};\n\nexport type SettingBlock<AppBridge> = SimpleSettingBlock<AppBridge> | DynamicSettingBlock<AppBridge>;\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Bundle } from '../bundle';\nimport { Unit } from './types';\n\n/**\n * Checks if value is a numeric value without unit and creates string from value with unit\n *\n * @param {Bundle} bundle Sidebar bundle object\n * @param {string} settingId Setting id\n * @param {('px'|'em'|'rem'|'%'|'s'|'ms')} [unit='px'] Unit\n * @returns {string} Set block value to string with unit\n */\nexport const appendUnit = <AppBridge = unknown>(\n    bundle: Bundle<AppBridge>,\n    settingId: string,\n    unit: Unit = 'px',\n): void => {\n    const blockValue = bundle.getBlock(settingId)?.value;\n    const numericValue = Number(blockValue);\n    if (!Number.isNaN(numericValue) && blockValue !== '') {\n        bundle.setBlockValue(settingId, `${numericValue}${unit}`);\n    }\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nexport const generatePaddingString = (paddingSpiderInput: (string | null)[]): string => {\n    if (paddingSpiderInput.length === 0) {\n        return '0px';\n    }\n    const [top, left, right, bottom] = paddingSpiderInput;\n\n    return [top, right, bottom, left].map((pixels) => pixels || '0px').join(' ');\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Bundle } from '../bundle';\n\n/**\n * Sets value of custom input to predefined value from the Segmented Controls, if no custom value is set already\n *\n * @param {Bundle} bundle Sidebar bundle object\n * @param {string} segmentedControlsId Setting id of the segmentedControls\n * @param {string} inputId Setting id of the input\n * @param {Object} map Map of enum and values\n * @returns Set value of custom input to predefined value from the segmentedControls\n */\nexport const presetCustomValue = <AppBridge = unknown>(\n    bundle: Bundle<AppBridge>,\n    segmentedControlsId: string,\n    inputId: string,\n    map: Record<string, string>,\n): void => {\n    const segmentedControlsValue = bundle.getBlock(segmentedControlsId)?.value as string;\n    const customValue = bundle.getBlock(inputId)?.value;\n    const valueInMap = Object.keys(map).find((key) => map[key] === customValue);\n    const isPrefinedValue = segmentedControlsValue && valueInMap;\n    const hasNoCustomValue = segmentedControlsValue && !customValue;\n    if (isPrefinedValue || hasNoCustomValue) {\n        bundle.setBlockValue(inputId, map[segmentedControlsValue]);\n    }\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Rule } from './Rule';\n\nexport const numericalOrPercentRule: Rule<string> = {\n    errorMessage: \"Please use a numerical value with or without '%'\",\n    validate: (value: string) => value.match(/^-?\\d+%?$/g) !== null,\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Rule } from './Rule';\n\nexport const minimumNumericRule = (minimumValue: number): Rule<string> => ({\n    errorMessage: `Please use a value bigger or equal ${minimumValue}`,\n    validate: (value: string): boolean => {\n        return Number(value.replace(/px|%$/, '')) >= minimumValue;\n    },\n});\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Rule } from './Rule';\nimport { numericalOrPercentRule } from './numericalOrPercentRule';\nimport { minimumNumericRule } from './minimumNumericRule';\n\nexport const minimumNumericalOrPercentOrAutoRule = (minimumValue: number): Rule<string> => ({\n    errorMessage: `Please use a value bigger or equal to ${minimumValue}`,\n    validate: (value: string): boolean =>\n        value === 'auto' ||\n        (numericalOrPercentRule.validate(value) && minimumNumericRule(minimumValue).validate(value)),\n});\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { numericalOrPercentRule } from './numericalOrPercentRule';\nimport { Rule } from './Rule';\n\nexport const maximumNumericalOrPercentOrAutoRule = (maximumValue: number): Rule<string> => ({\n    errorMessage: `Please use a value smaller than ${maximumValue}`,\n    validate: (value: string): boolean =>\n        value === 'auto' || (numericalOrPercentRule.validate(value) && Number(value.replace(/%/, '')) <= maximumValue),\n});\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { minimumNumericalOrPercentOrAutoRule } from './minimumNumericalOrPercentOrAutoRule';\nimport { maximumNumericalOrPercentOrAutoRule } from './maximumNumericalOrPercentOrAutoRule';\nimport { Rule } from './Rule';\n\n/**\n * Rule to validate value is between two pixel values.\n *\n * @param {number} minimumValue Minimum value\n * @param {number} maximumValue Maximum value\n * @returns {Rule} Rule object with validator and error message.\n */\nexport const betweenNumericalOrPercentOrAutoRule = (minimumValue: number, maximumValue: number): Rule<string> => ({\n    errorMessage: `Please use a value between ${minimumValue} and ${maximumValue} or 'auto'.`,\n    validate: (value: string): boolean =>\n        minimumNumericalOrPercentOrAutoRule(minimumValue).validate(value) &&\n        maximumNumericalOrPercentOrAutoRule(maximumValue).validate(value),\n});\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { numericalOrPercentRule } from './numericalOrPercentRule';\nimport { Rule } from './Rule';\n\nexport const maximumNumericalOrPercentRule = (maximumValue: number): Rule<string> => ({\n    errorMessage: `Please use a value smaller than ${maximumValue}`,\n    validate: (value: string): boolean =>\n        numericalOrPercentRule.validate(value) && Number(value.replace(/%/, '')) <= maximumValue,\n});\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Rule } from './Rule';\nimport { numericalOrPercentRule } from './numericalOrPercentRule';\nimport { minimumNumericRule } from './minimumNumericRule';\n\nexport const minimumNumericalOrPercentRule = (minimumValue: number): Rule<string> => ({\n    errorMessage: `Please use a value bigger or than ${minimumValue}`,\n    validate: (value: string): boolean =>\n        numericalOrPercentRule.validate(value) && minimumNumericRule(minimumValue).validate(value),\n});\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { maximumNumericalOrPercentRule } from './maximumNumericalOrPercentRule';\nimport { minimumNumericalOrPercentRule } from './minimumNumericalOrPercentRule';\nimport { Rule } from './Rule';\n\n/**\n * Rule to validate value is between two percent values.\n *\n * @param {number} minimumValue Minimum value\n * @param {number} maximumValue Maximum value\n * @returns {Rule} Rule object with validator and error message.\n */\nexport const betweenPercentRule = (minimumValue: number, maximumValue: number): Rule<string> => ({\n    errorMessage: `This value is a percentage in order to make it responsive - please use a value between ${minimumValue} and ${maximumValue}.`,\n    validate: (value: string): boolean =>\n        minimumNumericalOrPercentRule(minimumValue).validate(value) &&\n        maximumNumericalOrPercentRule(maximumValue).validate(value),\n});\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Rule } from './Rule';\nimport { minimumNumericRule } from './minimumNumericRule';\n\n/**\n * Rule to validate value is between two pixel values.\n *\n * @param {number} minimumValue Minimum value\n * @param {number} maximumValue Maximum value\n * @returns {Rule} Rule object with validator and error message.\n */\nexport const betweenPixelRule = (minimumValue: number, maximumValue: number): Rule<string> => ({\n    errorMessage: `Please use a value between ${minimumValue} and ${maximumValue}.`,\n    validate: (value: string): boolean =>\n        minimumNumericRule(minimumValue).validate(value) && Number(value.replace(/px/, '')) <= maximumValue,\n});\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Rule } from './Rule';\n\n/**\n * Rule to validate value is a number or a number string with \"px\".\n */\nexport const numericalOrPixelRule: Rule<string> = {\n    errorMessage: \"Please use a numerical value with or without 'px'\",\n    validate: (value: string) => value.match(/^-?\\d+(?:px)?$/g) !== null,\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { numericalOrPixelRule } from './numericalOrPixelRule';\nimport { Rule } from './Rule';\n\nexport const maximumNumericalOrPixelOrAutoRule = (maximumValue: number): Rule<string> => ({\n    errorMessage: `Please use a value smaller than ${maximumValue}`,\n    validate: (value: string): boolean =>\n        value === 'auto' || (numericalOrPixelRule.validate(value) && Number(value.replace(/px/, '')) <= maximumValue),\n});\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nexport const maximumNumericalRule = (max: number) => ({\n    errorMessage: `Value must be smaller than or equal to ${max}`,\n    validate: (value: string) => Boolean(value) && !Number.isNaN(Number(value)) && Number(value) <= max,\n});\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { numericalOrPixelRule } from './numericalOrPixelRule';\nimport { Rule } from './Rule';\n\nexport const minimumNumericalOrPixelOrAutoRule = (minimumValue: number): Rule<string> => ({\n    errorMessage: `Please use a value bigger or equal to ${minimumValue}`,\n    validate: (value: string): boolean =>\n        value === 'auto' || (numericalOrPixelRule.validate(value) && Number(value.replace(/px/, '')) >= minimumValue),\n});\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nexport const minimumNumericalRule = (min: number) => ({\n    errorMessage: `Value must be larger than ${min}`,\n    validate: (value: string) => Boolean(value) && !Number.isNaN(Number(value)) && Number(value) >= min,\n});\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Rule } from './Rule';\n\nexport const pixelRule: Rule<string> = {\n    errorMessage: \"Please use a value with px'\",\n    validate: (value: string): boolean => value.match(/^-?\\d+px$/g) !== null,\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Rule } from './Rule';\nimport { pixelRule } from './pixelRule';\nimport { minimumNumericRule } from './minimumNumericRule';\n\nexport const minimumPixelRule = (minimumValue: number): Rule<string> => ({\n    errorMessage: `Please use a value bigger or equal ${minimumValue} with 'px'`,\n    validate: (value: string): boolean => {\n        return pixelRule.validate(value) && minimumNumericRule(minimumValue).validate(value);\n    },\n});\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Rule } from './Rule';\n\nexport const numericalOrPixelOrAutoRule: Rule<string> = {\n    errorMessage: \"Please use a numerical value with or without 'px' or 'auto'\",\n    validate: (value: string) => value.match(/^-?\\d+(?:px)?$|^auto$/g) !== null,\n};\n"],"names":["AssetInputSource","AssetInputMode","FontProvider","LegacyAssetInputSource","LegacyAssetInputMode","NotificationStyleType","createFooter","footer","NotificationBlockDividerPosition","AssetInputSize","SwitchSize","MultiInputLayout","DropdownSize","TextInputType","appendUnit","bundle","settingId","unit","blockValue","_a","numericValue","generatePaddingString","paddingSpiderInput","top","left","right","bottom","pixels","presetCustomValue","segmentedControlsId","inputId","map","segmentedControlsValue","customValue","_b","valueInMap","key","numericalOrPercentRule","value","minimumNumericRule","minimumValue","minimumNumericalOrPercentOrAutoRule","maximumNumericalOrPercentOrAutoRule","maximumValue","betweenNumericalOrPercentOrAutoRule","maximumNumericalOrPercentRule","minimumNumericalOrPercentRule","betweenPercentRule","betweenPixelRule","numericalOrPixelRule","maximumNumericalOrPixelOrAutoRule","maximumNumericalRule","max","minimumNumericalOrPixelOrAutoRule","minimumNumericalRule","min","pixelRule","minimumPixelRule","numericalOrPixelOrAutoRule"],"mappings":"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"}