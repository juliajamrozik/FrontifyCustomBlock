{"version":3,"file":"AppBridgeCreateAsset.es.js","sources":["../src/AppBridgeCreateAsset.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport type { AssetApi, NotifyData, OauthTokens, PostExternalAssetParams } from './types';\nimport { Topic } from './types';\nimport { generateRandomString, notify, subscribe } from './utilities';\n\nconst PUBSUB_TOKEN = generateRandomString();\nconst DEFAULT_TIMEOUT = 3 * 1000;\nconst LONG_TIMEOUT = 5 * 60 * 1000;\n\nexport class AppBridgeCreateAsset {\n    getAppState<T = Record<string, unknown>>(): Promise<T> {\n        notify(Topic.GetAppState, PUBSUB_TOKEN);\n        return subscribe<T>(Topic.GetAppState, PUBSUB_TOKEN);\n    }\n\n    async putAppState(newState: NotifyData): Promise<boolean> {\n        notify(Topic.PutAppState, PUBSUB_TOKEN, newState);\n        return subscribe<boolean>(Topic.PutAppState, PUBSUB_TOKEN);\n    }\n\n    async deleteAppState(): Promise<boolean> {\n        notify(Topic.DeleteAppState, PUBSUB_TOKEN);\n        return subscribe<boolean>(Topic.DeleteAppState, PUBSUB_TOKEN);\n    }\n\n    getAssetById(assetId: number): Promise<AssetApi> {\n        notify(Topic.GetAssetById, PUBSUB_TOKEN, { assetId });\n        return subscribe<AssetApi>(Topic.GetAssetById, PUBSUB_TOKEN);\n    }\n\n    async postExternalAssets(assets: PostExternalAssetParams[]): Promise<AssetApi[]> {\n        const assetsWithPreview = assets.filter((asset) => asset.previewUrl);\n        const timeout = assetsWithPreview.length > 0 ? LONG_TIMEOUT : DEFAULT_TIMEOUT;\n\n        notify<PostExternalAssetParams[]>(Topic.PostExternalAssets, PUBSUB_TOKEN, assets);\n        return subscribe<AssetApi[]>(Topic.PostExternalAssets, PUBSUB_TOKEN, {\n            timeout,\n        });\n    }\n\n    getThirdPartyOauth2Tokens(): Promise<OauthTokens> {\n        notify(Topic.GetThirdPartyOauth2Tokens, PUBSUB_TOKEN);\n        return subscribe<OauthTokens>(Topic.GetThirdPartyOauth2Tokens, PUBSUB_TOKEN, {\n            timeout: LONG_TIMEOUT,\n        });\n    }\n\n    getRefreshedThirdpartyOauth2Tokens(refreshToken: string): Promise<OauthTokens> {\n        notify(Topic.GetRefreshedThirdpartyOauth2Token, PUBSUB_TOKEN, { refreshToken });\n        return subscribe<OauthTokens>(Topic.GetRefreshedThirdpartyOauth2Token, PUBSUB_TOKEN);\n    }\n\n    closeApp(): void {\n        notify(Topic.CloseApp, PUBSUB_TOKEN);\n    }\n\n    openAssetChooser(): void {\n        notify(Topic.OpenAssetChooser, PUBSUB_TOKEN);\n    }\n}\n"],"names":["PUBSUB_TOKEN","generateRandomString","DEFAULT_TIMEOUT","LONG_TIMEOUT","AppBridgeCreateAsset","notify","Topic","subscribe","newState","assetId","assets","timeout","asset","refreshToken"],"mappings":";;;;AAMA,MAAMA,IAAeC,EAAqB,GACpCC,IAAkB,IAAI,KACtBC,IAAe,IAAI,KAAK;AAEvB,MAAMC,EAAqB;AAAA,EAC9B,cAAuD;AAC5C,WAAAC,EAAAC,EAAM,aAAaN,CAAY,GAC/BO,EAAaD,EAAM,aAAaN,CAAY;AAAA,EACvD;AAAA,EAEA,MAAM,YAAYQ,GAAwC;AAC/C,WAAAH,EAAAC,EAAM,aAAaN,GAAcQ,CAAQ,GACzCD,EAAmBD,EAAM,aAAaN,CAAY;AAAA,EAC7D;AAAA,EAEA,MAAM,iBAAmC;AAC9B,WAAAK,EAAAC,EAAM,gBAAgBN,CAAY,GAClCO,EAAmBD,EAAM,gBAAgBN,CAAY;AAAA,EAChE;AAAA,EAEA,aAAaS,GAAoC;AAC7C,WAAAJ,EAAOC,EAAM,cAAcN,GAAc,EAAE,SAAAS,EAAS,CAAA,GAC7CF,EAAoBD,EAAM,cAAcN,CAAY;AAAA,EAC/D;AAAA,EAEA,MAAM,mBAAmBU,GAAwD;AAE7E,UAAMC,IADoBD,EAAO,OAAO,CAACE,MAAUA,EAAM,UAAU,EACjC,SAAS,IAAIT,IAAeD;AAE5B,WAAAG,EAAAC,EAAM,oBAAoBN,GAAcU,CAAM,GACzEH,EAAsBD,EAAM,oBAAoBN,GAAc;AAAA,MACjE,SAAAW;AAAA,IAAA,CACH;AAAA,EACL;AAAA,EAEA,4BAAkD;AACvC,WAAAN,EAAAC,EAAM,2BAA2BN,CAAY,GAC7CO,EAAuBD,EAAM,2BAA2BN,GAAc;AAAA,MACzE,SAASG;AAAA,IAAA,CACZ;AAAA,EACL;AAAA,EAEA,mCAAmCU,GAA4C;AAC3E,WAAAR,EAAOC,EAAM,mCAAmCN,GAAc,EAAE,cAAAa,EAAc,CAAA,GACvEN,EAAuBD,EAAM,mCAAmCN,CAAY;AAAA,EACvF;AAAA,EAEA,WAAiB;AACN,IAAAK,EAAAC,EAAM,UAAUN,CAAY;AAAA,EACvC;AAAA,EAEA,mBAAyB;AACd,IAAAK,EAAAC,EAAM,kBAAkBN,CAAY;AAAA,EAC/C;AACJ;"}