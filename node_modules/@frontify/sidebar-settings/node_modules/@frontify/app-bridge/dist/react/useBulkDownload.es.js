import { useRef as y, useState as s } from "react";
var g = /* @__PURE__ */ ((n) => (n.Init = "init", n.Started = "started", n.Pending = "pending", n.Ready = "ready", n.Error = "error", n))(g || {});
const k = (n) => {
  const e = y(null), [c, o] = s(
    "init"
    /* Init */
  ), [d, a] = s(null), u = async (t, r) => {
    try {
      o(
        "started"
        /* Started */
      );
      const l = await n.getBulkDownloadToken(t, r);
      a(null), i(l);
    } catch (l) {
      o(
        "error"
        /* Error */
      ), console.error(l);
    }
  }, i = async (t) => {
    try {
      const r = await n.getBulkDownloadByToken(t);
      r.downloadUrl ? (a(r.downloadUrl), o(
        "ready"
        /* Ready */
      )) : (o(
        "pending"
        /* Pending */
      ), e.current = w(r.signature));
    } catch (r) {
      o(
        "error"
        /* Error */
      ), console.error(r);
    }
  }, w = (t) => window.setInterval(async () => {
    try {
      const r = await n.getBulkDownloadBySignature(t);
      r.downloadUrl && (o(
        "ready"
        /* Ready */
      ), a(r.downloadUrl), e.current && clearInterval(e.current));
    } catch (r) {
      o(
        "error"
        /* Error */
      ), console.error(r), e.current && clearInterval(e.current);
    }
  }, 2500);
  return { generateBulkDownload: u, status: c, downloadUrl: d };
};
export {
  g as BulkDownloadState,
  k as useBulkDownload
};
//# sourceMappingURL=useBulkDownload.es.js.map
