import { useState as D, useCallback as A, useEffect as p } from "react";
import { produce as f } from "immer";
const w = (e, t) => e.sort && t.sort ? e.sort - t.sort : 0, E = (e, t, n = { enabled: !0 }) => {
  const [r, s] = D(/* @__PURE__ */ new Map([])), [c, u] = D(!0), i = A(async () => {
    u(!0), s(await v(e, t)), u(!1);
  }, [e, t]);
  return p(() => {
    n.enabled && i();
  }, [i, n.enabled]), p(() => {
    const g = (o) => {
      r.has(o.documentPage.categoryId) && s(
        f((a) => {
          const d = `${o.action}-page`;
          return (y[d] || y.default)(a, o.documentPage);
        })
      );
    }, l = (o) => {
      r.has(o.documentCategory.id) && s(
        f((a) => {
          h(a, o.documentCategory, o.position);
        })
      );
    }, m = ({ action: o, documentCategory: a }) => {
      o === "update" && r.has(a.id) || o === "add" && a.documentId === t ? i() : o === "delete" && r.has(a.id) && s(
        f((d) => {
          d.delete(a.id);
        })
      );
    };
    return window.emitter.on("AppBridge:GuidelineDocumentCategory:Action", m), window.emitter.on("AppBridge:GuidelineDocumentCategory:DocumentPageAction", g), window.emitter.on("AppBridge:GuidelineDocumentCategory:MoveEvent", l), () => {
      window.emitter.off("AppBridge:GuidelineDocumentCategory:Action", m), window.emitter.off("AppBridge:GuidelineDocumentCategory:DocumentPageAction", g), window.emitter.off("AppBridge:GuidelineDocumentCategory:MoveEvent", l);
    };
  }, [r, t, i]), { documentCategories: Array.from(r.values()), refetch: i, isLoading: c };
}, h = (e, t, n) => {
  if (!t.sort || !n)
    return e;
  const r = e.get(t.id), s = [...e.values()].sort(w);
  e.clear();
  let c = 1, u = !0;
  for (const i of s)
    i.id !== t.id && (r && c === n && (e.set(t.id, { ...r, sort: n }), u = !1), e.set(i.id, {
      ...i,
      sort: c
    }), c++);
  return r && u && e.set(t.id, { ...r, sort: c }), e;
}, P = (e, t) => {
  if (!t.categoryId)
    return e;
  const n = e.get(t.categoryId);
  if (!n)
    return e;
  const r = {
    ...n,
    numberOfDocumentPages: n.numberOfDocumentPages + 1
  };
  return e.set(n.id, r);
}, b = (e, t) => {
  if (!t.categoryId)
    return e;
  const n = e.get(t.categoryId);
  if (!n)
    return e;
  const r = {
    ...n,
    numberOfDocumentPages: n.numberOfDocumentPages - 1
  };
  return e.set(n.id, r);
}, y = {
  "add-page": P,
  "delete-page": b,
  default: (e) => e
}, v = async (e, t) => {
  const n = await e.getDocumentCategoriesByDocumentId(t);
  return new Map([...n].sort(w).map((r) => [r.id, r]));
};
export {
  E as useDocumentCategories
};
//# sourceMappingURL=useDocumentCategories.es.js.map
