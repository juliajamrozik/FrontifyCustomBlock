{"version":3,"file":"useCoverPage.es.js","sources":["../../src/react/useCoverPage.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useCallback, useEffect, useState } from 'react';\n\nimport type { AppBridgeTheme } from '../AppBridgeTheme';\nimport type { CoverPage, EmitterAction } from '../types';\n\nexport type UseCoverPageReturnType = {\n    coverPage: Nullable<CoverPage>;\n    isLoading: boolean;\n};\n\ntype Options = {\n    /**\n     * Whether it should fetch on mount.\n     */\n    enabled?: boolean;\n};\n\nexport const useCoverPage = (\n    appBridge: AppBridgeTheme,\n    options: Options = { enabled: true },\n): UseCoverPageReturnType => {\n    const [coverPage, setCoverPage] = useState<Nullable<CoverPage>>(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    const fetchCoverPage = useCallback(async () => {\n        setIsLoading(true);\n        setCoverPage(await appBridge.getCoverPage());\n        setIsLoading(false);\n    }, [appBridge]);\n\n    useEffect(() => {\n        if (options.enabled) {\n            fetchCoverPage().catch(console.error);\n        }\n    }, [appBridge, fetchCoverPage, options.enabled]);\n\n    useEffect(() => {\n        const updateCoverPageFromEvent = (event: { action: EmitterAction; coverPage?: CoverPage }) => {\n            if (event.action === 'add') {\n                fetchCoverPage().catch(console.error);\n                return;\n            }\n\n            setCoverPage((previousState) => {\n                if (event.action === 'delete') {\n                    return null;\n                }\n\n                if (event.action === 'update' && event.coverPage) {\n                    return { ...previousState, ...event.coverPage };\n                }\n\n                return previousState;\n            });\n        };\n\n        window.emitter.on('AppBridge:GuidelineCoverPage:Action', updateCoverPageFromEvent);\n\n        return () => {\n            window.emitter.off('AppBridge:GuidelineCoverPage:Action', updateCoverPageFromEvent);\n        };\n    }, [appBridge, fetchCoverPage]);\n\n    return { coverPage, isLoading };\n};\n"],"names":["useCoverPage","appBridge","options","coverPage","setCoverPage","useState","isLoading","setIsLoading","fetchCoverPage","useCallback","useEffect","updateCoverPageFromEvent","event","previousState"],"mappings":";AAmBO,MAAMA,IAAe,CACxBC,GACAC,IAAmB,EAAE,SAAS,SACL;AACzB,QAAM,CAACC,GAAWC,CAAY,IAAIC,EAA8B,IAAI,GAC9D,CAACC,GAAWC,CAAY,IAAIF,EAAS,EAAI,GAEzCG,IAAiBC,EAAY,YAAY;AAC3C,IAAAF,EAAa,EAAI,GACJH,EAAA,MAAMH,EAAU,aAAA,CAAc,GAC3CM,EAAa,EAAK;AAAA,EAAA,GACnB,CAACN,CAAS,CAAC;AAEd,SAAAS,EAAU,MAAM;AACZ,IAAIR,EAAQ,WACOM,IAAE,MAAM,QAAQ,KAAK;AAAA,KAEzC,CAACP,GAAWO,GAAgBN,EAAQ,OAAO,CAAC,GAE/CQ,EAAU,MAAM;AACN,UAAAC,IAA2B,CAACC,MAA4D;AACtF,UAAAA,EAAM,WAAW,OAAO;AACT,QAAAJ,IAAE,MAAM,QAAQ,KAAK;AACpC;AAAA,MACJ;AAEA,MAAAJ,EAAa,CAACS,MACND,EAAM,WAAW,WACV,OAGPA,EAAM,WAAW,YAAYA,EAAM,YAC5B,EAAE,GAAGC,GAAe,GAAGD,EAAM,UAAU,IAG3CC,CACV;AAAA,IAAA;AAGE,kBAAA,QAAQ,GAAG,uCAAuCF,CAAwB,GAE1E,MAAM;AACF,aAAA,QAAQ,IAAI,uCAAuCA,CAAwB;AAAA,IAAA;AAAA,EACtF,GACD,CAACV,GAAWO,CAAc,CAAC,GAEvB,EAAE,WAAAL,GAAW,WAAAG;AACxB;"}