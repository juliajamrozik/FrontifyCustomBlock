import { useState as l, useEffect as S } from "react";
const m = (t, i, e) => {
  const [n, a] = l(null), [f, o] = l(!0);
  return S(() => {
    const s = (r) => {
      a({ ...r.pageTemplateSettings });
    };
    return (async () => {
      if (o(!0), i === "cover") {
        const r = await t.getCoverPageTemplateSettings();
        a(r);
      } else if (i === "documentPage")
        if (e === void 0)
          console.error("Document ID is required for document page template settings");
        else {
          const r = await t.getDocumentPageTemplateSettings(
            e
          );
          a(r);
        }
      else if (i === "library")
        if (e === void 0)
          console.error("Document ID is required for library template settings");
        else {
          const r = await t.getLibraryPageTemplateSettings(e);
          a(r);
        }
      o(!1);
    })(), window.emitter.on("AppBridge:PageTemplateSettingsUpdated", s), () => {
      window.emitter.off("AppBridge:PageTemplateSettingsUpdated", s);
    };
  }, [t, e, i]), { pageTemplateSettings: n, updatePageTemplateSettings: async (s) => {
    try {
      if (i === "cover")
        await t.updateCoverPageTemplateSettings(s);
      else if (i === "documentPage") {
        if (e === void 0) {
          console.error("Document ID is required for document page template settings");
          return;
        }
        await t.updateDocumentPageTemplateSettings(
          e,
          s
        );
      } else if (i === "library") {
        if (e === void 0) {
          console.error("Document ID is required for library template settings");
          return;
        }
        await t.updateLibraryPageTemplateSettings(e, s);
      }
      window.emitter.emit("AppBridge:PageTemplateSettingsUpdated", {
        pageTemplateSettings: {
          ...n,
          ...s
        }
      });
    } catch (g) {
      console.error(g);
    }
  }, isLoading: f };
};
export {
  m as usePageTemplateSettings
};
//# sourceMappingURL=usePageTemplateSettings.es.js.map
