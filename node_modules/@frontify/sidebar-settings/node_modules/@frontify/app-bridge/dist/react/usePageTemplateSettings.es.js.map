{"version":3,"file":"usePageTemplateSettings.es.js","sources":["../../src/react/usePageTemplateSettings.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useEffect, useState } from 'react';\n\nimport type { AppBridgeTheme } from '../AppBridgeTheme';\nimport type { EmitterEvents } from '../types';\n\nexport const usePageTemplateSettings = <T = Record<string, unknown>>(\n    appBridge: AppBridgeTheme,\n    template: 'cover' | 'documentPage' | 'library',\n    documentOrDocumentPageId?: number,\n) => {\n    const [pageTemplateSettings, setPageTemplateSettings] = useState<Nullable<T>>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        const updateBlockSettingsFromEvent = (event: EmitterEvents['AppBridge:PageTemplateSettingsUpdated']) => {\n            setPageTemplateSettings({ ...event.pageTemplateSettings } as T);\n        };\n\n        const getInitialPageTemplateSettings = async () => {\n            setIsLoading(true);\n\n            if (template === 'cover') {\n                const coverPageSettings = await appBridge.getCoverPageTemplateSettings<T>();\n                setPageTemplateSettings(coverPageSettings);\n            } else if (template === 'documentPage') {\n                if (documentOrDocumentPageId === undefined) {\n                    console.error('Document ID is required for document page template settings');\n                } else {\n                    const documentSettings = await appBridge.getDocumentPageTemplateSettings<T>(\n                        documentOrDocumentPageId,\n                    );\n                    setPageTemplateSettings(documentSettings);\n                }\n            } else if (template === 'library') {\n                if (documentOrDocumentPageId === undefined) {\n                    console.error('Document ID is required for library template settings');\n                } else {\n                    const librarySettings = await appBridge.getLibraryPageTemplateSettings<T>(documentOrDocumentPageId);\n                    setPageTemplateSettings(librarySettings);\n                }\n            }\n\n            setIsLoading(false);\n        };\n\n        getInitialPageTemplateSettings();\n\n        window.emitter.on('AppBridge:PageTemplateSettingsUpdated', updateBlockSettingsFromEvent);\n\n        return () => {\n            window.emitter.off('AppBridge:PageTemplateSettingsUpdated', updateBlockSettingsFromEvent);\n        };\n    }, [appBridge, documentOrDocumentPageId, template]);\n\n    const updatePageTemplateSettings = async (pageTemplateSettingsUpdate: Partial<T>) => {\n        try {\n            if (template === 'cover') {\n                await appBridge.updateCoverPageTemplateSettings(pageTemplateSettingsUpdate);\n            } else if (template === 'documentPage') {\n                if (documentOrDocumentPageId === undefined) {\n                    console.error('Document ID is required for document page template settings');\n                    return;\n                }\n\n                await appBridge.updateDocumentPageTemplateSettings(\n                    documentOrDocumentPageId,\n                    pageTemplateSettingsUpdate,\n                );\n            } else if (template === 'library') {\n                if (documentOrDocumentPageId === undefined) {\n                    console.error('Document ID is required for library template settings');\n                    return;\n                }\n\n                await appBridge.updateLibraryPageTemplateSettings(documentOrDocumentPageId, pageTemplateSettingsUpdate);\n            }\n\n            window.emitter.emit('AppBridge:PageTemplateSettingsUpdated', {\n                pageTemplateSettings: {\n                    ...pageTemplateSettings,\n                    ...pageTemplateSettingsUpdate,\n                },\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    return { pageTemplateSettings, updatePageTemplateSettings, isLoading };\n};\n"],"names":["usePageTemplateSettings","appBridge","template","documentOrDocumentPageId","pageTemplateSettings","setPageTemplateSettings","useState","isLoading","setIsLoading","useEffect","updateBlockSettingsFromEvent","event","coverPageSettings","documentSettings","librarySettings","pageTemplateSettingsUpdate","error"],"mappings":";AAOO,MAAMA,IAA0B,CACnCC,GACAC,GACAC,MACC;AACD,QAAM,CAACC,GAAsBC,CAAuB,IAAIC,EAAsB,IAAI,GAC5E,CAACC,GAAWC,CAAY,IAAIF,EAAkB,EAAI;AAExD,SAAAG,EAAU,MAAM;AACN,UAAAC,IAA+B,CAACC,MAAkE;AACpG,MAAAN,EAAwB,EAAE,GAAGM,EAAM,qBAA2B,CAAA;AAAA,IAAA;AA8BnC,YA3BQ,YAAY;AAG/C,UAFAH,EAAa,EAAI,GAEbN,MAAa,SAAS;AAChB,cAAAU,IAAoB,MAAMX,EAAU;AAC1C,QAAAI,EAAwBO,CAAiB;AAAA,MAAA,WAClCV,MAAa;AACpB,YAAIC,MAA6B;AAC7B,kBAAQ,MAAM,6DAA6D;AAAA,aACxE;AACG,gBAAAU,IAAmB,MAAMZ,EAAU;AAAA,YACrCE;AAAA,UAAA;AAEJ,UAAAE,EAAwBQ,CAAgB;AAAA,QAC5C;AAAA,eACOX,MAAa;AACpB,YAAIC,MAA6B;AAC7B,kBAAQ,MAAM,uDAAuD;AAAA,aAClE;AACH,gBAAMW,IAAkB,MAAMb,EAAU,+BAAkCE,CAAwB;AAClG,UAAAE,EAAwBS,CAAe;AAAA,QAC3C;AAGJ,MAAAN,EAAa,EAAK;AAAA,IAAA,MAKf,OAAA,QAAQ,GAAG,yCAAyCE,CAA4B,GAEhF,MAAM;AACF,aAAA,QAAQ,IAAI,yCAAyCA,CAA4B;AAAA,IAAA;AAAA,EAE7F,GAAA,CAACT,GAAWE,GAA0BD,CAAQ,CAAC,GAoC3C,EAAE,sBAAAE,GAAsB,4BAlCI,OAAOW,MAA2C;AAC7E,QAAA;AACA,UAAIb,MAAa;AACP,cAAAD,EAAU,gCAAgCc,CAA0B;AAAA,eACnEb,MAAa,gBAAgB;AACpC,YAAIC,MAA6B,QAAW;AACxC,kBAAQ,MAAM,6DAA6D;AAC3E;AAAA,QACJ;AAEA,cAAMF,EAAU;AAAA,UACZE;AAAA,UACAY;AAAA,QAAA;AAAA,MACJ,WACOb,MAAa,WAAW;AAC/B,YAAIC,MAA6B,QAAW;AACxC,kBAAQ,MAAM,uDAAuD;AACrE;AAAA,QACJ;AAEM,cAAAF,EAAU,kCAAkCE,GAA0BY,CAA0B;AAAA,MAC1G;AAEO,aAAA,QAAQ,KAAK,yCAAyC;AAAA,QACzD,sBAAsB;AAAA,UAClB,GAAGX;AAAA,UACH,GAAGW;AAAA,QACP;AAAA,MAAA,CACH;AAAA,aACIC,GAAO;AACZ,cAAQ,MAAMA,CAAK;AAAA,IACvB;AAAA,EAAA,GAGuD,WAAAT;AAC/D;"}