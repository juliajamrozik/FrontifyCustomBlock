{"version":3,"file":"useFileUpload.es.js","sources":["../../src/react/useFileUpload.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useEffect, useRef, useState } from 'react';\n\nimport type { FileApi } from '../types';\nimport Worker from '../workers/upload.worker.js?worker&inline';\n\nexport type UseFileUploadParameters = {\n    onUploadProgress?: (event: MessageEvent) => void;\n    onUploadProgressAll?: (event: MessageEvent) => void;\n    onUploadDone?: (event: MessageEvent<FileApi>) => void;\n    onUploadDoneAll?: (event: FileApi[]) => void;\n    onUploadFail?: () => void;\n    onUploadFileFail?: (event: MessageEvent) => void;\n};\n\nenum WorkerEvent {\n    OnProgress = 'onProgress',\n    OnProgressAll = 'onProgressAll',\n    OnDone = 'onDone',\n    OnDoneAll = 'onDoneAll',\n    OnFail = 'onFail',\n    OnFileFail = 'onFileFail',\n}\n\nexport type UseFileUploadReturnTypes = [(files: FileList | File) => void, { results: FileApi[]; doneAll: boolean }];\n\nexport const useFileUpload = (props?: UseFileUploadParameters): UseFileUploadReturnTypes => {\n    const results = useRef<FileApi[]>([]);\n\n    const [doneAll, setDoneAll] = useState(false);\n\n    const { onUploadProgress, onUploadProgressAll, onUploadDone, onUploadDoneAll, onUploadFail, onUploadFileFail } =\n        props ?? {};\n\n    const workerRef = useRef<Worker>();\n\n    useEffect(() => {\n        const worker = new Worker();\n        workerRef.current = worker;\n\n        worker.addEventListener('message', (workerEvent) => {\n            switch (workerEvent.data.event) {\n                case WorkerEvent.OnProgress:\n                    onProgress(workerEvent);\n                    break;\n                case WorkerEvent.OnProgressAll:\n                    onProgressAll(workerEvent);\n                    break;\n                case WorkerEvent.OnDone:\n                    onDone(workerEvent);\n                    break;\n                case WorkerEvent.OnDoneAll:\n                    onDoneAll();\n                    break;\n                case WorkerEvent.OnFail:\n                    onFail();\n                    break;\n                case WorkerEvent.OnFileFail:\n                    onFileFail(workerEvent);\n                    break;\n                default:\n                    throw new Error(`${workerEvent.data.event} is not handled`);\n            }\n        });\n\n        return () => {\n            worker.terminate();\n        };\n    }, []);\n\n    const onProgress = (workerEvent: MessageEvent<FileApi>) => {\n        onUploadProgress?.(workerEvent);\n    };\n\n    const onProgressAll = (workerEvent: MessageEvent<FileApi>) => {\n        onUploadProgressAll?.(workerEvent);\n    };\n\n    const onDone = (workerEvent: MessageEvent<FileApi>) => {\n        onUploadDone?.(workerEvent);\n        results.current = [...results.current, workerEvent.data];\n    };\n\n    const onDoneAll = () => {\n        onUploadDoneAll?.(results.current);\n        setDoneAll(true);\n    };\n\n    const onFail = () => {\n        onUploadFail?.();\n        throw new Error('File upload failed');\n    };\n\n    const onFileFail = (workerEvent: MessageEvent<FileApi>) => {\n        onUploadFileFail?.(workerEvent);\n    };\n\n    const getFilesAsArray = (files: FileList | File): File[] => {\n        const fileArray: File[] = [];\n\n        if (files instanceof File) {\n            fileArray.push(files);\n        }\n\n        if (files instanceof FileList) {\n            fileArray.push(...Array.from(files));\n        }\n\n        return fileArray;\n    };\n\n    const resetState = () => {\n        setDoneAll(false);\n        results.current = [];\n    };\n\n    const uploadFiles = (files: FileList | File) => {\n        resetState();\n        const fileArray = getFilesAsArray(files);\n\n        if (fileArray.length === 0) {\n            return;\n        }\n\n        const message = {\n            files: fileArray,\n        };\n\n        if (workerRef?.current) {\n            workerRef.current.postMessage(message);\n        }\n    };\n\n    return [uploadFiles, { results: results.current, doneAll }];\n};\n"],"names":["useFileUpload","props","results","useRef","doneAll","setDoneAll","useState","onUploadProgress","onUploadProgressAll","onUploadDone","onUploadDoneAll","onUploadFail","onUploadFileFail","workerRef","useEffect","worker","Worker","workerEvent","onProgress","onProgressAll","onDone","onDoneAll","onFail","onFileFail","getFilesAsArray","files","fileArray","resetState","message"],"mappings":";;AA2Ba,MAAAA,IAAgB,CAACC,MAA8D;AAClF,QAAAC,IAAUC,EAAkB,CAAA,CAAE,GAE9B,CAACC,GAASC,CAAU,IAAIC,EAAS,EAAK,GAEtC,EAAE,kBAAAC,GAAkB,qBAAAC,GAAqB,cAAAC,GAAc,iBAAAC,GAAiB,cAAAC,GAAc,kBAAAC,EAAA,IACxFX,KAAS,IAEPY,IAAYV;AAElB,EAAAW,EAAU,MAAM;AACN,UAAAC,IAAS,IAAIC;AACnB,WAAAH,EAAU,UAAUE,GAEbA,EAAA,iBAAiB,WAAW,CAACE,MAAgB;AACxC,cAAAA,EAAY,KAAK,OAAO;AAAA,QAC5B,KAAK;AACD,UAAAC,EAAWD,CAAW;AACtB;AAAA,QACJ,KAAK;AACD,UAAAE,EAAcF,CAAW;AACzB;AAAA,QACJ,KAAK;AACD,UAAAG,EAAOH,CAAW;AAClB;AAAA,QACJ,KAAK;AACS,UAAAI;AACV;AAAA,QACJ,KAAK;AACM,UAAAC;AACP;AAAA,QACJ,KAAK;AACD,UAAAC,EAAWN,CAAW;AACtB;AAAA,QACJ;AACI,gBAAM,IAAI,MAAM,GAAGA,EAAY,KAAK,KAAK,iBAAiB;AAAA,MAClE;AAAA,IAAA,CACH,GAEM,MAAM;AACT,MAAAF,EAAO,UAAU;AAAA,IAAA;AAAA,EAEzB,GAAG,CAAE,CAAA;AAEC,QAAAG,IAAa,CAACD,MAAuC;AACvD,IAAAV,KAAA,QAAAA,EAAmBU;AAAA,EAAW,GAG5BE,IAAgB,CAACF,MAAuC;AAC1D,IAAAT,KAAA,QAAAA,EAAsBS;AAAA,EAAW,GAG/BG,IAAS,CAACH,MAAuC;AACnD,IAAAR,KAAA,QAAAA,EAAeQ,IACff,EAAQ,UAAU,CAAC,GAAGA,EAAQ,SAASe,EAAY,IAAI;AAAA,EAAA,GAGrDI,IAAY,MAAM;AACpB,IAAAX,KAAA,QAAAA,EAAkBR,EAAQ,UAC1BG,EAAW,EAAI;AAAA,EAAA,GAGbiB,IAAS,MAAM;AACF,UAAAX,KAAA,QAAAA,KACT,IAAI,MAAM,oBAAoB;AAAA,EAAA,GAGlCY,IAAa,CAACN,MAAuC;AACvD,IAAAL,KAAA,QAAAA,EAAmBK;AAAA,EAAW,GAG5BO,IAAkB,CAACC,MAAmC;AACxD,UAAMC,IAAoB,CAAA;AAE1B,WAAID,aAAiB,QACjBC,EAAU,KAAKD,CAAK,GAGpBA,aAAiB,YACjBC,EAAU,KAAK,GAAG,MAAM,KAAKD,CAAK,CAAC,GAGhCC;AAAA,EAAA,GAGLC,IAAa,MAAM;AACrB,IAAAtB,EAAW,EAAK,GAChBH,EAAQ,UAAU;EAAC;AAoBvB,SAAO,CAjBa,CAACuB,MAA2B;AACjC,IAAAE;AACL,UAAAD,IAAYF,EAAgBC,CAAK;AAEnC,QAAAC,EAAU,WAAW;AACrB;AAGJ,UAAME,IAAU;AAAA,MACZ,OAAOF;AAAA,IAAA;AAGX,IAAIb,KAAA,QAAAA,EAAW,WACDA,EAAA,QAAQ,YAAYe,CAAO;AAAA,EACzC,GAGiB,EAAE,SAAS1B,EAAQ,SAAS,SAAAE,GAAS;AAC9D;"}