{"version":3,"file":"useGuidelineActions.es.js","sources":["../../src/react/useGuidelineActions.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useCallback } from 'react';\n\nimport type { AppBridgeTheme } from '../AppBridgeTheme';\nimport type {\n    BrandportalLink,\n    CoverPage,\n    CoverPageCreate,\n    CoverPageUpdate,\n    CoverPageUpdateLegacy,\n    DocumentCategory,\n    DocumentCategoryCreate,\n    DocumentCategoryDelete,\n    DocumentCategoryUpdate,\n    DocumentGroup,\n    DocumentGroupCreate,\n    DocumentGroupDelete,\n    DocumentGroupUpdate,\n    DocumentLibraryCreate,\n    DocumentLibraryDelete,\n    DocumentLibraryUpdate,\n    DocumentLinkCreate,\n    DocumentLinkDelete,\n    DocumentLinkUpdate,\n    DocumentPage,\n    DocumentPageCreate,\n    DocumentPageDelete,\n    DocumentPageUpdate,\n    DocumentStandardCreate,\n    DocumentStandardDelete,\n    DocumentStandardUpdate,\n    EmitterEvents,\n} from '../types';\n\nexport const useGuidelineActions = (appBridge: AppBridgeTheme) => {\n    const createLink = useCallback(\n        async (link: DocumentLinkCreate) => {\n            const result = await appBridge.createLink(link);\n\n            window.emitter.emit('AppBridge:GuidelineDocument:Action', {\n                document: { ...result, ...(link.documentGroupId && { documentGroupId: link.documentGroupId }) },\n                action: 'add',\n            });\n\n            if (link.documentGroupId) {\n                window.emitter.emit('AppBridge:GuidelineDocumentGroup:DocumentAction', {\n                    document: { id: result.id, documentGroupId: link.documentGroupId },\n                    action: 'add',\n                });\n            }\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const updateLink = useCallback(\n        async (link: DocumentLinkUpdate) => {\n            const result = await appBridge.updateLink(link);\n\n            window.emitter.emit('AppBridge:GuidelineDocument:Action', {\n                document: { ...result, ...(link.documentGroupId && { documentGroupId: link.documentGroupId }) },\n                action: 'update',\n            });\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const deleteLink = useCallback(\n        async (link: DocumentLinkDelete) => {\n            await appBridge.deleteLink(link.id);\n\n            window.emitter.emit('AppBridge:GuidelineDocument:Action', {\n                document: link,\n                action: 'delete',\n            });\n\n            if (link.documentGroupId) {\n                window.emitter.emit('AppBridge:GuidelineDocumentGroup:DocumentAction', {\n                    document: { ...link, documentGroupId: link.documentGroupId },\n                    action: 'delete',\n                });\n            }\n        },\n        [appBridge],\n    );\n\n    const createLibrary = useCallback(\n        async (library: DocumentLibraryCreate) => {\n            const result = await appBridge.createLibrary(library);\n\n            window.emitter.emit('AppBridge:GuidelineDocument:Action', {\n                document: {\n                    ...result,\n                    ...(library.documentGroupId && { documentGroupId: library.documentGroupId }),\n                },\n                action: 'add',\n            });\n\n            if (library.documentGroupId) {\n                window.emitter.emit('AppBridge:GuidelineDocumentGroup:DocumentAction', {\n                    document: { id: result.id, documentGroupId: library.documentGroupId },\n                    action: 'add',\n                });\n            }\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const updateLibrary = useCallback(\n        async (library: DocumentLibraryUpdate) => {\n            const result = await appBridge.updateLibrary(library);\n\n            window.emitter.emit('AppBridge:GuidelineDocument:Action', {\n                document: {\n                    ...result,\n                    ...(library.documentGroupId && { documentGroupId: library.documentGroupId }),\n                },\n                action: 'update',\n            });\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const deleteLibrary = useCallback(\n        async (library: DocumentLibraryDelete) => {\n            await appBridge.deleteLibrary(library.id);\n\n            window.emitter.emit('AppBridge:GuidelineDocument:Action', {\n                document: library,\n                action: 'delete',\n            });\n\n            if (library.documentGroupId) {\n                window.emitter.emit('AppBridge:GuidelineDocumentGroup:DocumentAction', {\n                    document: { ...library, documentGroupId: library.documentGroupId },\n                    action: 'delete',\n                });\n            }\n        },\n        [appBridge],\n    );\n\n    const createStandardDocument = useCallback(\n        async (document: DocumentStandardCreate) => {\n            const result = await appBridge.createStandardDocument(document);\n\n            window.emitter.emit('AppBridge:GuidelineDocument:Action', {\n                document: {\n                    ...result,\n                    ...(document.documentGroupId && { documentGroupId: document.documentGroupId }),\n                },\n                action: 'add',\n            });\n\n            if (document.documentGroupId) {\n                window.emitter.emit('AppBridge:GuidelineDocumentGroup:DocumentAction', {\n                    document: { id: result.id, documentGroupId: document.documentGroupId },\n                    action: 'add',\n                });\n            }\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const updateStandardDocument = useCallback(\n        async (document: DocumentStandardUpdate) => {\n            const result = await appBridge.updateStandardDocument(document);\n\n            window.emitter.emit('AppBridge:GuidelineDocument:Action', {\n                document: {\n                    ...result,\n                    ...(document.documentGroupId && { documentGroupId: document.documentGroupId }),\n                },\n                action: 'update',\n            });\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const deleteStandardDocument = useCallback(\n        async (document: DocumentStandardDelete) => {\n            await appBridge.deleteStandardDocument(document.id);\n\n            window.emitter.emit('AppBridge:GuidelineDocument:Action', {\n                document,\n                action: 'delete',\n            });\n\n            if (document.documentGroupId) {\n                window.emitter.emit('AppBridge:GuidelineDocumentGroup:DocumentAction', {\n                    document: { ...document, documentGroupId: document.documentGroupId },\n                    action: 'delete',\n                });\n            }\n        },\n        [appBridge],\n    );\n\n    const createDocumentGroup = useCallback(\n        async (documentGroup: DocumentGroupCreate) => {\n            const result = await appBridge.createDocumentGroup(documentGroup);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentGroup:Action', {\n                documentGroup: result,\n                action: 'add',\n            });\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const updateDocumentGroup = useCallback(\n        async (documentGroupUpdate: DocumentGroupUpdate) => {\n            const documentGroup = await appBridge.updateDocumentGroup(documentGroupUpdate);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentGroup:Action', {\n                documentGroup,\n                action: 'update',\n            });\n        },\n        [appBridge],\n    );\n\n    const deleteDocumentGroup = useCallback(\n        async (documentGroup: DocumentGroupDelete) => {\n            await appBridge.deleteDocumentGroup(documentGroup.id);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentGroup:Action', {\n                documentGroup,\n                action: 'delete',\n            });\n        },\n        [appBridge],\n    );\n\n    const createDocumentPage = useCallback(\n        async (documentPage: DocumentPageCreate) => {\n            const result = await appBridge.createDocumentPage(documentPage);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentPage:Action', {\n                documentPage: result,\n                action: 'add',\n            });\n\n            if (documentPage.categoryId) {\n                window.emitter.emit('AppBridge:GuidelineDocumentCategory:DocumentPageAction', {\n                    documentPage: {\n                        id: result.id,\n                        categoryId: documentPage.categoryId,\n                    },\n                    action: 'add',\n                });\n            }\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    /**\n     * A method for page update\n     *\n     * @param documentPage - {@link DocumentPageUpdate} object\n     * @requires id - Indicates page identifier.\n     *\n     *\n     * and at least one of\n     *\n     * @property  title - Indicates title of a page.\n     * @property  documentId - Indicates to witch document the page belongs to.\n     * @property  categoryId - Indicates to witch category the page belongs to.\n     * @property  visibility - Indicates whether the page is visible only to the editor or everyone.\n     * @property  linkUrl - Indicates whether the page is link or not.\n     */\n    const updateDocumentPage = useCallback(\n        async (documentPage: DocumentPageUpdate) => {\n            const result = await appBridge.updateDocumentPage(documentPage);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentPage:Action', {\n                documentPage: result,\n                action: 'update',\n            });\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const deleteDocumentPage = useCallback(\n        async (documentPage: DocumentPageDelete) => {\n            await appBridge.deleteDocumentPage(documentPage.id);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentPage:Action', {\n                documentPage: { ...documentPage, categoryId: documentPage.categoryId ?? null },\n                action: 'delete',\n            });\n\n            if (documentPage.categoryId) {\n                window.emitter.emit('AppBridge:GuidelineDocumentCategory:DocumentPageAction', {\n                    documentPage: { ...documentPage, categoryId: documentPage.categoryId },\n                    action: 'delete',\n                });\n            } else {\n                window.emitter.emit('AppBridge:GuidelineDocument:DocumentPageAction', {\n                    documentPage,\n                    action: 'delete',\n                });\n            }\n        },\n        [appBridge],\n    );\n\n    const duplicateDocumentPage = useCallback(\n        async ({ id, documentId, categoryId }: { id: number; documentId: number; categoryId?: number }) => {\n            const result = await appBridge.duplicateDocumentPage(id);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentPage:Action', {\n                documentPage: { ...result, title: result.name, documentId, categoryId } as unknown as DocumentPage,\n                action: 'add',\n            });\n\n            if (categoryId) {\n                window.emitter.emit('AppBridge:GuidelineDocumentCategory:DocumentPageAction', {\n                    documentPage: { id: result.id, categoryId },\n                    action: 'add',\n                });\n            }\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const createDocumentCategory = useCallback(\n        async (category: DocumentCategoryCreate) => {\n            const result = await appBridge.createDocumentCategory(category);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentCategory:Action', {\n                documentCategory: result,\n                action: 'add',\n            });\n\n            window.emitter.emit('AppBridge:GuidelineDocument:DocumentCategoryAction', {\n                documentCategory: result,\n                action: 'add',\n            });\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const updateDocumentCategory = useCallback(\n        async (category: DocumentCategoryUpdate) => {\n            const documentCategory = await appBridge.updateDocumentCategory(category);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentCategory:Action', {\n                documentCategory,\n                action: 'update',\n            });\n        },\n        [appBridge],\n    );\n\n    const deleteDocumentCategory = useCallback(\n        async (documentCategory: DocumentCategoryDelete) => {\n            await appBridge.deleteDocumentCategory(documentCategory.id);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentCategory:Action', {\n                documentCategory,\n                action: 'delete',\n            });\n\n            window.emitter.emit('AppBridge:GuidelineDocument:DocumentCategoryAction', {\n                documentCategory,\n                action: 'delete',\n            });\n        },\n        [appBridge],\n    );\n\n    const createCoverPage = useCallback(\n        async (coverPage: CoverPageCreate) => {\n            const result = await appBridge.createCoverPage(coverPage);\n\n            window.emitter.emit('AppBridge:GuidelineCoverPage:Action', {\n                coverPage: result,\n                action: 'add',\n            });\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const updateCoverPage = useCallback(\n        async (coverPage: CoverPageUpdate) => {\n            const result = await appBridge.updateCoverPage(coverPage);\n\n            window.emitter.emit('AppBridge:GuidelineCoverPage:Action', {\n                coverPage: result,\n                action: 'update',\n            });\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    /**\n     * @deprecated legacy method, should be removed once new endpoint is available\n     */\n    const updateLegacyCoverPage = useCallback(\n        async (coverPage: Partial<CoverPage>) => {\n            const legacyCoverPage: CoverPageUpdateLegacy = {\n                ...(coverPage.title && { brandhome_title: coverPage.title }),\n                ...(coverPage.draft !== undefined && { brandhome_draft: coverPage.draft }),\n                ...(coverPage.hideInNav !== undefined && { brandhome_hide_in_nav: coverPage.hideInNav }),\n            };\n\n            const result = await appBridge.updateLegacyCoverPage(legacyCoverPage);\n\n            window.emitter.emit('AppBridge:GuidelineCoverPage:Action', {\n                coverPage: coverPage as CoverPage,\n                action: 'update',\n            });\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const deleteCoverPage = useCallback(async () => {\n        await appBridge.deleteCoverPage();\n\n        window.emitter.emit('AppBridge:GuidelineCoverPage:Action', {\n            action: 'delete',\n        });\n    }, [appBridge]);\n\n    const updateBrandportalLink = useCallback(\n        async (brandportalLink: Partial<BrandportalLink>) => {\n            const result = await appBridge.updateBrandportalLink(brandportalLink);\n\n            if (result) {\n                window.emitter.emit('AppBridge:GuidelineBrandportalLink:Action', {\n                    brandportalLink: result as BrandportalLink,\n                    action: 'update',\n                });\n            }\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const moveDocument = useCallback(\n        async (\n            document: { id: number; sort?: Nullable<number>; documentGroupId?: Nullable<number> },\n            position: number,\n            newGroupId?: number,\n        ) => {\n            const previewUpdateChannel: keyof EmitterEvents = 'AppBridge:GuidelineDocument:MoveEvent';\n            window.emitter.emit(previewUpdateChannel, {\n                document,\n                position,\n                newGroupId,\n                action: 'movePreview',\n            });\n\n            const result = await appBridge.moveDocument(document.id, position, newGroupId);\n\n            const channel: keyof EmitterEvents = 'AppBridge:GuidelineDocument:Action';\n\n            // Emits in `useDocumentGroups` hook\n            if (document.documentGroupId === newGroupId) {\n                window.emitter.emit(channel, {\n                    document: { ...result, sort: position },\n                    action: 'move',\n                });\n            } else {\n                window.emitter.emit(channel, {\n                    document,\n                    action: 'delete',\n                });\n\n                window.emitter.emit(channel, {\n                    document: result,\n                    action: 'add',\n                });\n            }\n        },\n        [appBridge],\n    );\n\n    const moveDocumentGroup = useCallback(\n        async (documentGroup: { id: number; sort?: Nullable<number> }, position: number) => {\n            const previewUpdateChannel: keyof EmitterEvents = 'AppBridge:GuidelineDocumentGroup:MoveEvent';\n            window.emitter.emit(previewUpdateChannel, {\n                documentGroup,\n                position,\n                action: 'movePreview',\n            });\n\n            await appBridge.moveDocumentGroup(documentGroup.id, position);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentGroup:Action', {\n                documentGroup: { ...documentGroup, sort: position } as DocumentGroup,\n                action: 'update',\n            });\n        },\n        [appBridge],\n    );\n\n    const moveDocumentCategory = useCallback(\n        async (documentCategory: { id: number; sort?: Nullable<number> }, documentId: number, position: number) => {\n            const previewUpdateChannel: keyof EmitterEvents = 'AppBridge:GuidelineDocumentCategory:MoveEvent';\n            window.emitter.emit(previewUpdateChannel, {\n                documentCategory,\n                documentId,\n                position,\n                action: 'movePreview',\n            });\n\n            await appBridge.moveDocumentCategory(documentCategory.id, documentId, position);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentCategory:Action', {\n                documentCategory: { ...documentCategory, documentId, sort: position } as DocumentCategory,\n                action: 'update',\n            });\n        },\n        [appBridge],\n    );\n\n    const moveDocumentPage = useCallback(\n        async (\n            documentPage: {\n                id: number;\n                documentId: number;\n                sort?: Nullable<number>;\n                categoryId?: Nullable<number>;\n            },\n            documentId: number,\n            position?: number,\n            categoryId: Nullable<number> = null,\n        ) => {\n            const previewUpdateChannel: keyof EmitterEvents = 'AppBridge:GuidelineDocumentPage:MoveEvent';\n            window.emitter.emit(previewUpdateChannel, {\n                documentPage,\n                documentId,\n                position,\n                categoryId,\n                action: 'movePreview',\n            });\n\n            const result = await appBridge.moveDocumentPage(\n                documentPage.id,\n                documentId,\n                position,\n                categoryId ?? undefined,\n            );\n\n            const channel: keyof EmitterEvents = 'AppBridge:GuidelineDocumentPage:Action';\n\n            // Emits in `useCategorizedDocumentPages` and `useUncategorizedDocumentPages` hooks\n            if (documentPage.categoryId === categoryId && documentPage.documentId === documentId) {\n                window.emitter.emit(channel, {\n                    documentPage: { ...result, sort: position ?? result.sort },\n                    action: 'move',\n                });\n            } else {\n                window.emitter.emit(channel, {\n                    documentPage: { ...documentPage, categoryId: documentPage.categoryId ?? null },\n                    action: 'delete',\n                });\n\n                window.emitter.emit(channel, {\n                    documentPage: result,\n                    action: 'add',\n                });\n            }\n\n            // Emits in `useDocumentCategories` and `useDocuments` hook\n            const deleteChannel = documentPage.categoryId\n                ? 'AppBridge:GuidelineDocumentCategory:DocumentPageAction'\n                : 'AppBridge:GuidelineDocument:DocumentPageAction';\n\n            const addChannel = result.categoryId\n                ? 'AppBridge:GuidelineDocumentCategory:DocumentPageAction'\n                : 'AppBridge:GuidelineDocument:DocumentPageAction';\n\n            window.emitter.emit(deleteChannel, { documentPage, action: 'delete' });\n            window.emitter.emit(addChannel, { documentPage: result, action: 'add' });\n        },\n        [appBridge],\n    );\n\n    const updateDocumentPageTargets = useCallback(\n        async (targets: number[], documentPageIds: number[]) => {\n            const result = await appBridge.updateDocumentPageTargets(targets, documentPageIds);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentPageTargets:Action', {\n                payload: { targets, pageIds: documentPageIds },\n                action: 'update',\n            });\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    const updateDocumentTargets = useCallback(\n        async (targets: number[], documentIds: number[]) => {\n            const result = await appBridge.updateDocumentTargets(targets, documentIds);\n\n            window.emitter.emit('AppBridge:GuidelineDocumentTargets:Action', {\n                payload: { targets, documentIds },\n                action: 'update',\n            });\n\n            return result;\n        },\n        [appBridge],\n    );\n\n    return {\n        createLink,\n        updateLink,\n        deleteLink,\n        createDocumentPage,\n        updateDocumentPage,\n        deleteDocumentPage,\n        duplicateDocumentPage,\n        moveDocumentPage,\n        createLibrary,\n        updateLibrary,\n        deleteLibrary,\n        createDocumentCategory,\n        updateDocumentCategory,\n        deleteDocumentCategory,\n        moveDocumentCategory,\n        createCoverPage,\n        updateCoverPage,\n        deleteCoverPage,\n        updateLegacyCoverPage,\n        moveDocumentGroup,\n        createDocumentGroup,\n        updateDocumentGroup,\n        deleteDocumentGroup,\n        updateBrandportalLink,\n        createDocument: createStandardDocument,\n        updateDocument: updateStandardDocument,\n        deleteDocument: deleteStandardDocument,\n        moveDocument,\n        updateDocumentPageTargets,\n        updateDocumentTargets,\n    };\n};\n"],"names":["useGuidelineActions","appBridge","createLink","useCallback","link","result","updateLink","deleteLink","createLibrary","library","updateLibrary","deleteLibrary","createStandardDocument","document","updateStandardDocument","deleteStandardDocument","createDocumentGroup","documentGroup","updateDocumentGroup","documentGroupUpdate","deleteDocumentGroup","createDocumentPage","documentPage","updateDocumentPage","deleteDocumentPage","duplicateDocumentPage","id","documentId","categoryId","createDocumentCategory","category","updateDocumentCategory","documentCategory","deleteDocumentCategory","createCoverPage","coverPage","updateCoverPage","updateLegacyCoverPage","legacyCoverPage","deleteCoverPage","updateBrandportalLink","brandportalLink","moveDocument","position","newGroupId","previewUpdateChannel","channel","moveDocumentGroup","moveDocumentCategory","moveDocumentPage","deleteChannel","addChannel","updateDocumentPageTargets","targets","documentPageIds","updateDocumentTargets","documentIds"],"mappings":"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"}