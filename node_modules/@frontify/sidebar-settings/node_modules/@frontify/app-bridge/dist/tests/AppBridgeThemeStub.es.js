import se from "mitt";
import { spy as oe, stub as e } from "sinon";
import { GuidelineSearchResultDummy as p } from "./GuidelineSearchResultDummy.es.js";
import { CoverPageDummy as g } from "./CoverPageDummy.es.js";
import { DocumentDummy as s } from "./DocumentDummy.es.js";
import { DocumentGroupDummy as i } from "./DocumentGroupDummy.es.js";
import { DocumentPageDummy as r, DocumentPageDuplicateDummy as re } from "./DocumentPageDummy.es.js";
import { DocumentCategoryDummy as D } from "./DocumentCategoryDummy.es.js";
import { DocumentSectionDummy as v } from "./DocumentSectionDummy.es.js";
import { ColorPaletteDummy as P } from "./ColorPaletteDummy.es.js";
import { ColorDummy as C } from "./ColorDummy.es.js";
import { DocumentTargetsDummy as ae, DocumentPageTargetsDummy as le, UpdateTargetsDummy as y } from "./TargetsDummy.es.js";
import { BrandportalLinkDummy as A } from "./BrandportalLinkDummy.es.js";
import { mergeDeep as h } from "../utilities/object.es.js";
import { AssetDummy as ne } from "./AssetDummy.es.js";
const ce = 234551, me = 3452, O = 7777, m = 5332, ie = 95694, De = 345882, _ = 6456, G = 34532, U = 3455345, N = 2342, F = 2343445, M = 2434, L = 552, S = 1145, R = 32345, E = 147, ue = 258, de = 369, w = 23442, f = 235345, k = 12352, b = 55221, B = 24324, K = 3532, Y = 98954, ge = 3421, he = 65725, _e = 95934, we = 2341, Z = 653543, $ = 23411, j = 56657, Le = ({
  editorState: x = !1,
  brandId: z = ce,
  portalId: J = O,
  projectId: H = me,
  pageTemplateSettings: Q = {},
  pageTemplateAssets: u = {},
  themeSettings: V = {},
  language: W = "en",
  openAssetChooser: X = () => null,
  closeAssetChooser: q = () => null
} = {}) => {
  window.emitter = oe(se());
  let a = Q, I = V;
  const l = {}, n = {}, d = async () => Object.entries(u).reduce((t, [o, c]) => {
    const ee = n[o] ?? [], te = l[o] ?? [];
    return t[o] = [
      ...c.filter((T) => !te.includes(T.id)),
      ...ee.map((T) => ne.with(T))
    ], t;
  }, {});
  return {
    getPortalId: e().returns(J),
    getProjectId: e().returns(H),
    getEditorState: e().returns(x),
    getCoverPage: e().resolves(g.with(O)),
    getAllDocuments: e().resolves([
      s.with(_),
      s.with(G),
      s.with(U),
      s.with(N),
      s.with(F),
      s.withDocumentGroupId(M, m),
      s.withDocumentGroupId(L, m),
      s.withDocumentGroupId(S, m),
      s.withDocumentGroupId(R, m)
    ]),
    getUngroupedDocuments: e().resolves([
      s.with(_),
      s.with(G),
      s.with(U),
      s.with(N),
      s.with(F)
    ]),
    getDocumentsByDocumentGroupId: e().resolves([
      s.withDocumentGroupId(M, m),
      s.withDocumentGroupId(L, m),
      s.withDocumentGroupId(S, m),
      s.withDocumentGroupId(R, m)
    ]),
    getDocumentGroups: e().resolves([
      i.with(m, 3),
      i.with(ie, 0),
      i.with(De, 2)
    ]),
    getDocumentPagesByDocumentId: e().resolves([
      r.with(w),
      r.with(f),
      r.with(B),
      r.with(k),
      r.with(K),
      r.with(b),
      r.with(Y)
    ]),
    getDocumentPagesByDocumentCategoryId: e().callsFake(
      (t) => Promise.resolve([
        r.withFields({ id: w, categoryId: t, sort: 1 }),
        r.withFields({ id: f, categoryId: t, sort: 2 }),
        r.withFields({ id: k, categoryId: t, sort: 3 }),
        r.withFields({ id: b, categoryId: t, sort: 4 })
      ])
    ),
    getDocumentCategoriesByDocumentId: e().callsFake(
      (t) => Promise.resolve([
        D.withDocumentIdAndNumberOfDocumentPages(E, t, 2),
        D.withDocumentIdAndNumberOfDocumentPages(ue, t, 0),
        D.withDocumentIdAndNumberOfDocumentPages(de, t, 2)
      ])
    ),
    getUncategorizedDocumentPagesByDocumentId: e().callsFake(
      (t) => Promise.resolve([
        r.withFields({
          id: B,
          documentId: t,
          categoryId: null,
          sort: 1
        }),
        r.withFields({
          id: K,
          documentId: t,
          categoryId: null,
          sort: 2
        }),
        r.withFields({
          id: Y,
          documentId: t,
          categoryId: null,
          sort: 3
        })
      ])
    ),
    getDocumentSectionsByDocumentPageId: e().resolves([
      v.with(ge),
      v.with(he),
      v.with(_e)
    ]),
    getColorPalettes: e().resolves([
      P.with(678, "Palette 1"),
      P.with(427, "Palette 2"),
      P.with(679, "Palette 3")
    ]),
    getColorsByColorPaletteId: e().resolves([
      C.red(9834),
      C.green(342),
      C.yellow(9314)
    ]),
    duplicateDocumentPage: e().resolves(
      re.with(we)
    ),
    getDocumentTargets: e().resolves(
      ae.with(_)
    ),
    getDocumentPageTargets: e().resolves(
      le.with(w)
    ),
    addAssetIdsToCoverPageTemplateAssetKey: e().callsFake(async (t, o) => (n[t] = [...n[t] ?? [], ...o], u)),
    addAssetIdsToThemeAssetKey: e().callsFake(
      async (t, o) => (n[t] = [...n[t] ?? [], ...o], u)
    ),
    addAssetIdsToLibraryPageTemplateAssetKey: e().callsFake(async (t, o, c) => (n[o] = [...n[o] ?? [], ...c], u)),
    addAssetIdsToDocumentPageTemplateAssetKey: e().callsFake(async (t, o, c) => (n[o] = [...n[o] ?? [], ...c], u)),
    getCoverPageTemplateAssets: e().callsFake(d),
    getThemeAssets: e().callsFake(d),
    getLibraryPageTemplateAssets: e().callsFake(d),
    getDocumentPageTemplateAssets: e().callsFake(d),
    deleteAssetIdsFromCoverPageTemplateAssetKey: e().callsFake(async (t, o) => {
      l[t] = [...l[t] ?? [], ...o];
    }),
    deleteAssetIdsFromThemeAssetKey: e().callsFake(async (t, o) => {
      l[t] = [...l[t] ?? [], ...o];
    }),
    deleteAssetIdsFromLibraryPageTemplateAssetKey: e().callsFake(async (t, o, c) => {
      l[o] = [...l[o] ?? [], ...c];
    }),
    deleteAssetIdsFromDocumentPageTemplateAssetKey: e().callsFake(async (t, o, c) => {
      l[o] = [...l[o] ?? [], ...c];
    }),
    getCoverPageTemplateSettings: e().resolves(a),
    getDocumentPageTemplateSettings: e().resolves(a),
    getLibraryPageTemplateSettings: e().resolves(a),
    getThemeSettings: e().resolves(I),
    createLink: e().resolves(s.with(1)),
    createLibrary: e().resolves(s.with(1)),
    createStandardDocument: e().resolves(
      s.with(1)
    ),
    createDocumentPage: e().resolves(
      r.with(1)
    ),
    createDocumentGroup: e().resolves(
      i.with(1, 0)
    ),
    createDocumentCategory: e().resolves(
      D.with(1)
    ),
    createCoverPage: e().resolves(g.with(1)),
    updateLink: e().resolves(s.with(1)),
    updateLibrary: e().resolves(s.with(1)),
    updateStandardDocument: e().resolves(
      s.with(1)
    ),
    updateDocumentPage: e().resolves(
      r.with(1)
    ),
    updateDocumentGroup: e().resolves(
      i.with(1, 0)
    ),
    updateDocumentCategory: e().resolves(
      D.with(1)
    ),
    updateCoverPage: e().resolves(g.with(1)),
    updateLegacyCoverPage: e().resolves(
      g.withLegacy(1)
    ),
    updateBrandportalLink: e().resolves(
      A.with()
    ),
    updateCoverPageTemplateSettings: e().callsFake(async (t) => {
      a = h(a, t);
    }),
    updateDocumentPageTemplateSettings: e().callsFake(async (t) => {
      a = h(a, t);
    }),
    updateLibraryPageTemplateSettings: e().callsFake(async (t) => {
      a = h(a, t);
    }),
    updateThemeSettings: e().callsFake(
      async (t) => {
        I = h(I, t);
      }
    ),
    deleteCoverPage: e().resolves(),
    deleteDocumentCategory: e().resolves(),
    deleteDocumentGroup: e().resolves(),
    deleteDocumentPage: e().resolves(),
    deleteLibrary: e().resolves(),
    deleteLink: e().resolves(),
    deleteStandardDocument: e().resolves(),
    getBrandId: e().returns(z),
    getBrandportalLink: e().resolves(
      A.with()
    ),
    getTranslationLanguage: e().returns(W),
    moveDocument: e().resolves(s.with(_)),
    moveDocumentCategory: e().resolves(
      D.with(E)
    ),
    moveDocumentGroup: e().resolves(
      i.with(E, 0)
    ),
    moveDocumentPage: e().resolves(
      r.with(w)
    ),
    openNavigationManager: e(),
    updateDocumentPageTargets: e().resolves(
      y.with([Z, $, j])
    ),
    updateDocumentTargets: e().resolves(
      y.with([Z, $, j])
    ),
    searchInGuideline: e().callsFake(async (t) => Promise.resolve([
      p.with(`${t}-1`),
      p.with(`${t}-1`),
      p.with(`${t}-3`)
    ])),
    closeAssetChooser: e().callsFake(() => {
      q();
    }),
    openAssetChooser: e().callsFake((t) => {
      X(t);
    }),
    api: e().resolves(),
    state: e().resolves(),
    context: e().resolves(),
    subscribe: e().resolves(),
    dispatch: e().resolves()
  };
};
export {
  Le as getAppBridgeThemeStub
};
//# sourceMappingURL=AppBridgeThemeStub.es.js.map
