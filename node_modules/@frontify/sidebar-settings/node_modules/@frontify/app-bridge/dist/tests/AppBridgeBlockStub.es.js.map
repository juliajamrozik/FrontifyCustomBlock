{"version":3,"file":"AppBridgeBlockStub.es.js","sources":["../../src/tests/AppBridgeBlockStub.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport mitt, { Emitter } from 'mitt';\nimport { SinonStubbedInstance, spy, stub } from 'sinon';\nimport { AppBridgeBlock } from '../AppBridgeBlock';\nimport { Template, TemplateLegacy, User } from '../types';\nimport { EmitterEvents } from '../types/Emitter';\nimport type { Asset } from '../types/Asset';\nimport { AssetDummy } from './AssetDummy';\nimport { UserDummy } from './UserDummy';\nimport { ColorPaletteDummy } from './ColorPaletteDummy';\nimport { ColorDummy } from './ColorDummy';\nimport { BulkDownloadDummy } from './BulkDownloadDummy';\nimport { PrivacySettings } from '../types/PrivacySettings';\nimport { TemplateDummy } from './TemplateDummy';\n\nconst BLOCK_ID = 3452;\nconst SECTION_ID = 2341;\nconst USER_ID = 4561;\nconst PROJECT_ID = 345214;\n\nexport type getAppBridgeBlockStubProps = {\n    blockSettings?: Record<string, unknown>;\n    blockAssets?: Record<string, Asset[]>;\n    editorState?: boolean;\n    openAssetChooser?: (callback: Parameters<AppBridgeBlock['openAssetChooser']>[0]) => void;\n    closeAssetChooser?: () => void;\n    blockId?: number;\n    sectionId?: number;\n    projectId?: number;\n    user?: User;\n    language?: string;\n    privacySettings?: PrivacySettings;\n    blockTemplates?: Record<string, Template[]>;\n};\n\nexport const getAppBridgeBlockStub = ({\n    blockSettings = {},\n    blockAssets = {},\n    editorState = false,\n    openAssetChooser = () => null,\n    closeAssetChooser = () => null,\n    blockId = BLOCK_ID,\n    sectionId = SECTION_ID,\n    projectId = PROJECT_ID,\n    user = UserDummy.with(USER_ID),\n    language = 'en',\n    privacySettings = {\n        assetViewerEnabled: false,\n        assetDownloadEnabled: false,\n    },\n    blockTemplates = {},\n}: getAppBridgeBlockStubProps = {}): SinonStubbedInstance<AppBridgeBlock> => {\n    window.emitter = spy(mitt()) as unknown as Emitter<EmitterEvents>;\n\n    window.blockSettings ??= {};\n    window.blockSettings[blockId] = blockSettings;\n\n    const deletedAssetIds: Record<string, number[]> = {};\n    const addedAssetIds: Record<string, number[]> = {};\n    const deletedTemplateIds: Record<string, number[]> = {};\n    const addedTemplateIds: Record<string, number[]> = {};\n\n    return {\n        getBlockId: stub<Parameters<AppBridgeBlock['getBlockId']>>().returns(blockId),\n        getSectionId: stub<Parameters<AppBridgeBlock['getSectionId']>>().returns(sectionId),\n        getProjectId: stub<Parameters<AppBridgeBlock['getProjectId']>>().returns(projectId),\n        getEditorState: stub<Parameters<AppBridgeBlock['getEditorState']>>().returns(editorState),\n        getBlockSettings: stub<Parameters<AppBridgeBlock['getBlockSettings']>>().resolves(window.blockSettings),\n        getAvailablePalettes: stub<Parameters<AppBridgeBlock['getAvailablePalettes']>>().resolves([\n            ColorPaletteDummy.with(678, 'Palette 1'),\n            ColorPaletteDummy.with(427, 'Palette 2'),\n            ColorPaletteDummy.with(679, 'Palette 3'),\n        ]),\n        getColorPalettes: stub<Parameters<AppBridgeBlock['getColorPalettes']>>().resolves([\n            ColorPaletteDummy.with(678, 'Palette 1'),\n            ColorPaletteDummy.with(427, 'Palette 2'),\n            ColorPaletteDummy.with(679, 'Palette 3'),\n        ]),\n        createColorPalette: stub<Parameters<AppBridgeBlock['createColorPalette']>>().resolves(\n            ColorPaletteDummy.with(678),\n        ),\n        updateColorPalette: stub<Parameters<AppBridgeBlock['updateColorPalette']>>().resolves(\n            ColorPaletteDummy.with(678),\n        ),\n        getColorsByIds: stub<Parameters<AppBridgeBlock['getColorsByIds']>>().resolves([\n            ColorDummy.red(9834),\n            ColorDummy.green(342),\n            ColorDummy.yellow(9314),\n        ]),\n        getColorsByColorPaletteId: stub<Parameters<AppBridgeBlock['getColorsByColorPaletteId']>>().resolves([\n            ColorDummy.red(9834),\n            ColorDummy.green(342),\n            ColorDummy.yellow(9314),\n        ]),\n        getColorPalettesWithColors: stub<Parameters<AppBridgeBlock['getColorPalettesWithColors']>>().resolves([\n            ColorPaletteDummy.with(678, 'Palette 1'),\n            ColorPaletteDummy.with(427, 'Palette 2'),\n            ColorPaletteDummy.with(679, 'Palette 3'),\n        ]),\n        deleteColorPalette: stub<Parameters<AppBridgeBlock['deleteColorPalette']>>().resolves(),\n        getAvailableColors: stub<Parameters<AppBridgeBlock['getAvailableColors']>>().resolves([]),\n        getCurrentLoggedUser: stub<Parameters<AppBridgeBlock['getCurrentLoggedUser']>>().resolves(user),\n        downloadColorKit: stub<Parameters<AppBridgeBlock['downloadColorKit']>>().returns(\n            `/api/color/export/${PROJECT_ID}/zip/500`,\n        ),\n        getAssetById: stub<Parameters<AppBridgeBlock['getAssetById']>>().callsFake((assetId) =>\n            Promise.resolve(AssetDummy.with(assetId)),\n        ),\n        closeAssetChooser: stub<Parameters<AppBridgeBlock['closeAssetChooser']>>().callsFake(() => {\n            closeAssetChooser();\n        }),\n        openAssetChooser: stub<Parameters<AppBridgeBlock['openAssetChooser']>>().callsFake((callback) => {\n            openAssetChooser(callback);\n        }),\n        getBlockAssets: stub<Parameters<AppBridgeBlock['getBlockAssets']>>().callsFake(async () => {\n            return Object.entries(blockAssets).reduce<Record<string, Asset[]>>((assetsDiff, [key, assets]) => {\n                const addedAssetIdsList = addedAssetIds[key] ?? [];\n                const deletedAssetIdsList = deletedAssetIds[key] ?? [];\n                assetsDiff[key] = [\n                    ...assets.filter((asset) => !deletedAssetIdsList.includes(asset.id)),\n                    ...addedAssetIdsList.map((id) => AssetDummy.with(id)),\n                ];\n                return assetsDiff;\n            }, {});\n        }),\n        addAssetIdsToBlockAssetKey: stub<Parameters<AppBridgeBlock['addAssetIdsToBlockAssetKey']>>().callsFake(\n            async (key, assetsIds) => {\n                addedAssetIds[key] = [...(addedAssetIds[key] ?? []), ...assetsIds];\n            },\n        ),\n        deleteAssetIdsFromBlockAssetKey: stub<\n            Parameters<AppBridgeBlock['deleteAssetIdsFromBlockAssetKey']>\n        >().callsFake(async (key, assetIds) => {\n            deletedAssetIds[key] = [...(deletedAssetIds[key] ?? []), ...assetIds];\n        }),\n        getBlockTemplates: stub<Parameters<AppBridgeBlock['getBlockTemplates']>>().callsFake(async () => {\n            return Object.entries(blockTemplates).reduce<Record<string, Template[]>>(\n                (templatesDiff, [key, templates]) => {\n                    const addedTemplateIdsList = addedTemplateIds[key] ?? [];\n                    const deletedTemplateIdsList = deletedTemplateIds[key] ?? [];\n                    templatesDiff[key] = [\n                        ...templates.filter((template) => !deletedTemplateIdsList.includes(template.id)),\n                        ...addedTemplateIdsList.map((id) => TemplateDummy.with(id)),\n                    ];\n                    return templatesDiff;\n                },\n                {},\n            );\n        }),\n        addTemplateIdsToBlockTemplateKey: stub<\n            Parameters<AppBridgeBlock['addTemplateIdsToBlockTemplateKey']>\n        >().callsFake(async (key, templateIds) => {\n            addedTemplateIds[key] = [...(addedTemplateIds[key] ?? []), ...templateIds];\n        }),\n        deleteTemplateIdsFromBlockTemplateKey: stub<\n            Parameters<AppBridgeBlock['deleteTemplateIdsFromBlockTemplateKey']>\n        >().callsFake(async (key, templateIds) => {\n            deletedTemplateIds[key] = [...(deletedTemplateIds[key] ?? []), ...templateIds];\n        }),\n        getTranslationLanguage: stub<Parameters<AppBridgeBlock['getTranslationLanguage']>>().returns(language),\n        getColors: stub<Parameters<AppBridgeBlock['getColors']>>().resolves([\n            ColorDummy.red(9834),\n            ColorDummy.green(342),\n            ColorDummy.yellow(9314),\n        ]),\n        updateColor: stub<Parameters<AppBridgeBlock['updateColor']>>().callsFake((colorId) =>\n            Promise.resolve(ColorDummy.red(colorId)),\n        ),\n\n        getBulkDownloadToken: stub<Parameters<AppBridgeBlock['getBulkDownloadToken']>>().resolves('token'),\n        getBulkDownloadBySignature: stub<Parameters<AppBridgeBlock['getBulkDownloadBySignature']>>().resolves(\n            BulkDownloadDummy.default(),\n        ),\n        getBulkDownloadByToken: stub<Parameters<AppBridgeBlock['getBulkDownloadByToken']>>().resolves(\n            BulkDownloadDummy.default(),\n        ),\n        getPrivacySettings: stub<Parameters<AppBridgeBlock['getPrivacySettings']>>().returns(privacySettings),\n\n        // TODO: Stub the following methods\n        closeTemplateChooser: stub<Parameters<AppBridgeBlock['closeTemplateChooser']>>(),\n        openTemplateChooser: stub<Parameters<AppBridgeBlock['openTemplateChooser']>>(),\n        createColor: stub<Parameters<AppBridgeBlock['createColor']>>().resolves(ColorDummy.red()),\n        deleteColor: stub<Parameters<AppBridgeBlock['deleteColor']>>().resolves(),\n        getTemplateById: stub<Parameters<AppBridgeBlock['getTemplateById']>>().resolves({} as TemplateLegacy),\n        openAssetViewer: stub<Parameters<AppBridgeBlock['openAssetViewer']>>(),\n        updateBlockSettings: stub<Parameters<AppBridgeBlock['updateBlockSettings']>>().resolves(),\n        getAllDocuments: stub<Parameters<AppBridgeBlock['getAllDocuments']>>().resolves(),\n        getUngroupedDocuments: stub<Parameters<AppBridgeBlock['getUngroupedDocuments']>>().resolves(),\n        getDocumentsByDocumentGroupId: stub<Parameters<AppBridgeBlock['getDocumentsByDocumentGroupId']>>().resolves(),\n        getDocumentGroups: stub<Parameters<AppBridgeBlock['getDocumentGroups']>>().resolves(),\n        getDocumentPagesByDocumentId: stub<Parameters<AppBridgeBlock['getDocumentPagesByDocumentId']>>().resolves(),\n        getDocumentPagesByDocumentCategoryId:\n            stub<Parameters<AppBridgeBlock['getDocumentPagesByDocumentCategoryId']>>().resolves(),\n        getDocumentCategoriesByDocumentId:\n            stub<Parameters<AppBridgeBlock['getDocumentCategoriesByDocumentId']>>().resolves(),\n        getUncategorizedDocumentPagesByDocumentId:\n            stub<Parameters<AppBridgeBlock['getUncategorizedDocumentPagesByDocumentId']>>().resolves(),\n        getDocumentSectionsByDocumentPageId:\n            stub<Parameters<AppBridgeBlock['getDocumentSectionsByDocumentPageId']>>().resolves(),\n        getDocumentTargets: stub<Parameters<AppBridgeBlock['getDocumentTargets']>>().resolves(),\n        getDocumentPageTargets: stub<Parameters<AppBridgeBlock['getDocumentPageTargets']>>().resolves(),\n        api: stub<Parameters<AppBridgeBlock['api']>>().resolves(),\n        state: stub<Parameters<AppBridgeBlock['state']>>().resolves(),\n        context: stub<Parameters<AppBridgeBlock['context']>>().resolves(),\n        subscribe: stub<Parameters<AppBridgeBlock['subscribe']>>().resolves(),\n        dispatch: stub<Parameters<AppBridgeBlock['dispatch']>>().resolves(),\n    };\n};\n"],"names":["BLOCK_ID","SECTION_ID","USER_ID","PROJECT_ID","getAppBridgeBlockStub","blockSettings","blockAssets","editorState","openAssetChooser","closeAssetChooser","blockId","sectionId","projectId","user","UserDummy","language","privacySettings","blockTemplates","spy","mitt","deletedAssetIds","addedAssetIds","deletedTemplateIds","addedTemplateIds","stub","ColorPaletteDummy","ColorDummy","assetId","AssetDummy","callback","assetsDiff","key","assets","addedAssetIdsList","deletedAssetIdsList","asset","id","assetsIds","assetIds","templatesDiff","templates","addedTemplateIdsList","deletedTemplateIdsList","template","TemplateDummy","templateIds","colorId","BulkDownloadDummy"],"mappings":"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"}