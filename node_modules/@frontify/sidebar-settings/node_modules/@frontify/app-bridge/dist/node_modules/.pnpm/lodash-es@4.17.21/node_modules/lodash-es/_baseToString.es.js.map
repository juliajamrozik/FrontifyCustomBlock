{"version":3,"file":"_baseToString.es.js","sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseToString.js"],"sourcesContent":["import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n"],"names":["INFINITY","symbolProto","Symbol","symbolToString","baseToString","value","isArray","arrayMap","isSymbol","result"],"mappings":";;;;AAMA,IAAIA,IAAW,IAAI,GAGfC,IAAcC,IAASA,EAAO,YAAY,QAC1CC,IAAiBF,IAAcA,EAAY,WAAW;AAU1D,SAASG,EAAaC,GAAO;AAE3B,MAAI,OAAOA,KAAS;AAClB,WAAOA;AAET,MAAIC,EAAQD,CAAK;AAEf,WAAOE,EAASF,GAAOD,CAAY,IAAI;AAEzC,MAAII,EAASH,CAAK;AAChB,WAAOF,IAAiBA,EAAe,KAAKE,CAAK,IAAI;AAEvD,MAAII,IAAUJ,IAAQ;AACtB,SAAQI,KAAU,OAAQ,IAAIJ,KAAU,CAACL,IAAY,OAAOS;AAC9D;","x_google_ignoreList":[0]}