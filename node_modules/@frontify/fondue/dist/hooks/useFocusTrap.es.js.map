{"version":3,"file":"useFocusTrap.es.js","sources":["../../src/hooks/useFocusTrap.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useCallback, useEffect } from 'react';\n\nexport const TABBABLE_ELEMENTS = [\n    'input:not([disabled]):not([type=hidden])',\n    'select:not([disabled])',\n    'textarea:not([disabled])',\n    'button:not([disabled])',\n    'a[href]',\n    'area[href]',\n    'summary',\n    'iframe',\n    'object',\n    'embed',\n    'audio[controls]',\n    'video[controls]',\n    '[contenteditable]',\n    '[tabindex]:not([tabindex=\"-1\"]):not([disabled])',\n].join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nexport const useFocusTrap = (reference: HTMLElement | null, isOpen: boolean, ignoreFocusTrap = false) => {\n    const handleFocus = useCallback(\n        (event: KeyboardEvent) => {\n            const focusableElements = reference?.querySelectorAll(TABBABLE_ELEMENTS) ?? [],\n                firstFocusableElement = focusableElements[0] as HTMLElement,\n                lastFocusableElement = focusableElements[focusableElements.length - 1] as HTMLElement,\n                lastFocusedElement = (document.activeElement ?? document.body) as HTMLElement,\n                isTabPressed = event.key === 'Tab';\n\n            if (!reference || focusableElements.length === 0 || !isTabPressed || ignoreFocusTrap) {\n                return;\n            }\n\n            if (![...focusableElements].includes(lastFocusedElement)) {\n                firstFocusableElement.focus();\n                event.preventDefault();\n            }\n\n            if (!event.shiftKey && event.target === lastFocusableElement) {\n                firstFocusableElement.focus();\n                event.preventDefault();\n            }\n\n            if (event.shiftKey && event.target === firstFocusableElement) {\n                lastFocusableElement.focus();\n                event.preventDefault();\n            }\n        },\n        [ignoreFocusTrap, reference],\n    );\n\n    useEffect(() => {\n        const lastFocusedOutsideBoundaries = (document.activeElement ?? document.body) as HTMLElement;\n        if (isOpen) {\n            window.addEventListener('keydown', handleFocus);\n        }\n\n        return () => {\n            window.removeEventListener('keydown', handleFocus);\n            if (!ignoreFocusTrap) {\n                lastFocusedOutsideBoundaries.focus();\n            }\n        };\n    }, [handleFocus, ignoreFocusTrap, isOpen]);\n\n    return reference;\n};\n"],"names":["TABBABLE_ELEMENTS","useFocusTrap","reference","isOpen","ignoreFocusTrap","handleFocus","useCallback","event","focusableElements","firstFocusableElement","lastFocusableElement","lastFocusedElement","isTabPressed","useEffect","lastFocusedOutsideBoundaries"],"mappings":";AAIO,MAAMA,IAAoB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,EAAE,KAAK,sCAAsC,GAEhCC,IAAe,CAACC,GAA+BC,GAAiBC,IAAkB,OAAU;AACrG,QAAMC,IAAcC;AAAA,IAChB,CAACC,MAAyB;AAChB,YAAAC,KAAoBN,KAAA,gBAAAA,EAAW,iBAAiBF,OAAsB,IACxES,IAAwBD,EAAkB,CAAC,GAC3CE,IAAuBF,EAAkBA,EAAkB,SAAS,CAAC,GACrEG,IAAsB,SAAS,iBAAiB,SAAS,MACzDC,IAAeL,EAAM,QAAQ;AAEjC,MAAI,CAACL,KAAaM,EAAkB,WAAW,KAAK,CAACI,KAAgBR,MAIhE,CAAC,GAAGI,CAAiB,EAAE,SAASG,CAAkB,MACnDF,EAAsB,MAAM,GAC5BF,EAAM,eAAe,IAGrB,CAACA,EAAM,YAAYA,EAAM,WAAWG,MACpCD,EAAsB,MAAM,GAC5BF,EAAM,eAAe,IAGrBA,EAAM,YAAYA,EAAM,WAAWE,MACnCC,EAAqB,MAAM,GAC3BH,EAAM,eAAe;AAAA,IAE7B;AAAA,IACA,CAACH,GAAiBF,CAAS;AAAA,EAAA;AAG/B,SAAAW,EAAU,MAAM;AACN,UAAAC,IAAgC,SAAS,iBAAiB,SAAS;AACzE,WAAIX,KACO,OAAA,iBAAiB,WAAWE,CAAW,GAG3C,MAAM;AACF,aAAA,oBAAoB,WAAWA,CAAW,GAC5CD,KACDU,EAA6B,MAAM;AAAA,IACvC;AAAA,EAEL,GAAA,CAACT,GAAaD,GAAiBD,CAAM,CAAC,GAElCD;AACX;"}