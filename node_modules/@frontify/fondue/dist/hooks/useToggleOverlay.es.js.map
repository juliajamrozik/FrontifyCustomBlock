{"version":3,"file":"useToggleOverlay.es.js","sources":["../../src/hooks/useToggleOverlay.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useCallback, useEffect, useState } from 'react';\n\nexport const useToggleOverlay = (\n    initialState = false,\n    { isBlockingModal }: { isBlockingModal?: boolean } = { isBlockingModal: false },\n): [boolean, (value: boolean) => void] => {\n    const [open, setOpen] = useState<boolean>(initialState);\n    const checkKeyboardEvent = useCallback(\n        (event: KeyboardEvent) => {\n            if (open && !isBlockingModal && event.key === 'Escape') {\n                setOpen(false);\n            }\n        },\n        [isBlockingModal, open],\n    );\n\n    useEffect(() => {\n        window.addEventListener('keydown', checkKeyboardEvent);\n\n        return () => {\n            window.removeEventListener('keydown', checkKeyboardEvent);\n        };\n    }, [checkKeyboardEvent, isBlockingModal]);\n\n    const handler = useCallback((value: boolean): void => setOpen(value), []);\n    return [open, handler];\n};\n"],"names":["useToggleOverlay","initialState","isBlockingModal","open","setOpen","useState","checkKeyboardEvent","useCallback","event","useEffect","handler","value"],"mappings":";AAIa,MAAAA,IAAmB,CAC5BC,IAAe,IACf,EAAE,iBAAAC,MAAmD,EAAE,iBAAiB,SAClC;AACtC,QAAM,CAACC,GAAMC,CAAO,IAAIC,EAAkBJ,CAAY,GAChDK,IAAqBC;AAAA,IACvB,CAACC,MAAyB;AACtB,MAAIL,KAAQ,CAACD,KAAmBM,EAAM,QAAQ,YAC1CJ,EAAQ,EAAK;AAAA,IAErB;AAAA,IACA,CAACF,GAAiBC,CAAI;AAAA,EAAA;AAG1B,EAAAM,EAAU,OACC,OAAA,iBAAiB,WAAWH,CAAkB,GAE9C,MAAM;AACF,WAAA,oBAAoB,WAAWA,CAAkB;AAAA,EAAA,IAE7D,CAACA,GAAoBJ,CAAe,CAAC;AAElC,QAAAQ,IAAUH,EAAY,CAACI,MAAyBP,EAAQO,CAAK,GAAG,CAAA,CAAE;AACjE,SAAA,CAACR,GAAMO,CAAO;AACzB;"}