{"version":3,"file":"_equalByTag.es.js","sources":["../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_equalByTag.js"],"sourcesContent":["import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n"],"names":["COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","boolTag","dateTag","errorTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","symbolProto","Symbol","symbolValueOf","equalByTag","object","other","tag","bitmask","customizer","equalFunc","stack","Uint8Array","eq","convert","mapToArray","isPartial","setToArray","stacked","result","equalArrays"],"mappings":";;;;;;AAQA,IAAIA,IAAuB,GACvBC,IAAyB,GAGzBC,IAAU,oBACVC,IAAU,iBACVC,IAAW,kBACXC,IAAS,gBACTC,IAAY,mBACZC,IAAY,mBACZC,IAAS,gBACTC,IAAY,mBACZC,IAAY,mBAEZC,IAAiB,wBACjBC,IAAc,qBAGdC,IAAcC,IAASA,EAAO,YAAY,QAC1CC,IAAgBF,IAAcA,EAAY,UAAU;AAmBxD,SAASG,EAAWC,GAAQC,GAAOC,GAAKC,GAASC,GAAYC,GAAWC,GAAO;AAC7E,UAAQJ,GAAG;AAAA,IACT,KAAKP;AACH,UAAKK,EAAO,cAAcC,EAAM,cAC3BD,EAAO,cAAcC,EAAM;AAC9B,eAAO;AAET,MAAAD,IAASA,EAAO,QAChBC,IAAQA,EAAM;AAAA,IAEhB,KAAKP;AACH,aAAK,EAAAM,EAAO,cAAcC,EAAM,cAC5B,CAACI,EAAU,IAAIE,EAAWP,CAAM,GAAG,IAAIO,EAAWN,CAAK,CAAC;AAAA,IAK9D,KAAKhB;AAAA,IACL,KAAKC;AAAA,IACL,KAAKG;AAGH,aAAOmB,EAAG,CAACR,GAAQ,CAACC,CAAK;AAAA,IAE3B,KAAKd;AACH,aAAOa,EAAO,QAAQC,EAAM,QAAQD,EAAO,WAAWC,EAAM;AAAA,IAE9D,KAAKX;AAAA,IACL,KAAKE;AAIH,aAAOQ,KAAWC,IAAQ;AAAA,IAE5B,KAAKb;AACH,UAAIqB,IAAUC;AAAA,IAEhB,KAAKnB;AACH,UAAIoB,IAAYR,IAAUpB;AAG1B,UAFA0B,MAAYA,IAAUG,IAElBZ,EAAO,QAAQC,EAAM,QAAQ,CAACU;AAChC,eAAO;AAGT,UAAIE,IAAUP,EAAM,IAAIN,CAAM;AAC9B,UAAIa;AACF,eAAOA,KAAWZ;AAEpB,MAAAE,KAAWnB,GAGXsB,EAAM,IAAIN,GAAQC,CAAK;AACvB,UAAIa,IAASC,EAAYN,EAAQT,CAAM,GAAGS,EAAQR,CAAK,GAAGE,GAASC,GAAYC,GAAWC,CAAK;AAC/F,aAAAA,EAAM,OAAUN,CAAM,GACfc;AAAA,IAET,KAAKrB;AACH,UAAIK;AACF,eAAOA,EAAc,KAAKE,CAAM,KAAKF,EAAc,KAAKG,CAAK;AAAA,EAElE;AACD,SAAO;AACT;","x_google_ignoreList":[0]}