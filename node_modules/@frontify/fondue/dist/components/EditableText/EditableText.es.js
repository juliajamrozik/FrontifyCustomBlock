import l, { useState as b, useRef as N, useEffect as S } from "react";
import { EditableTextHelper as T } from "./lib/helper.es.js";
import { FOCUS_VISIBLE_STYLE as h } from "../../utilities/focusStyle.es.js";
import { merge as r } from "../../utilities/merge.es.js";
var A = /* @__PURE__ */ ((a) => (a.INPUT = "INPUT", a.LABEL = "LABEL", a))(A || {});
const R = ({
  onEditableSave: a,
  onModeChange: u,
  onAdditionalValueSave: E,
  children: c,
  options: e,
  isOverflowing: m = !1,
  "data-test-id": B = "editable-node-container"
}) => {
  const d = T.getLabel(c), [x, I] = b(d), [w, n] = b(
    "LABEL"
    /* LABEL */
  ), [L, P] = b(), f = N(null), U = (t) => I(t.target.value), i = (t) => {
    n(
      "LABEL"
      /* LABEL */
    ), u && u(
      "LABEL"
      /* LABEL */
    ), e != null && e.additionalValues && E && E(e.additionalValues, t.target.value), a && a(t.target.value);
  }, s = (t) => () => {
    I(t), n(
      "INPUT"
      /* INPUT */
    ), u && u(
      "INPUT"
      /* INPUT */
    );
  }, g = (t) => {
    t.key === "Enter" && i(t);
  }, k = (t) => i(t);
  S(() => n(
    (e == null ? void 0 : e.mode) ?? "LABEL"
    /* LABEL */
  ), [e == null ? void 0 : e.mode]);
  const v = e != null && e.enableDoubleClick ? {
    onDoubleClick: s(d),
    onKeyPress: (t) => t.key === "Enter" && s(d)()
  } : {
    onClick: s(d)
  };
  S(() => {
    var t;
    y.current && P(T.copyStyles(y.current)), w === "INPUT" && ((t = f.current) == null || t.select());
  }, [w, f, c]);
  const y = N(), F = c && l.cloneElement(c, {
    ref: y
  });
  return /* @__PURE__ */ l.createElement(
    "div",
    {
      "data-test-id": B,
      className: r(["tw-relative tw-h-full", (e == null ? void 0 : e.removeBoxPadding) === !0 ? "" : "tw-p-2"])
    },
    w === "INPUT" ? /* @__PURE__ */ l.createElement(
      "div",
      {
        className: r([
          "tw-flex tw-items-center",
          (e == null ? void 0 : e.isSlimInputField) === !0 ? "-tw-translate-x-[0.315rem] -tw-translate-y-[0.07rem]" : "-tw-translate-x-[0.81rem] -tw-translate-y-[0.56rem]"
        ])
      },
      /* @__PURE__ */ l.createElement(
        "div",
        {
          "data-test-id": "editable-input",
          className: r(["tw-relative", m && "tw-w-full tw-flex tw-items-center"])
        },
        /* @__PURE__ */ l.createElement(
          "input",
          {
            ref: f,
            type: "text",
            className: r([
              (e == null ? void 0 : e.isSlimInputField) === !0 ? "focus-visible:tw-outline-none" : h,
              "tw-absolute tw-w-full tw-text-text tw-border tw-rounded tw-bg-base tw-border-solid",
              (e == null ? void 0 : e.isSlimInputField) === !0 ? "tw-py-0 tw-px-1" : "tw-px-3 tw-py-2"
            ]),
            style: L,
            value: x,
            onChange: U,
            onKeyDown: g,
            onBlur: k
          }
        ),
        /* @__PURE__ */ l.createElement(
          "span",
          {
            "aria-hidden": "true",
            className: r([
              "tw-rounded tw-px-4 tw-py-2 tw-bg-base tw-truncate",
              (e == null ? void 0 : e.isSlimInputField) === !0 && "tw-py-0 tw-px-2",
              m && "tw-w-0"
            ]),
            style: L
          },
          x
        )
      )
    ) : null,
    /* @__PURE__ */ l.createElement(
      "button",
      {
        style: { display: w === "INPUT" ? "none" : "flex" },
        className: r([m && "tw-w-full", "tw-h-full tw-items-center", h]),
        ...v,
        "data-test-id": "node-link-name",
        "aria-pressed": "false"
      },
      F
    )
  );
};
R.displayName = "FondueEditableText";
export {
  A as EditableMode,
  R as EditableText
};
//# sourceMappingURL=EditableText.es.js.map
