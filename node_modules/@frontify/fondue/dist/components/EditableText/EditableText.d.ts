import { ReactElement } from 'react';
export declare enum EditableMode {
    INPUT = "INPUT",
    LABEL = "LABEL"
}
/**
 * isSlimInputField: removes padding
 * mode: display as Input or Label first
 * enableDoubleClick: Should the input be triggered by a double click or single click
 * additionalValues: additional information to be passed via onClick Event
 * removeBoxPadding: Removes the Padding (tw-p-2) around the input Box
 */
interface EditableOptionProps {
    isSlimInputField?: boolean;
    mode?: EditableMode;
    enableDoubleClick?: boolean;
    additionalValues?: string;
    removeBoxPadding?: boolean;
}
/**
 * Add Children with badges or icons
 * onEditableSave callback to get updated Value
 * onAdditionalValueSave callback with more information (ex. ID)
 * onModeChange callback when state changes
 * options to specify styling and additional behaviours
 */
export interface EditableTextProps {
    children?: ReactElement;
    onAdditionalValueSave?: (additionalValue: string, value: string) => void;
    onEditableSave?: (value: string) => void;
    onModeChange?: (editableState?: EditableMode) => void;
    options?: EditableOptionProps;
    /** @deprecated Temporary solution for text with ellipisis in Tree Component */
    isOverflowing?: boolean;
    'data-test-id'?: string;
}
/**
 * Component to switch between Label and Input state. Wraps the Children
 * with a Button, to allow for accessibility and copies styles to input field
 *
 * Events:
 * - onEditableSave         // When changing from input to label state
 * - onModeChange           // Indicates which state is active
 * - onAdditionalValueSave  // Similar to editable Save with additional Values provided
 *
 * Options properties:
 * - mode:                   enum EditableMode  // {INPUT = 'INPUT',LABEL = 'LABEL'}
 * - enableDoubleClick:      boolean            // should the input be triggered by a double click or single click
 * - isSlimInputField:       boolean            // removes y padding
 * - additionalValues?:      string             // additional Values like ID
 *
 */
export declare const EditableText: {
    ({ onEditableSave, onModeChange, onAdditionalValueSave, children, options, isOverflowing, "data-test-id": dataTestId, }: EditableTextProps): JSX.Element;
    displayName: string;
};
export {};
