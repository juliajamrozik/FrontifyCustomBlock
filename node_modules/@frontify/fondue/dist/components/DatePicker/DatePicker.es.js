import { IconSize as r } from "../../foundation/Icon/IconSize.es.js";
import { format as _, getYear as j } from "date-fns";
import e, { forwardRef as F, useState as G } from "react";
import H from "react-datepicker";
import "./DatePicker.css.es.js";
import { DatePickerTrigger as V } from "./DatePickerTrigger.es.js";
import { Validation as Y } from "../../utilities/validation.es.js";
import $ from "../../foundation/Icon/Generated/IconCaretLeftDouble.es.js";
import q from "../../foundation/Icon/Generated/IconCaretLeft.es.js";
import J from "../../foundation/Icon/Generated/IconCaretRight.es.js";
import K from "../../foundation/Icon/Generated/IconCaretRightDouble.es.js";
import { Button as i } from "../Button/Button.es.js";
import { ButtonStyle as s, ButtonSize as n, ButtonEmphasis as o } from "../Button/ButtonTypes.es.js";
const Q = 40, U = (m, a) => m === "single" ? a < new Date() ? "past-date" : "future-date" : "range-day", X = F(
  ({
    placeHolder: m = "Select a date",
    isClearable: a,
    shouldCloseOnSelect: y,
    onChange: f,
    onOpen: l,
    onClose: c,
    onBlur: h,
    onKeyDown: C,
    dateFormat: E = "dd MMM yyyy",
    value: k,
    startDate: z,
    endDate: M,
    minDate: S,
    maxDate: I,
    validation: R = Y.Default,
    customTrigger: x,
    customHeader: N,
    children: b,
    hasPopperArrow: P = !0,
    preventOpenOnFocus: W = !1,
    filterDate: B = () => !0,
    variant: u = "single",
    "data-test-id": A = "date-picker"
  }, O) => {
    const [v, w] = G(!1), L = () => {
      w(!0), l == null || l();
    }, T = () => {
      w(!1), c == null || c();
    };
    return /* @__PURE__ */ e.createElement("div", { "data-test-id": A }, /* @__PURE__ */ e.createElement(
      H,
      {
        calendarClassName: "tw-rounded-sm tw-border tw-border-line-x-strong react-datepicker-wrap",
        selected: k,
        startDate: z,
        endDate: M,
        minDate: S,
        maxDate: I,
        calendarStartDay: 1,
        onChange: f,
        onKeyDown: C,
        onBlur: h,
        selectsRange: u === "range",
        showPopperArrow: P,
        preventOpenOnFocus: W,
        filterDate: B,
        customInput: x ?? /* @__PURE__ */ e.createElement(
          V,
          {
            isCalendarOpen: v,
            isClearable: a,
            placeHolder: m,
            validation: R,
            onDateChanged: f
          }
        ),
        ref: O,
        formatWeekDay: (t) => t.slice(0, 1),
        isClearable: a,
        dateFormat: E,
        onCalendarClose: T,
        onCalendarOpen: L,
        shouldCloseOnSelect: y,
        dayClassName: (t) => U(u, t),
        popperProps: {
          strategy: "fixed"
        },
        renderCustomHeader: ({ date: t, decreaseMonth: d, increaseMonth: p, increaseYear: g, decreaseYear: D }) => /* @__PURE__ */ e.createElement("div", { className: "tw-flex tw-flex-col tw-gap-3" }, N, /* @__PURE__ */ e.createElement("div", { className: "tw-flex tw-justify-between tw-pb-4 tw-px-0" }, /* @__PURE__ */ e.createElement(
          i,
          {
            style: s.Default,
            size: n.Medium,
            onClick: D,
            emphasis: o.Weak,
            icon: /* @__PURE__ */ e.createElement($, { size: r.Size20 })
          }
        ), /* @__PURE__ */ e.createElement(
          i,
          {
            style: s.Default,
            size: n.Medium,
            onClick: d,
            emphasis: o.Weak,
            icon: /* @__PURE__ */ e.createElement(q, { size: r.Size20 })
          }
        ), /* @__PURE__ */ e.createElement("p", { className: "tw-font-sans tw-font-semibold tw-grow tw-self-center" }, _(t, "MMMM"), " ", j(t)), /* @__PURE__ */ e.createElement(
          i,
          {
            style: s.Default,
            size: n.Medium,
            onClick: p,
            emphasis: o.Weak,
            icon: /* @__PURE__ */ e.createElement(J, { size: r.Size20 })
          }
        ), /* @__PURE__ */ e.createElement(
          i,
          {
            style: s.Default,
            size: n.Medium,
            onClick: g,
            emphasis: o.Weak,
            icon: /* @__PURE__ */ e.createElement(K, { size: r.Size20 })
          }
        ))),
        popperModifiers: [
          {
            name: "arrow",
            options: {
              padding: ({ popper: t, reference: d, placement: p }) => ({
                [`${p.includes("end") ? "left" : "right"}`]: Math.max(t.width, Math.min(t.width, d.width)) - Q
              })
            }
          }
        ]
      },
      b
    ));
  }
);
X.displayName = "FondueDatePicker";
export {
  X as DatePicker
};
//# sourceMappingURL=DatePicker.es.js.map
