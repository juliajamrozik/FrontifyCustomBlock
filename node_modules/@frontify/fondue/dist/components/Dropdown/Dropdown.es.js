import { mapToAriaProps as v, getDisabledItemIds as L, getMenuItems as A } from "../ActionMenu/Aria/helper.es.js";
import { SelectMenu as I } from "./SelectMenu/SelectMenu.es.js";
import { Trigger as tt, TriggerSize as T, TriggerEmphasis as et } from "../Trigger/Trigger.es.js";
import { useMemoizedId as ot } from "../../hooks/useMemoizedId.es.js";
import { useButton as rt } from "@react-aria/button";
import { useFocusRing as st, FocusScope as lt } from "@react-aria/focus";
import { useOverlay as nt, DismissButton as M } from "@react-aria/overlays";
import { useSelect as at, HiddenSelect as mt } from "@react-aria/select";
import { mergeProps as it } from "@react-aria/utils";
import { useSelectState as pt } from "@react-stately/select";
import { merge as ut } from "../../utilities/merge.es.js";
import { Validation as N } from "../../utilities/validation.es.js";
import e, { useRef as f, useEffect as ct } from "react";
import { usePopper as ft } from "react-popper";
import { useDropdownAutoHeight as dt, DEFAULT_DROPDOWN_MAX_HEIGHT as wt } from "../../hooks/useDropdownAutoHeight.es.js";
import { EnablePortalWrapper as gt } from "../../utilities/dialogs/EnablePortalWrapper.es.js";
import { MenuItemTextColorState as d, menuItemTextColorRecord as St } from "../MenuItem/MenuItem.es.js";
import { MenuItemStyle as Et, MenuItemContentSize as F } from "../MenuItem/types.es.js";
import { MenuItemContent as yt } from "../MenuItem/MenuItemContent.es.js";
import { LoadingCircle as bt, LoadingCircleSize as ht } from "../LoadingCircle/LoadingCircle.es.js";
const Jt = 36;
var xt = /* @__PURE__ */ ((t) => (t.Small = "Small", t.Large = "Large", t))(xt || {}), Dt = /* @__PURE__ */ ((t) => (t.Start = "Start", t.End = "End", t))(Dt || {}), Ct = /* @__PURE__ */ ((t) => (t.Top = "Top", t.Bottom = "Bottom", t))(Ct || {});
const Pt = (t, l) => L(A(t)).has(l) ? null : t.map(({ menuItems: r }) => r).flat().find(({ id: r }) => r.toString() === (l == null ? void 0 : l.toString())) || null, Tt = ({
  id: t,
  menuBlocks: l,
  onChange: w,
  activeItemId: r,
  placeholder: K = "Select item",
  size: p = "Small",
  disabled: a = !1,
  clearable: O = !1,
  ariaLabel: H = "Dropdown",
  decorator: R,
  autoResize: u = !0,
  validation: g = N.Default,
  alignment: _ = "Start",
  position: B = "Bottom",
  emphasis: W = et.Default,
  flip: $ = !1,
  "data-test-id": c = "dropdown",
  enablePortal: z = !0
}) => {
  var P;
  const o = r ? Pt(l, r) : null, S = v(H, l), s = pt({
    ...S,
    defaultSelectedKey: r,
    onSelectionChange: (i) => w(i),
    disabledKeys: L(A(l))
  }), n = f(null), { triggerProps: V, valueProps: G, menuProps: U } = at({ ...S, isDisabled: a }, s, n), { buttonProps: E } = rt({ ...V, isDisabled: a }, n), { isOpen: m } = s, { isFocusVisible: X, focusProps: j } = st(), y = f(null), { overlayProps: q } = nt(
    { isOpen: m, onClose: () => s.close(), shouldCloseOnBlur: !0, isDismissable: !0 },
    y
  );
  ct(() => {
    s.disabledKeys.has(r) || r !== s.selectedKey && s.setSelectedKey(r);
  }, [r]);
  const { maxHeight: b } = dt(n, { isOpen: m, autoResize: u }), J = !u || b !== wt, Q = o ? d.Active : d.Default, Y = a ? d.Disabled : Q, Z = o ? St[o.style || Et.Primary][Y] : "tw-text-text-x-weak", h = O ? () => {
    s.setSelectedKey("");
    const i = s.collection.getFirstKey();
    i && s.selectionManager.setFocusedKey(i);
  } : void 0, x = !!o && !!h, D = f(null), k = {
    ["Top-Start"]: "top-start",
    ["Top-End"]: "top-end",
    ["Bottom-Start"]: "bottom-start",
    ["Bottom-End"]: "bottom-end"
  }, C = ft(n == null ? void 0 : n.current, D.current, {
    placement: k[`${B}-${_}`],
    strategy: "fixed",
    modifiers: [
      {
        name: "offset",
        options: {
          offset: [0, 8]
        }
      },
      {
        name: "flip",
        enabled: $
      }
    ]
  });
  return /* @__PURE__ */ e.createElement("div", { className: "tw-relative tw-w-full tw-font-sans tw-text-s", "data-test-id": c }, /* @__PURE__ */ e.createElement(
    tt,
    {
      disabled: a,
      buttonProps: E,
      isFocusVisible: !a && X,
      isOpen: m,
      size: p === "Large" ? T.Large : T.Small,
      emphasis: W,
      onClear: h,
      showClear: x,
      validation: g
    },
    /* @__PURE__ */ e.createElement(mt, { state: s, triggerRef: n }),
    /* @__PURE__ */ e.createElement(
      "button",
      {
        ...it(E, j),
        id: ot(t),
        ref: n,
        "data-test-id": `${c}-trigger`,
        className: ut([
          "tw-overflow-hidden tw-flex-auto tw-h-full tw-rounded tw-text-left tw-outline-none",
          p === "Small" ? "tw-py-2 tw-pl-3 tw-min-h-[34px]" : "tw-pl-5 tw-py-4 tw-min-h-[60px]",
          x ? "tw-pr-11" : "tw-pr-7",
          Z
        ])
      },
      /* @__PURE__ */ e.createElement(
        yt,
        {
          ariaProps: G,
          title: (o == null ? void 0 : o.title) || K,
          decorator: R ?? (o == null ? void 0 : o.decorator),
          subtitle: o == null ? void 0 : o.subtitle,
          size: p === "Small" ? F.Small : F.Large
        }
      )
    )
  ), !a && m && J && /* @__PURE__ */ e.createElement(gt, { enablePortal: z }, /* @__PURE__ */ e.createElement(
    "div",
    {
      ref: D,
      style: {
        ...C.styles.popper,
        width: (P = n.current) == null ? void 0 : P.getBoundingClientRect().width,
        minWidth: "fit-content"
      },
      ...C.attributes.popper,
      className: "tw-absolute tw-p-0 tw-shadow tw-list-none tw-m-0 tw-z-[120000] tw-min-w-full tw-overflow-hidden",
      key: "content"
    },
    /* @__PURE__ */ e.createElement(lt, { restoreFocus: !0 }, /* @__PURE__ */ e.createElement(
      "div",
      {
        ...q,
        ref: y,
        style: u ? { maxHeight: b } : {},
        className: "tw-flex tw-flex-col",
        "data-test-id": `${c}-menu`,
        role: "dialog"
      },
      /* @__PURE__ */ e.createElement(M, { onDismiss: () => close() }),
      /* @__PURE__ */ e.createElement(I, { ariaProps: U, state: s, menuBlocks: l, scrollable: !0 }),
      /* @__PURE__ */ e.createElement(M, { onDismiss: () => close() })
    ))
  )), g === N.Loading && /* @__PURE__ */ e.createElement("span", { className: "tw-absolute tw-top-[-0.55rem] tw-right-[-0.55rem] tw-bg-base tw-rounded-full tw-p-[2px] tw-border tw-border-line-weak" }, /* @__PURE__ */ e.createElement(bt, { size: ht.ExtraSmall })));
};
Tt.displayName = "FonduesDropdown";
export {
  Jt as DEFAULT_DROPDOWN_MIN_ANIMATION_HEIGHT,
  Tt as Dropdown,
  Dt as DropdownAlignment,
  Ct as DropdownPosition,
  xt as DropdownSize
};
//# sourceMappingURL=Dropdown.es.js.map
