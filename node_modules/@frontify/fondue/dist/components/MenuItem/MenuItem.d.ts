import React, { MouseEvent, ReactNode } from 'react';
import { MenuItemContentProps } from '../MenuItem/MenuItemContent';
import { MenuItemContentSize, MenuItemStyle, SelectionIndicatorIcon } from './types';
export type MenuItemProps = {
    style?: MenuItemStyle;
    disabled?: boolean;
    active?: boolean;
    checked?: boolean;
    selectionIndicator?: SelectionIndicatorIcon;
    /** @deprecated this prop is not being used anymore */
    type?: string;
    link?: string;
    onBlur?: <T extends HTMLButtonElement | HTMLAnchorElement>(event: React.FocusEvent<T>) => void;
    onClick?: <T extends HTMLButtonElement | HTMLAnchorElement>(event: MouseEvent<T>) => void;
    onFocus?: <T extends HTMLButtonElement | HTMLAnchorElement>(event: React.FocusEvent<T>) => void;
    onMouseEnter?: <T extends HTMLButtonElement | HTMLAnchorElement>(event: MouseEvent<T>) => void;
    onMouseOut?: <T extends HTMLButtonElement | HTMLAnchorElement>(event: MouseEvent<T>) => void;
    onMouseOver?: <T extends HTMLButtonElement | HTMLAnchorElement>(event: MouseEvent<T>) => void;
    onMouseLeave?: <T extends HTMLButtonElement | HTMLAnchorElement>(event: MouseEvent<T>) => void;
    children?: ReactNode;
    'data-test-id'?: string;
} & Omit<MenuItemContentProps, 'iconSize'>;
export declare const menuItemSizeClassMap: Record<MenuItemContentSize, string>;
export declare enum MenuItemTextColorState {
    Default = "Default",
    Active = "Active",
    Disabled = "Disabled"
}
export declare const menuItemTextColorRecord: Record<MenuItemStyle, Record<MenuItemTextColorState, string>>;
export declare const MenuItem: {
    ({ title, decorator, switchComponent, subtitle, size, style, disabled, active, checked, selectionIndicator, children, link, onBlur, onClick, onFocus, onMouseEnter, onMouseOut, onMouseOver, onMouseLeave, "data-test-id": dataTestId, }: MenuItemProps): JSX.Element;
    displayName: string;
};
