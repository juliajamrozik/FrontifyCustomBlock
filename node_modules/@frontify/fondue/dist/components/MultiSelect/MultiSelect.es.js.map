{"version":3,"file":"MultiSelect.es.js","sources":["../../../src/components/MultiSelect/MultiSelect.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Checklist, ChecklistDirection } from '@components/Checklist/Checklist';\nimport { Tag, TagSize, TagType } from '@components/Tag';\nimport { Trigger, TriggerEmphasis } from '@components/Trigger';\nimport { Text } from '@typography/Text';\nimport { useButton } from '@react-aria/button';\nimport { FocusScope, useFocusRing } from '@react-aria/focus';\nimport { merge } from '@utilities/merge';\nimport { Validation } from '@utilities/validation';\nimport React, { KeyboardEvent, ReactElement, useEffect, useRef, useState } from 'react';\nimport { getPaddingClasses } from './helpers';\nimport { useClickOutside } from '@hooks/useClickOutside';\nimport { CheckboxState } from '@components/Checkbox/Checkbox';\nimport { usePopper } from 'react-popper';\nimport { DEFAULT_DROPDOWN_MAX_HEIGHT, useDropdownAutoHeight } from '@hooks/useDropdownAutoHeight';\nimport { EnablePortalWrapper } from '@utilities/dialogs/EnablePortalWrapper';\n\nexport enum MultiSelectType {\n    Default = 'Default',\n    Summarized = 'Summarized',\n}\n\nexport enum MultiSelectSize {\n    Small = 'Small',\n    Medium = 'Medium',\n}\n\nexport type MultiSelectItem = {\n    value: string;\n    isCategory?: boolean;\n    isDivider?: boolean;\n    avatar?: React.ReactNode;\n    imgSrc?: string;\n    ariaLabel?: string;\n};\n\nexport type MultiSelectProps = {\n    items: MultiSelectItem[];\n    activeItemKeys: (string | number)[];\n    disabled?: boolean;\n    onSelectionChange: (keys: (string | number)[]) => void;\n    ariaLabel?: string;\n    label?: string;\n    placeholder?: string;\n    type?: MultiSelectType;\n    size?: MultiSelectSize;\n    validation?: Validation;\n    summarizedLabel?: string;\n    indeterminateItemKeys?: (string | number)[];\n    flip?: boolean;\n    emphasis?: TriggerEmphasis;\n    enablePortal?: boolean;\n};\n\nexport type Item = {\n    label: string;\n    value: string;\n    avatar?: React.ReactNode;\n    isCategory?: boolean;\n    isDivider?: boolean;\n    imgSrc?: string;\n    ariaLabel?: string;\n};\n\nexport const MultiSelect = ({\n    items,\n    activeItemKeys,\n    onSelectionChange,\n    ariaLabel = 'Select list',\n    disabled = false,\n    placeholder,\n    label,\n    type = MultiSelectType.Default,\n    size = MultiSelectSize.Medium,\n    validation = Validation.Default,\n    summarizedLabel: summarizedLabelFromProps,\n    indeterminateItemKeys,\n    flip = false,\n    emphasis = TriggerEmphasis.Default,\n    enablePortal = true,\n}: MultiSelectProps): ReactElement => {\n    const [open, setOpen] = useState(false);\n    const [checkboxes, setCheckboxes] = useState<Item[]>([]);\n    const multiSelectRef = useRef<HTMLDivElement | null>(null);\n\n    const [multiSelectMenuRef, setMultiSelectMenuRef] = useState<null | HTMLDivElement>(null);\n    const [triggerRef, setTriggerRef] = useState<HTMLDivElement | null>(null);\n\n    const filterInputRef = useRef<HTMLInputElement | null>(null);\n    const { isFocusVisible, focusProps } = useFocusRing();\n\n    const { maxHeight } = useDropdownAutoHeight({ current: triggerRef }, { isOpen: open, autoResize: true });\n\n    const hasSelectedItems = activeItemKeys.length > 0;\n    const summarizedLabel = summarizedLabelFromProps ?? [activeItemKeys.length, 'selected'].join(' ');\n\n    const handleClose = () => setOpen(false);\n\n    useClickOutside(null, handleClose, [multiSelectRef?.current as HTMLElement, multiSelectMenuRef as HTMLElement]);\n\n    const heightIsReady = maxHeight !== DEFAULT_DROPDOWN_MAX_HEIGHT;\n\n    const toggleOpen = () => setOpen((open) => !open);\n\n    const { buttonProps } = useButton(\n        {\n            onPress: toggleOpen,\n            onKeyDown: (e) => {\n                if (e.key === 'Escape') {\n                    setOpen(false);\n                }\n            },\n            elementType: 'div',\n        },\n        { current: triggerRef },\n    );\n\n    const toggleSelection = (key: string | number) => {\n        const keySet = new Set(activeItemKeys);\n\n        if (keySet.has(key)) {\n            keySet.delete(key);\n        } else {\n            keySet.add(key);\n        }\n\n        onSelectionChange(Array.from(keySet));\n    };\n\n    const handleSpacebarToggle = (e: KeyboardEvent<HTMLDivElement>) => {\n        if (e.code === 'Space') {\n            toggleOpen();\n        }\n    };\n\n    const getTagType = () => {\n        if (!open) {\n            return TagType.Selected;\n        }\n        return TagType.SelectedWithFocus;\n    };\n\n    useEffect(() => {\n        setCheckboxes(\n            items.map((item) => {\n                const checkboxBaseItem = { ...item, label: item.value };\n                if (indeterminateItemKeys?.includes(item.value)) {\n                    return { ...checkboxBaseItem, state: CheckboxState.Mixed };\n                }\n                return checkboxBaseItem;\n            }),\n        );\n    }, [items, indeterminateItemKeys]);\n\n    const popperInstance = usePopper(triggerRef, multiSelectMenuRef, {\n        placement: 'bottom-start',\n        strategy: 'fixed',\n        modifiers: [\n            {\n                name: 'offset',\n                options: {\n                    offset: [0, 8],\n                },\n            },\n            {\n                name: 'flip',\n                enabled: flip,\n            },\n        ],\n    });\n\n    useEffect(() => {\n        const updatePopper = async () => {\n            if (popperInstance.update) {\n                await popperInstance.update();\n            }\n        };\n\n        updatePopper().catch(console.error);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [activeItemKeys]);\n\n    return (\n        <div className=\"tw-relative\" ref={multiSelectRef}>\n            <Trigger\n                disabled={disabled}\n                buttonProps={buttonProps}\n                isFocusVisible={isFocusVisible}\n                isOpen={open}\n                validation={validation}\n                emphasis={emphasis}\n            >\n                <div className={merge(['tw-flex tw-flex-1 tw-gap-2', getPaddingClasses(size)])} ref={setTriggerRef}>\n                    <div\n                        className=\"tw-flex tw-flex-1 tw-gap-2 focus:tw-outline-0\"\n                        onClick={(e) => {\n                            if (e.target === filterInputRef.current && open) {\n                                return;\n                            }\n                            toggleOpen();\n                        }}\n                        role=\"button\"\n                        {...focusProps}\n                        tabIndex={0}\n                        onKeyDown={handleSpacebarToggle}\n                    >\n                        <div className=\"tw-flex tw-flex-wrap tw-gap-2 tw-outline-none tw-items-center tw-min-h-[28px]\">\n                            {label && hasSelectedItems && <Text weight=\"strong\">{label}</Text>}\n                            {type === MultiSelectType.Default &&\n                                activeItemKeys.map((key) => (\n                                    <Tag\n                                        key={key}\n                                        type={getTagType()}\n                                        label={key.toString()}\n                                        size={size === MultiSelectSize.Small ? TagSize.Small : TagSize.Medium}\n                                        onClick={disabled ? undefined : () => toggleSelection(key)}\n                                    />\n                                ))}\n\n                            {type === MultiSelectType.Summarized && (hasSelectedItems || summarizedLabelFromProps) && (\n                                <Tag\n                                    type={getTagType()}\n                                    label={summarizedLabel}\n                                    size={size === MultiSelectSize.Small ? TagSize.Small : TagSize.Medium}\n                                    onClick={\n                                        indeterminateItemKeys?.length === 0 ? () => onSelectionChange([]) : undefined\n                                    }\n                                />\n                            )}\n\n                            {activeItemKeys.length === 0 && placeholder && <Text color=\"weak\">{placeholder}</Text>}\n                        </div>\n                    </div>\n                </div>\n            </Trigger>\n\n            {open && heightIsReady && (\n                <EnablePortalWrapper enablePortal={enablePortal}>\n                    <div\n                        ref={setMultiSelectMenuRef}\n                        className=\"tw-absolute tw-left-0 tw-w-full tw-overflow-hidden tw-p-0 tw-shadow-mid tw-list-none tw-m-0 tw-mt-2 tw-z-[120000] tw-bg-base tw-min-w-[18rem]\"\n                        key=\"content\"\n                        style={{\n                            ...popperInstance.styles.popper,\n                            width: triggerRef?.getBoundingClientRect().width,\n                        }}\n                        {...popperInstance.attributes.popper}\n                    >\n                        <FocusScope restoreFocus>\n                            <div\n                                className=\"tw-p-4 tw-overflow-y-auto tw-overflow-x-hidden tw-w-full tw-relative\"\n                                style={{ maxHeight }}\n                            >\n                                <Checklist\n                                    activeValues={activeItemKeys.map((key) => key.toString())}\n                                    setActiveValues={onSelectionChange}\n                                    checkboxes={checkboxes.filter((item) => !item.isDivider && !item.isCategory)}\n                                    direction={ChecklistDirection.Vertical}\n                                    ariaLabel={ariaLabel}\n                                />\n                            </div>\n                        </FocusScope>\n                    </div>\n                </EnablePortalWrapper>\n            )}\n        </div>\n    );\n};\nMultiSelect.displayName = 'FondueMultiSelect';\n"],"names":["MultiSelectType","MultiSelectSize","MultiSelect","items","activeItemKeys","onSelectionChange","ariaLabel","disabled","placeholder","label","type","size","validation","Validation","summarizedLabelFromProps","indeterminateItemKeys","flip","emphasis","TriggerEmphasis","enablePortal","open","setOpen","useState","checkboxes","setCheckboxes","multiSelectRef","useRef","multiSelectMenuRef","setMultiSelectMenuRef","triggerRef","setTriggerRef","filterInputRef","isFocusVisible","focusProps","useFocusRing","maxHeight","useDropdownAutoHeight","hasSelectedItems","summarizedLabel","useClickOutside","heightIsReady","DEFAULT_DROPDOWN_MAX_HEIGHT","toggleOpen","buttonProps","useButton","toggleSelection","key","keySet","handleSpacebarToggle","getTagType","TagType","useEffect","item","checkboxBaseItem","CheckboxState","popperInstance","usePopper","React","Trigger","merge","getPaddingClasses","Text","Tag","TagSize","EnablePortalWrapper","FocusScope","Checklist","ChecklistDirection"],"mappings":";;;;;;;;;;;;;;;AAkBY,IAAAA,uBAAAA,OACRA,EAAA,UAAU,WACVA,EAAA,aAAa,cAFLA,IAAAA,MAAA,CAAA,CAAA,GAKAC,uBAAAA,OACRA,EAAA,QAAQ,SACRA,EAAA,SAAS,UAFDA,IAAAA,MAAA,CAAA,CAAA;AA0CL,MAAMC,KAAc,CAAC;AAAA,EACxB,OAAAC;AAAA,EACA,gBAAAC;AAAA,EACA,mBAAAC;AAAA,EACA,WAAAC,IAAY;AAAA,EACZ,UAAAC,IAAW;AAAA,EACX,aAAAC;AAAA,EACA,OAAAC;AAAA,EACA,MAAAC,IAAO;AAAA,EACP,MAAAC,IAAO;AAAA,EACP,YAAAC,IAAaC,EAAW;AAAA,EACxB,iBAAiBC;AAAA,EACjB,uBAAAC;AAAA,EACA,MAAAC,IAAO;AAAA,EACP,UAAAC,IAAWC,GAAgB;AAAA,EAC3B,cAAAC,IAAe;AACnB,MAAsC;AAClC,QAAM,CAACC,GAAMC,CAAO,IAAIC,EAAS,EAAK,GAChC,CAACC,GAAYC,CAAa,IAAIF,EAAiB,CAAE,CAAA,GACjDG,IAAiBC,EAA8B,IAAI,GAEnD,CAACC,GAAoBC,CAAqB,IAAIN,EAAgC,IAAI,GAClF,CAACO,GAAYC,CAAa,IAAIR,EAAgC,IAAI,GAElES,IAAiBL,EAAgC,IAAI,GACrD,EAAE,gBAAAM,GAAgB,YAAAC,EAAW,IAAIC,EAAa,GAE9C,EAAE,WAAAC,EAAA,IAAcC,GAAsB,EAAE,SAASP,KAAc,EAAE,QAAQT,GAAM,YAAY,GAAM,CAAA,GAEjGiB,IAAmBjC,EAAe,SAAS,GAC3CkC,IAAkBxB,KAA4B,CAACV,EAAe,QAAQ,UAAU,EAAE,KAAK,GAAG;AAIhG,EAAAmC,GAAgB,MAFI,MAAMlB,EAAQ,EAAK,GAEJ,CAACI,KAAA,gBAAAA,EAAgB,SAAwBE,CAAiC,CAAC;AAE9G,QAAMa,IAAgBL,MAAcM,IAE9BC,IAAa,MAAMrB,EAAQ,CAACD,MAAS,CAACA,CAAI,GAE1C,EAAE,aAAAuB,MAAgBC;AAAA,IACpB;AAAA,MACI,SAASF;AAAA,MACT,WAAW,CAAC,MAAM;AACV,QAAA,EAAE,QAAQ,YACVrB,EAAQ,EAAK;AAAA,MAErB;AAAA,MACA,aAAa;AAAA,IACjB;AAAA,IACA,EAAE,SAASQ,EAAW;AAAA,EAAA,GAGpBgB,IAAkB,CAACC,MAAyB;AACxC,UAAAC,IAAS,IAAI,IAAI3C,CAAc;AAEjC,IAAA2C,EAAO,IAAID,CAAG,IACdC,EAAO,OAAOD,CAAG,IAEjBC,EAAO,IAAID,CAAG,GAGAzC,EAAA,MAAM,KAAK0C,CAAM,CAAC;AAAA,EAAA,GAGlCC,IAAuB,CAAC,MAAqC;AAC3D,IAAA,EAAE,SAAS,WACAN;EACf,GAGEO,IAAa,MACV7B,IAGE8B,EAAQ,oBAFJA,EAAQ;AAKvB,EAAAC,EAAU,MAAM;AACZ,IAAA3B;AAAA,MACIrB,EAAM,IAAI,CAACiD,MAAS;AAChB,cAAMC,IAAmB,EAAE,GAAGD,GAAM,OAAOA,EAAK;AAChD,eAAIrC,KAAA,QAAAA,EAAuB,SAASqC,EAAK,SAC9B,EAAE,GAAGC,GAAkB,OAAOC,GAAc,MAAM,IAEtDD;AAAA,MAAA,CACV;AAAA,IAAA;AAAA,EACL,GACD,CAAClD,GAAOY,CAAqB,CAAC;AAE3B,QAAAwC,IAAiBC,GAAU3B,GAAYF,GAAoB;AAAA,IAC7D,WAAW;AAAA,IACX,UAAU;AAAA,IACV,WAAW;AAAA,MACP;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,QAAQ,CAAC,GAAG,CAAC;AAAA,QACjB;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAASX;AAAA,MACb;AAAA,IACJ;AAAA,EAAA,CACH;AAED,SAAAmC,EAAU,MAAM;AAOC,KANQ,YAAY;AAC7B,MAAII,EAAe,UACf,MAAMA,EAAe;IACzB,KAGW,MAAM,QAAQ,KAAK;AAAA,EAAA,GAEnC,CAACnD,CAAc,CAAC,GAGd,gBAAAqD,EAAA,cAAA,OAAA,EAAI,WAAU,eAAc,KAAKhC,KAC9B,gBAAAgC,EAAA;AAAA,IAACC;AAAA,IAAA;AAAA,MACG,UAAAnD;AAAA,MACA,aAAAoC;AAAA,MACA,gBAAAX;AAAA,MACA,QAAQZ;AAAA,MACR,YAAAR;AAAA,MACA,UAAAK;AAAA,IAAA;AAAA,IAEC,gBAAAwC,EAAA,cAAA,OAAA,EAAI,WAAWE,EAAM,CAAC,8BAA8BC,GAAkBjD,CAAI,CAAC,CAAC,GAAG,KAAKmB,EACjF,GAAA,gBAAA2B,EAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACG,WAAU;AAAA,QACV,SAAS,CAAC,MAAM;AACZ,UAAI,EAAE,WAAW1B,EAAe,WAAWX,KAGhCsB;QACf;AAAA,QACA,MAAK;AAAA,QACJ,GAAGT;AAAA,QACJ,UAAU;AAAA,QACV,WAAWe;AAAA,MAAA;AAAA,sCAEV,OAAI,EAAA,WAAU,mFACVvC,KAAS4B,KAAqB,gBAAAoB,EAAA,cAAAI,GAAA,EAAK,QAAO,SAAA,GAAUpD,CAAM,GAC1DC,MAAS,aACNN,EAAe,IAAI,CAAC0C,MAChB,gBAAAW,EAAA;AAAA,QAACK;AAAA,QAAA;AAAA,UACG,KAAAhB;AAAA,UACA,MAAMG,EAAW;AAAA,UACjB,OAAOH,EAAI,SAAS;AAAA,UACpB,MAAMnC,MAAS,UAAwBoD,EAAQ,QAAQA,EAAQ;AAAA,UAC/D,SAASxD,IAAW,SAAY,MAAMsC,EAAgBC,CAAG;AAAA,QAAA;AAAA,MAAA,CAEhE,GAEJpC,MAAS,iBAA+B2B,KAAoBvB,MACzD,gBAAA2C,EAAA;AAAA,QAACK;AAAA,QAAA;AAAA,UACG,MAAMb,EAAW;AAAA,UACjB,OAAOX;AAAA,UACP,MAAM3B,MAAS,UAAwBoD,EAAQ,QAAQA,EAAQ;AAAA,UAC/D,UACIhD,KAAA,gBAAAA,EAAuB,YAAW,IAAI,MAAMV,EAAkB,CAAA,CAAE,IAAI;AAAA,QAAA;AAAA,MAE5E,GAGHD,EAAe,WAAW,KAAKI,qCAAgBqD,GAAK,EAAA,OAAM,OAAQ,GAAArD,CAAY,CACnF;AAAA,IAAA,CAER;AAAA,EAAA,GAGHY,KAAQoB,KACL,gBAAAiB,EAAA,cAACO,MAAoB,cAAA7C,KACjB,gBAAAsC,EAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACG,KAAK7B;AAAA,MACL,WAAU;AAAA,MACV,KAAI;AAAA,MACJ,OAAO;AAAA,QACH,GAAG2B,EAAe,OAAO;AAAA,QACzB,OAAO1B,KAAA,gBAAAA,EAAY,wBAAwB;AAAA,MAC/C;AAAA,MACC,GAAG0B,EAAe,WAAW;AAAA,IAAA;AAAA,IAE9B,gBAAAE,EAAA,cAACQ,GAAW,EAAA,cAAY,GACpB,GAAA,gBAAAR,EAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACG,WAAU;AAAA,QACV,OAAO,EAAE,WAAAtB,EAAU;AAAA,MAAA;AAAA,MAEnB,gBAAAsB,EAAA;AAAA,QAACS;AAAA,QAAA;AAAA,UACG,cAAc9D,EAAe,IAAI,CAAC0C,MAAQA,EAAI,UAAU;AAAA,UACxD,iBAAiBzC;AAAA,UACjB,YAAYkB,EAAW,OAAO,CAAC6B,MAAS,CAACA,EAAK,aAAa,CAACA,EAAK,UAAU;AAAA,UAC3E,WAAWe,EAAmB;AAAA,UAC9B,WAAA7D;AAAA,QAAA;AAAA,MACJ;AAAA,IAAA,CAER;AAAA,EAER,CAAA,CAER;AAER;AACAJ,GAAY,cAAc;"}