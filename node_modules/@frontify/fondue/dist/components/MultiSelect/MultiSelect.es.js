import { Checklist as Q, ChecklistDirection as Y } from "../Checklist/Checklist.es.js";
import { useButton as Z } from "@react-aria/button";
import { useFocusRing as $, FocusScope as y } from "@react-aria/focus";
import { merge as I } from "../../utilities/merge.es.js";
import { Validation as K } from "../../utilities/validation.es.js";
import t, { useState as i, useRef as k, useEffect as C } from "react";
import { getPaddingClasses as ee } from "./helpers.es.js";
import { useClickOutside as te } from "../../hooks/useClickOutside.es.js";
import { CheckboxState as oe } from "../Checkbox/Checkbox.es.js";
import { usePopper as le } from "react-popper";
import { useDropdownAutoHeight as re, DEFAULT_DROPDOWN_MAX_HEIGHT as ae } from "../../hooks/useDropdownAutoHeight.es.js";
import { EnablePortalWrapper as se } from "../../utilities/dialogs/EnablePortalWrapper.es.js";
import { Trigger as ne, TriggerEmphasis as ce } from "../Trigger/Trigger.es.js";
import { Tag as M, TagSize as p, TagType as R } from "../Tag/Tag.es.js";
import { Text as N } from "../../typography/Text/Text.es.js";
var ue = /* @__PURE__ */ ((o) => (o.Default = "Default", o.Summarized = "Summarized", o))(ue || {}), ie = /* @__PURE__ */ ((o) => (o.Small = "Small", o.Medium = "Medium", o))(ie || {});
const pe = ({
  items: o,
  activeItemKeys: l,
  onSelectionChange: f,
  ariaLabel: P = "Select list",
  disabled: g = !1,
  placeholder: h,
  label: S,
  type: E = "Default",
  size: m = "Medium",
  validation: O = K.Default,
  summarizedLabel: b,
  indeterminateItemKeys: r,
  flip: z = !1,
  emphasis: F = ce.Default,
  enablePortal: A = !0
}) => {
  const [n, w] = i(!1), [V, H] = i([]), c = k(null), [x, B] = i(null), [s, W] = i(null), _ = k(null), { isFocusVisible: L, focusProps: j } = $(), { maxHeight: v } = re({ current: s }, { isOpen: n, autoResize: !0 }), D = l.length > 0, G = b ?? [l.length, "selected"].join(" ");
  te(null, () => w(!1), [c == null ? void 0 : c.current, x]);
  const U = v !== ae, d = () => w((e) => !e), { buttonProps: X } = Z(
    {
      onPress: d,
      onKeyDown: (e) => {
        e.key === "Escape" && w(!1);
      },
      elementType: "div"
    },
    { current: s }
  ), q = (e) => {
    const a = new Set(l);
    a.has(e) ? a.delete(e) : a.add(e), f(Array.from(a));
  }, J = (e) => {
    e.code === "Space" && d();
  }, T = () => n ? R.SelectedWithFocus : R.Selected;
  C(() => {
    H(
      o.map((e) => {
        const a = { ...e, label: e.value };
        return r != null && r.includes(e.value) ? { ...a, state: oe.Mixed } : a;
      })
    );
  }, [o, r]);
  const u = le(s, x, {
    placement: "bottom-start",
    strategy: "fixed",
    modifiers: [
      {
        name: "offset",
        options: {
          offset: [0, 8]
        }
      },
      {
        name: "flip",
        enabled: z
      }
    ]
  });
  return C(() => {
    (async () => {
      u.update && await u.update();
    })().catch(console.error);
  }, [l]), /* @__PURE__ */ t.createElement("div", { className: "tw-relative", ref: c }, /* @__PURE__ */ t.createElement(
    ne,
    {
      disabled: g,
      buttonProps: X,
      isFocusVisible: L,
      isOpen: n,
      validation: O,
      emphasis: F
    },
    /* @__PURE__ */ t.createElement("div", { className: I(["tw-flex tw-flex-1 tw-gap-2", ee(m)]), ref: W }, /* @__PURE__ */ t.createElement(
      "div",
      {
        className: "tw-flex tw-flex-1 tw-gap-2 focus:tw-outline-0",
        onClick: (e) => {
          e.target === _.current && n || d();
        },
        role: "button",
        ...j,
        tabIndex: 0,
        onKeyDown: J
      },
      /* @__PURE__ */ t.createElement("div", { className: "tw-flex tw-flex-wrap tw-gap-2 tw-outline-none tw-items-center tw-min-h-[28px]" }, S && D && /* @__PURE__ */ t.createElement(N, { weight: "strong" }, S), E === "Default" && l.map((e) => /* @__PURE__ */ t.createElement(
        M,
        {
          key: e,
          type: T(),
          label: e.toString(),
          size: m === "Small" ? p.Small : p.Medium,
          onClick: g ? void 0 : () => q(e)
        }
      )), E === "Summarized" && (D || b) && /* @__PURE__ */ t.createElement(
        M,
        {
          type: T(),
          label: G,
          size: m === "Small" ? p.Small : p.Medium,
          onClick: (r == null ? void 0 : r.length) === 0 ? () => f([]) : void 0
        }
      ), l.length === 0 && h && /* @__PURE__ */ t.createElement(N, { color: "weak" }, h))
    ))
  ), n && U && /* @__PURE__ */ t.createElement(se, { enablePortal: A }, /* @__PURE__ */ t.createElement(
    "div",
    {
      ref: B,
      className: "tw-absolute tw-left-0 tw-w-full tw-overflow-hidden tw-p-0 tw-shadow-mid tw-list-none tw-m-0 tw-mt-2 tw-z-[120000] tw-bg-base tw-min-w-[18rem]",
      key: "content",
      style: {
        ...u.styles.popper,
        width: s == null ? void 0 : s.getBoundingClientRect().width
      },
      ...u.attributes.popper
    },
    /* @__PURE__ */ t.createElement(y, { restoreFocus: !0 }, /* @__PURE__ */ t.createElement(
      "div",
      {
        className: "tw-p-4 tw-overflow-y-auto tw-overflow-x-hidden tw-w-full tw-relative",
        style: { maxHeight: v }
      },
      /* @__PURE__ */ t.createElement(
        Q,
        {
          activeValues: l.map((e) => e.toString()),
          setActiveValues: f,
          checkboxes: V.filter((e) => !e.isDivider && !e.isCategory),
          direction: Y.Vertical,
          ariaLabel: P
        }
      )
    ))
  )));
};
pe.displayName = "FondueMultiSelect";
export {
  pe as MultiSelect,
  ie as MultiSelectSize,
  ue as MultiSelectType
};
//# sourceMappingURL=MultiSelect.es.js.map
