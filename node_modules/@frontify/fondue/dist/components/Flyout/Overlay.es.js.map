{"version":3,"file":"Overlay.es.js","sources":["../../../src/components/Flyout/Overlay.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Badge } from '@components/Badge/Badge';\nimport { FieldsetHeader } from '@components/FieldsetHeader/FieldsetHeader';\nimport { useDialog } from '@react-aria/dialog';\nimport { DismissButton, useModal, useOverlay } from '@react-aria/overlays';\nimport { mergeProps } from '@react-aria/utils';\nimport { merge } from '@utilities/merge';\nimport React, { Children, ForwardRefRenderFunction, HTMLAttributes, RefObject, forwardRef } from 'react';\nimport { FlyoutProps } from '.';\n\ntype OverlayProps = Omit<FlyoutProps, 'trigger' | 'onOpenChange' | 'onConfirm' | 'legacyFooter' | 'onCancel'> & {\n    positionProps: HTMLAttributes<Element>;\n    overlayTriggerProps: HTMLAttributes<Element>;\n    scrollRef: RefObject<HTMLDivElement>;\n    onClose: () => void;\n};\n\nconst OverlayComponent: ForwardRefRenderFunction<HTMLDivElement, OverlayProps> = (\n    {\n        title,\n        decorator,\n        badges = [],\n        onClose,\n        children,\n        isOpen,\n        positionProps,\n        overlayTriggerProps,\n        scrollRef,\n        fixedHeader,\n        fixedFooter,\n        fitContent,\n        contentMinHeight,\n    },\n    ref,\n) => {\n    const { overlayProps } = useOverlay({ onClose, isOpen, isDismissable: true }, ref as RefObject<HTMLDivElement>);\n    const { modalProps } = useModal();\n    const { dialogProps, titleProps } = useDialog({}, ref as RefObject<HTMLDivElement>);\n\n    return (\n        <div\n            {...mergeProps(overlayProps, dialogProps, modalProps, positionProps, overlayTriggerProps)}\n            ref={ref}\n            className={merge([\n                'tw-rounded tw-flex tw-outline-none tw-relative',\n                fitContent ? 'tw-min-w-0' : 'tw-min-w-[400px]',\n            ])}\n        >\n            <div\n                className={merge([\n                    'tw-flex tw-flex-col tw-flex-auto tw-min-h-0 tw-rounded tw-shadow-mid tw-border tw-border-line-x-strong',\n                ])}\n            >\n                {fixedHeader}\n                <div\n                    ref={scrollRef}\n                    className={merge([\n                        'tw-flex tw-overflow-y-auto tw-overflow-x-hidden tw-flex-col tw-divide-y tw-divide tw-divide-black-10 tw-bg-white tw-text-black dark:tw-text-white dark:tw-bg-black-95',\n                        !fixedHeader && 'tw-rounded-t',\n                        !fixedFooter && 'tw-rounded-b',\n                    ])}\n                    style={{\n                        minHeight: `${contentMinHeight}px`,\n                    }}\n                >\n                    {title && (\n                        <div className=\"tw-flex tw-justify-between tw-flex-wrap tw-gap-3 tw-p-8\">\n                            <div {...titleProps} className=\"tw-inline-flex\">\n                                <FieldsetHeader decorator={decorator}>{title}</FieldsetHeader>\n                            </div>\n                            <div className=\"tw-inline-flex tw-gap-2 tw-flex-wrap\">\n                                {badges.map((badgeProps, index) => (\n                                    <Badge {...badgeProps} key={`flyout-badge-${index}`} />\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                    {Children.map(children, (child, index) => (\n                        <div key={index}>{child}</div>\n                    ))}\n                    <DismissButton onDismiss={onClose} />\n                </div>\n                {fixedFooter}\n            </div>\n        </div>\n    );\n};\n\nexport const Overlay = forwardRef<HTMLDivElement, OverlayProps>(OverlayComponent);\nOverlay.displayName = 'FondueOverlay';\n"],"names":["OverlayComponent","title","decorator","badges","onClose","children","isOpen","positionProps","overlayTriggerProps","scrollRef","fixedHeader","fixedFooter","fitContent","contentMinHeight","ref","overlayProps","useOverlay","modalProps","useModal","dialogProps","titleProps","useDialog","React","mergeProps","merge","FieldsetHeader","badgeProps","index","Badge","Children","child","DismissButton","Overlay","forwardRef"],"mappings":";;;;;;;AAkBA,MAAMA,IAA2E,CAC7E;AAAA,EACI,OAAAC;AAAA,EACA,WAAAC;AAAA,EACA,QAAAC,IAAS,CAAC;AAAA,EACV,SAAAC;AAAA,EACA,UAAAC;AAAA,EACA,QAAAC;AAAA,EACA,eAAAC;AAAA,EACA,qBAAAC;AAAA,EACA,WAAAC;AAAA,EACA,aAAAC;AAAA,EACA,aAAAC;AAAA,EACA,YAAAC;AAAA,EACA,kBAAAC;AACJ,GACAC,MACC;AACK,QAAA,EAAE,cAAAC,MAAiBC,EAAW,EAAE,SAAAZ,GAAS,QAAAE,GAAQ,eAAe,MAAQQ,CAAgC,GACxG,EAAE,YAAAG,MAAeC,KACjB,EAAE,aAAAC,GAAa,YAAAC,EAAA,IAAeC,EAAU,CAAA,GAAIP,CAAgC;AAG9E,SAAA,gBAAAQ,EAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACI,GAAGC,EAAWR,GAAcI,GAAaF,GAAYV,GAAeC,CAAmB;AAAA,MACxF,KAAAM;AAAA,MACA,WAAWU,EAAM;AAAA,QACb;AAAA,QACAZ,IAAa,eAAe;AAAA,MAAA,CAC/B;AAAA,IAAA;AAAA,IAED,gBAAAU,EAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACG,WAAWE,EAAM;AAAA,UACb;AAAA,QAAA,CACH;AAAA,MAAA;AAAA,MAEAd;AAAA,MACD,gBAAAY,EAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACG,KAAKb;AAAA,UACL,WAAWe,EAAM;AAAA,YACb;AAAA,YACA,CAACd,KAAe;AAAA,YAChB,CAACC,KAAe;AAAA,UAAA,CACnB;AAAA,UACD,OAAO;AAAA,YACH,WAAW,GAAGE;AAAA,UAClB;AAAA,QAAA;AAAA,QAECZ,KACG,gBAAAqB,EAAA,cAAC,OAAI,EAAA,WAAU,6DACV,gBAAAA,EAAA,cAAA,OAAA,EAAK,GAAGF,GAAY,WAAU,iBAC3B,GAAA,gBAAAE,EAAA,cAACG,GAAe,EAAA,WAAAvB,KAAuBD,CAAM,CACjD,GACC,gBAAAqB,EAAA,cAAA,OAAA,EAAI,WAAU,uCACV,GAAAnB,EAAO,IAAI,CAACuB,GAAYC,MACrB,gBAAAL,EAAA,cAACM,GAAO,EAAA,GAAGF,GAAY,KAAK,gBAAgBC,KAAS,CACxD,CACL,CACJ;AAAA,QAEHE,EAAS,IAAIxB,GAAU,CAACyB,GAAOH,MAC5B,gBAAAL,EAAA,cAAC,OAAI,EAAA,KAAKK,EAAQ,GAAAG,CAAM,CAC3B;AAAA,QACD,gBAAAR,EAAA,cAACS,GAAc,EAAA,WAAW3B,EAAS,CAAA;AAAA,MACvC;AAAA,MACCO;AAAA,IACL;AAAA,EAAA;AAGZ,GAEaqB,IAAUC,EAAyCjC,CAAgB;AAChFgC,EAAQ,cAAc;"}