import { AriaOverlayProps } from '@react-aria/overlays';
import { AriaDialogProps } from '@react-types/dialog';
import { PatternDesign, PatternTheme } from '../../foundation/Pattern';
import { ScrollWrapperDirection } from '../ScrollWrapper/types';
import { ReactElement, ReactNode } from 'react';
import { ButtonProps } from '..';
export type ModalButton = Omit<ButtonProps, 'size'>;
export type ModalVisualProps = {
    pattern?: PatternDesign;
    foregroundColor?: PatternTheme;
};
export declare enum ModalHeaderVariant {
    Default = "Default",
    Informative = "Informative",
    Negative = "Negative",
    Positive = "Positive",
    Warning = "Warning"
}
export declare const modalHeaderVariants: Record<ModalHeaderVariant, string>;
export type ModalHeaderProps = {
    title?: string;
    leadText?: ReactNode;
    decorator?: ReactElement;
    variant?: ModalHeaderVariant;
};
type ModalBodyChildren = ReactElement | ReactElement[];
export type ModalBodyProps = {
    direction?: ScrollWrapperDirection;
    children?: ModalBodyChildren;
    horizontalPadding?: boolean;
};
export type ModalFooterProps = {
    buttons: [ModalButton] | [ModalButton, ModalButton];
};
export declare enum ModalWidth {
    Default = "Default",
    Small = "Small",
    Large = "Large"
}
export type ModalPadding = {
    [key: string]: {
        top: string;
        horizontal: string;
        bottom: string;
    };
};
export type ModalProps = {
    visual?: ModalVisualProps;
    width?: ModalWidth;
    children?: ModalBodyChildren;
    isOpen: boolean;
    onClose?: () => void;
    isDismissable?: boolean;
    zIndex?: number;
    compact?: boolean;
} & Omit<AriaOverlayProps, 'isOpen'> & AriaDialogProps;
export {};
