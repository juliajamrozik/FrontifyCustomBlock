import { InputLabel as V } from "../InputLabel/InputLabel.es.js";
import r, { forwardRef as Z, useState as b, useRef as N, useEffect as S, useCallback as q } from "react";
import { FOCUS_STYLE as R } from "../../utilities/focusStyle.es.js";
import { merge as o } from "../../utilities/merge.es.js";
import { mergeProps as T } from "@react-aria/utils";
import { useCheckbox as ee } from "@react-aria/checkbox";
import { useFocusRing as te } from "@react-aria/focus";
import { useForwardedRef as re } from "../../utilities/useForwardedRef.es.js";
import { useMemoizedId as ne } from "../../hooks/useMemoizedId.es.js";
import { useToggleState as oe } from "@react-stately/toggle";
import se from "../../foundation/Icon/Generated/IconCheckMark.es.js";
import { IconSize as y } from "../../foundation/Icon/IconSize.es.js";
import ie from "../../foundation/Icon/Generated/IconMinus.es.js";
var ae = /* @__PURE__ */ ((e) => (e.Checked = "Checked", e.Unchecked = "Unchecked", e.Mixed = "Mixed", e))(ae || {}), le = /* @__PURE__ */ ((e) => (e.Default = "Default", e.Weak = "Weak", e.Strong = "Strong", e))(le || {}), ce = /* @__PURE__ */ ((e) => (e.Default = "Default", e.Large = "Large", e.XLarge = "XLarge", e))(ce || {});
const we = (e) => e === "Checked" || e === "Mixed", O = "tw-bg-box-selected-strong tw-text-box-selected-strong-inverse hover:tw-bg-box-selected-strong-hover", de = {
  Weak: "tw-bg-box-neutral-strong tw-text-box-neutral-strong-inverse hover:tw-bg-box-neutral-strong-hover",
  Default: O,
  Strong: O
}, me = {
  Default: "tw-h-4 tw-w-4",
  Large: "tw-h-5 tw-w-5",
  XLarge: "tw-h-8 tw-w-8"
}, ue = ({
  id: e,
  emphasis: p = "Default",
  size: k = "Default",
  disabled: s,
  required: h,
  label: i,
  hideLabel: g,
  tooltip: W,
  helperText: a,
  "aria-label": E = "Checkbox",
  value: z,
  groupInputProps: U,
  onChange: I,
  state: l = "Unchecked",
  "data-test-id": c = "checkbox"
}, X) => {
  const C = ne(e), t = re(X), { focusProps: $ } = te(), P = oe({
    onChange: s ? void 0 : I,
    isSelected: l === "Checked"
    /* Checked */
  }), [H, L] = b(), [M, K] = b(), w = N(null), d = N(null), [j, Y] = b(!1), [_, A] = b(!1), D = (n) => {
    n.key === "Tab" && L(!0);
  }, F = () => {
    L(!1);
  };
  S(() => {
    var n, u, f, x;
    M || ((n = t == null ? void 0 : t.current) == null || n.removeEventListener("keyup", D), (u = t == null ? void 0 : t.current) == null || u.addEventListener("keyup", D), (f = t == null ? void 0 : t.current) == null || f.removeEventListener("blur", F), (x = t == null ? void 0 : t.current) == null || x.addEventListener("blur", F), K(!0));
  }, [M, t]);
  const { inputProps: B } = ee(
    {
      isDisabled: s,
      isRequired: h,
      isIndeterminate: l === "Mixed",
      "aria-label": E,
      value: z
    },
    P,
    t
  ), G = {
    Checked: /* @__PURE__ */ r.createElement(se, { size: k === "XLarge" ? y.Size24 : y.Size16 }),
    Mixed: /* @__PURE__ */ r.createElement(ie, null),
    Unchecked: null
  }, v = we(l), J = o([
    "tw-bg-box-disabled tw-pointer-events-none tw-text-box-disabled-inverse tw-border-line-strong",
    v && "tw-text-box-disabled-inverse tw-border-line-strong"
  ]), Q = v ? de[p] : o([
    "tw-bg-base hover:tw-bg-box-neutral",
    p === "Strong" ? "tw-border-2 tw-border-box-selected-strong" : "tw-border tw-border-line-xx-strong"
  ]), m = q(() => {
    var n, u, f, x;
    w.current && Y(((n = w.current) == null ? void 0 : n.scrollWidth) > ((u = w.current) == null ? void 0 : u.clientWidth)), d.current && A(
      ((f = d.current) == null ? void 0 : f.scrollWidth) > ((x = d.current) == null ? void 0 : x.clientWidth)
    );
  }, [w, d]);
  return S(() => {
    if (!(!i && !a || g))
      return m(), window.removeEventListener("resize", m), window.addEventListener("resize", m), () => {
        window.removeEventListener("resize", m);
      };
  }, [i, a, g, m]), /* @__PURE__ */ r.createElement("div", { className: "tw-gap-1 tw-transition-colors tw-w-full", "data-test-id": c }, /* @__PURE__ */ r.createElement("div", { className: o(["tw-inline-flex tw-flex-row tw-rounded tw-w-full", H ? R : ""]) }, /* @__PURE__ */ r.createElement(
    V,
    {
      disabled: s,
      clickable: !0,
      htmlFor: C,
      tooltip: W,
      required: h,
      bold: v
    },
    /* @__PURE__ */ r.createElement("span", { className: "tw-flex tw-items-center tw-whitespace-nowrap" }, /* @__PURE__ */ r.createElement("span", { className: "tw-inline-flex tw-mr-1.5" }, /* @__PURE__ */ r.createElement(
      "input",
      {
        ...T(U || B, $),
        id: C,
        ref: t,
        className: "tw-sr-only",
        "data-test-id": `${c}-input`,
        "aria-label": E,
        role: "checkbox",
        "aria-checked": l === "Checked",
        required: h
      }
    ), /* @__PURE__ */ r.createElement(
      "span",
      {
        "data-test-id": `${c}-icon-box`,
        "aria-hidden": "true",
        className: o([
          "tw-leading-3 tw-relative tw-flex tw-items-center tw-justify-center tw-rounded tw-shrink-0 tw-flex-none",
          me[k],
          s ? J : Q
        ])
      },
      G[l]
    )), /* @__PURE__ */ r.createElement("span", { className: "tw-inline-flex tw-flex-col tw-min-w-0" }, i && !g && /* @__PURE__ */ r.createElement(
      "span",
      {
        ref: w,
        "data-test-id": `${c}-label`,
        className: o([
          "tw-text-ellipsis tw-overflow-hidden",
          "tw-text-xs tw-select-none hover:tw-cursor-pointer hover:tw-text-black dark:hover:tw-text-white group-hover:tw-text-black dark:group-hover:tw-text-white",
          v && "tw-font-medium"
        ]),
        title: j ? i : void 0
      },
      i
    ), a && !g && /* @__PURE__ */ r.createElement(
      "span",
      {
        ref: d,
        "data-test-id": `${c}-helper-text`,
        className: o([
          "tw-text-ellipsis tw-overflow-hidden",
          "tw-font-sans tw-text-xs tw-font-normal",
          s ? "text-disabled" : "tw-text-text-weak"
        ]),
        title: _ ? a : void 0
      },
      a
    )))
  )));
}, fe = Z(ue);
fe.displayName = "FondueCheckbox";
export {
  fe as Checkbox,
  le as CheckboxEmphasis,
  ce as CheckboxSize,
  ae as CheckboxState
};
//# sourceMappingURL=Checkbox.es.js.map
