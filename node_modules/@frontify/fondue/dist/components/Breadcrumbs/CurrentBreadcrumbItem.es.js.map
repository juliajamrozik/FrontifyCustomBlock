{"version":3,"file":"CurrentBreadcrumbItem.es.js","sources":["../../../src/components/Breadcrumbs/CurrentBreadcrumbItem.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport React, { ReactElement, useRef } from 'react';\nimport { useBreadcrumbItem } from '@react-aria/breadcrumbs';\nimport { useFocusRing } from '@react-aria/focus';\nimport { mergeProps } from '@react-aria/utils';\n\nimport { Badge } from '@components/Badge';\nimport { FOCUS_STYLE } from '@utilities/focusStyle';\nimport { merge } from '@utilities/merge';\nimport { getItemElementType } from '@utilities/elements';\n\nimport { Breadcrumb } from './Breadcrumbs';\n\ntype CurrentBreadcrumbItemProps = Breadcrumb;\n\nexport const CurrentBreadcrumbItem = ({\n    label,\n    badges,\n    bold,\n    decorator,\n    link,\n    onClick,\n    'data-test-id': dataTestId = 'breadcrumb',\n}: CurrentBreadcrumbItemProps): ReactElement => {\n    const ref = useRef(null);\n    const Element = getItemElementType(link, onClick);\n    const { itemProps } = useBreadcrumbItem(\n        {\n            isCurrent: true,\n            children: label,\n            elementType: Element,\n        },\n        ref,\n    );\n\n    const elementTypeProps = { a: { href: link }, button: { onClick, type: 'button' as const }, span: {} };\n\n    const { isFocusVisible, focusProps } = useFocusRing();\n    const props = mergeProps(itemProps, focusProps, elementTypeProps[Element]);\n\n    const classNames = merge([\n        'tw-flex tw-gap-x-1 tw-items-center tw-leading-4 tw-h-6',\n        bold && 'tw-font-bold',\n        isFocusVisible && FOCUS_STYLE,\n    ]);\n\n    return (\n        <li\n            className=\"tw-w-full tw-inline-flex tw-align-middle tw-gap-x-1 tw-text-m tw-text-text tw-items-center\"\n            data-test-id={`${dataTestId}-item`}\n        >\n            <Element ref={ref} {...props} className={classNames}>\n                {decorator}\n                {label}\n            </Element>\n            {badges?.map(({ children: badge, ...props }, index) => (\n                <Badge {...props} key={`breadcrumb-badge-${index}`}>\n                    {badge}\n                </Badge>\n            ))}\n        </li>\n    );\n};\nCurrentBreadcrumbItem.displayName = 'FondueCurrentBreadcrumbItem';\n"],"names":["CurrentBreadcrumbItem","label","badges","bold","decorator","link","onClick","dataTestId","ref","useRef","Element","getItemElementType","itemProps","useBreadcrumbItem","elementTypeProps","isFocusVisible","focusProps","useFocusRing","props","mergeProps","classNames","merge","FOCUS_STYLE","React","badge","index","Badge"],"mappings":";;;;;;;;AAgBO,MAAMA,IAAwB,CAAC;AAAA,EAClC,OAAAC;AAAA,EACA,QAAAC;AAAA,EACA,MAAAC;AAAA,EACA,WAAAC;AAAA,EACA,MAAAC;AAAA,EACA,SAAAC;AAAA,EACA,gBAAgBC,IAAa;AACjC,MAAgD;AACtC,QAAAC,IAAMC,EAAO,IAAI,GACjBC,IAAUC,EAAmBN,GAAMC,CAAO,GAC1C,EAAE,WAAAM,MAAcC;AAAA,IAClB;AAAA,MACI,WAAW;AAAA,MACX,UAAUZ;AAAA,MACV,aAAaS;AAAA,IACjB;AAAA,IACAF;AAAA,EAAA,GAGEM,IAAmB,EAAE,GAAG,EAAE,MAAMT,EAAK,GAAG,QAAQ,EAAE,SAAAC,GAAS,MAAM,SAAqB,GAAA,MAAM,CAAG,EAAA,GAE/F,EAAE,gBAAAS,GAAgB,YAAAC,EAAW,IAAIC,EAAa,GAC9CC,IAAQC,EAAWP,GAAWI,GAAYF,EAAiBJ,CAAO,CAAC,GAEnEU,IAAaC,EAAM;AAAA,IACrB;AAAA,IACAlB,KAAQ;AAAA,IACRY,KAAkBO;AAAA,EAAA,CACrB;AAGG,SAAA,gBAAAC,EAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACG,WAAU;AAAA,MACV,gBAAc,GAAGhB;AAAA,IAAA;AAAA,IAEjB,gBAAAgB,EAAA,cAACb,KAAQ,KAAAF,GAAW,GAAGU,GAAO,WAAWE,EAAA,GACpChB,GACAH,CACL;AAAA,IACCC,KAAA,gBAAAA,EAAQ,IAAI,CAAC,EAAE,UAAUsB,GAAO,GAAGN,EAAM,GAAGO,MACzC,gBAAAF,EAAA,cAACG,KAAO,GAAGR,GAAO,KAAK,oBAAoBO,OACtCD,CACL;AAAA,EACH;AAGb;AACAxB,EAAsB,cAAc;"}