import { useMemoizedId as k } from "../../hooks/useMemoizedId.es.js";
import { useFocusRing as G } from "@react-aria/focus";
import { setInteractionModality as V } from "@react-aria/interactions";
import { useRadio as F, useRadioGroup as L } from "@react-aria/radio";
import { VisuallyHidden as M } from "@react-aria/visually-hidden";
import { useRadioGroupState as P } from "@react-stately/radio";
import { FOCUS_STYLE as T } from "../../utilities/focusStyle.es.js";
import { merge as b } from "../../utilities/merge.es.js";
import { motion as j } from "framer-motion";
import t, { forwardRef as D, useRef as E, useMemo as X } from "react";
const g = (w) => w.icon !== void 0, y = D((w, s) => {
  const { id: f, item: e, disabled: l, radioGroupState: o, size: a } = w, i = E(null), d = e.id === o.selectedValue, { inputProps: p } = F(
    {
      value: e.id,
      "aria-label": g(e) ? e.ariaLabel : e.value.toString(),
      isDisabled: l,
      id: d ? f : void 0
    },
    o,
    i
  ), { isFocusVisible: c, focusProps: v } = G(), m = () => {
    var n;
    l || (o.setSelectedValue(e.id), (n = i.current) == null || n.focus(), V("pointer"));
  }, h = () => {
    switch (!0) {
      case g(e):
        return "fondue-segmented-controls-item-icon";
      case typeof e.value == "string":
        return "fondue-segmented-controls-item-text";
      default:
        return "fondue-segmented-controls-item-number";
    }
  };
  return /* @__PURE__ */ t.createElement(
    "div",
    {
      key: e.id,
      ref: s,
      className: b([
        "tw-relative",
        "after:tw-content-[''] after:tw-border-r after:tw-border-solid after:tw-border-line-strong after:tw-absolute after:tw-right-0 after:tw-h-full last:after:tw-hidden",
        c && T
      ])
    },
    /* @__PURE__ */ t.createElement(
      "div",
      {
        role: "none",
        onClick: m,
        "data-test-id": h(),
        className: b([
          "tw-relative tw-w-full tw-py-2 tw-inline-flex tw-justify-center tw-items-center tw-font-sans tw-font-normal tw-h-full tw-text-center",
          a === "small" ? "tw-px-2" : "tw-px-4",
          d && !l ? "tw-text-text" : "tw-text-text-weak",
          l ? "tw-text-box-disabled-inverse hover:tw-cursor-not-allowed" : "hover:tw-text-text hover:tw-cursor-pointer"
        ])
      },
      /* @__PURE__ */ t.createElement(M, null, /* @__PURE__ */ t.createElement(
        "input",
        {
          ...p,
          ...v,
          "data-test-id": "fondue-segmented-controls-input",
          ref: i
        }
      )),
      /* @__PURE__ */ t.createElement("span", { className: "tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-flex" }, g(e) && /* @__PURE__ */ t.createElement("span", { className: "tw-leading-3", "aria-label": e.ariaLabel }, e.icon), e.value && /* @__PURE__ */ t.createElement("span", { className: g(e) ? "tw-ml-2" : "" }, e.value.toString()))
    )
  );
});
y.displayName = "SegmentedControlsItem";
const z = ({
  id: w,
  items: s,
  activeItemId: f,
  onChange: e,
  ariaLabel: l = "SegmentedControls",
  disabled: o = !1,
  hugWidth: a = !1,
  size: i
}) => {
  var S;
  const d = k(w), p = { onChange: e, value: f, label: l, isDisabled: o }, c = P(p), { radioGroupProps: v } = L(p, c), m = E([]), h = X(() => s.map((r, x) => /* @__PURE__ */ t.createElement(
    y,
    {
      id: d,
      item: r,
      disabled: o,
      radioGroupState: c,
      ref: (u) => m.current[x] = u,
      key: `fondue-segmented-controls-${d}-item-${r.id}`,
      size: i
    }
  )), [s, d, o, c, i]), n = s.findIndex((r) => r.id === c.selectedValue), N = a ? "" : "tw-w-full", C = a ? "tw-flex" : "tw-grid tw-grid-flow-col tw-auto-cols-fr tw-justify-evenly", R = () => {
    var x;
    let r = -1;
    for (let u = 0; u < n; u++)
      r += ((x = m.current[u]) == null ? void 0 : x.clientWidth) || 0;
    return `${r}px`;
  }, I = a ? `${(S = m.current[n]) == null ? void 0 : S.clientWidth}px` : `${100 / s.length}%`, $ = a ? R() : `calc(${100 * n}% - ${2 * n}px)`;
  return /* @__PURE__ */ t.createElement("div", { className: "tw-flex" }, /* @__PURE__ */ t.createElement(
    "fieldset",
    {
      ...v,
      "data-test-id": "fondue-segmented-controls",
      className: b([
        "tw-relative tw-h-9 tw-p-0 tw-border tw-border-solid tw-border-line-strong tw-m-0 tw-bg-base-alt tw-rounded tw-font-sans tw-text-s tw-select-none",
        N,
        C
      ])
    },
    /* @__PURE__ */ t.createElement(
      j.div,
      {
        "aria-hidden": "true",
        animate: { x: $, width: I },
        initial: !1,
        transition: { type: "tween", duration: 0.3 },
        hidden: !f,
        className: b([
          "tw-absolute tw--inset-px tw-h-full tw-box-content tw-border tw-rounded tw-pointer-events-none",
          o ? "tw-border-line-x-strong tw-bg-box-disabled" : "tw-border-line-xx-strong tw-bg-base"
        ])
      }
    ),
    h
  ));
};
z.displayName = "FondueSegmentedControls";
export {
  z as SegmentedControls
};
//# sourceMappingURL=SegmentedControls.es.js.map
