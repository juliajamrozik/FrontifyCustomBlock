{"version":3,"file":"SegmentedControls.es.js","sources":["../../../src/components/SegmentedControls/SegmentedControls.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { IconProps } from '@foundation/Icon/IconProps';\nimport { useMemoizedId } from '@hooks/useMemoizedId';\nimport { useFocusRing } from '@react-aria/focus';\nimport { setInteractionModality } from '@react-aria/interactions';\nimport { useRadio, useRadioGroup } from '@react-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioGroupState, useRadioGroupState } from '@react-stately/radio';\nimport { FOCUS_STYLE } from '@utilities/focusStyle';\nimport { merge } from '@utilities/merge';\nimport { motion } from 'framer-motion';\nimport React, { ReactElement, forwardRef, useMemo, useRef } from 'react';\n\nexport type IconItem = {\n    id: string;\n    icon: ReactElement<IconProps>;\n    value?: string;\n    ariaLabel: string;\n};\n\nexport type TextOrNumberItem = {\n    id: string;\n    value: string | number;\n};\n\nexport type SegmentSize = 'small' | 'medium';\n\nexport type SegmentedControlsProps = {\n    id?: string;\n    items: (TextOrNumberItem | IconItem)[];\n    activeItemId?: string;\n    onChange: (id: string) => void;\n    ariaLabel?: string;\n    disabled?: boolean;\n    hugWidth?: boolean;\n    size?: SegmentSize;\n};\n\nconst isIconItem = (item: TextOrNumberItem | IconItem): item is IconItem => (item as IconItem).icon !== undefined;\n\ninterface SegmentedControlsItemProps {\n    id: string;\n    item: TextOrNumberItem | IconItem;\n    disabled: boolean;\n    radioGroupState: RadioGroupState;\n    size?: SegmentSize;\n}\n\nconst SegmentedControlsItem = forwardRef<HTMLDivElement, SegmentedControlsItemProps>((props, ref) => {\n    const { id, item, disabled, radioGroupState, size } = props;\n    const inputRef = useRef<HTMLInputElement | null>(null);\n    const isActive = item.id === radioGroupState.selectedValue;\n    const { inputProps } = useRadio(\n        {\n            value: item.id,\n            'aria-label': isIconItem(item) ? item.ariaLabel : item.value.toString(),\n            isDisabled: disabled,\n            id: isActive ? id : undefined,\n        },\n        radioGroupState,\n        inputRef,\n    );\n    const { isFocusVisible, focusProps } = useFocusRing();\n\n    const handleMockLabelClick = () => {\n        if (!disabled) {\n            radioGroupState.setSelectedValue(item.id);\n            inputRef.current?.focus();\n            setInteractionModality('pointer');\n        }\n    };\n\n    const getSegmentedControlsItemTestId = () => {\n        switch (true) {\n            case isIconItem(item):\n                return 'fondue-segmented-controls-item-icon';\n            case typeof item.value === 'string':\n                return 'fondue-segmented-controls-item-text';\n            default:\n                return 'fondue-segmented-controls-item-number';\n        }\n    };\n\n    return (\n        <div\n            key={item.id}\n            ref={ref}\n            className={merge([\n                'tw-relative',\n                \"after:tw-content-[''] after:tw-border-r after:tw-border-solid after:tw-border-line-strong after:tw-absolute after:tw-right-0 after:tw-h-full last:after:tw-hidden\",\n                isFocusVisible && FOCUS_STYLE,\n            ])}\n        >\n            <div\n                // TODO: Change element back to label when bug #2380 from @react-aria is fixed\n                // https://github.com/adobe/react-spectrum/issues/2380\n                role=\"none\"\n                onClick={handleMockLabelClick}\n                data-test-id={getSegmentedControlsItemTestId()}\n                className={merge([\n                    'tw-relative tw-w-full tw-py-2 tw-inline-flex tw-justify-center tw-items-center tw-font-sans tw-font-normal tw-h-full tw-text-center',\n                    size === 'small' ? 'tw-px-2' : 'tw-px-4',\n                    isActive && !disabled ? 'tw-text-text' : 'tw-text-text-weak',\n                    !disabled\n                        ? 'hover:tw-text-text hover:tw-cursor-pointer'\n                        : 'tw-text-box-disabled-inverse hover:tw-cursor-not-allowed',\n                ])}\n            >\n                <VisuallyHidden>\n                    <input\n                        {...inputProps}\n                        {...focusProps}\n                        data-test-id=\"fondue-segmented-controls-input\"\n                        ref={inputRef}\n                    />\n                </VisuallyHidden>\n                <span className=\"tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-flex\">\n                    {isIconItem(item) && (\n                        <span className=\"tw-leading-3\" aria-label={item.ariaLabel}>\n                            {item.icon}\n                        </span>\n                    )}\n                    {item.value && <span className={isIconItem(item) ? 'tw-ml-2' : ''}>{item.value.toString()}</span>}\n                </span>\n            </div>\n        </div>\n    );\n});\n\nSegmentedControlsItem.displayName = 'SegmentedControlsItem';\n\nexport const SegmentedControls = ({\n    id: propId,\n    items,\n    activeItemId,\n    onChange,\n    ariaLabel = 'SegmentedControls',\n    disabled = false,\n    hugWidth = false,\n    size,\n}: SegmentedControlsProps): ReactElement => {\n    const id = useMemoizedId(propId);\n    const groupProps = { onChange, value: activeItemId, label: ariaLabel, isDisabled: disabled };\n    const radioGroupState = useRadioGroupState(groupProps);\n    const { radioGroupProps } = useRadioGroup(groupProps, radioGroupState);\n    const itemsRef = useRef<(HTMLDivElement | null)[]>([]);\n    const itemElements = useMemo(() => {\n        return items.map((item, index) => (\n            <SegmentedControlsItem\n                id={id}\n                item={item}\n                disabled={disabled}\n                radioGroupState={radioGroupState}\n                ref={(el) => (itemsRef.current[index] = el)}\n                key={`fondue-segmented-controls-${id}-item-${item.id}`}\n                size={size}\n            />\n        ));\n    }, [items, id, disabled, radioGroupState, size]);\n    const selectedIndex = items.findIndex((item) => item.id === radioGroupState.selectedValue);\n    const width = hugWidth ? '' : 'tw-w-full';\n    const alignment = hugWidth ? 'tw-flex' : 'tw-grid tw-grid-flow-col tw-auto-cols-fr tw-justify-evenly';\n\n    const getSliderX = () => {\n        let translateX = -1;\n        for (let i = 0; i < selectedIndex; i++) {\n            translateX += itemsRef.current[i]?.clientWidth || 0;\n        }\n        return `${translateX}px`;\n    };\n\n    const sliderWidth = hugWidth ? `${itemsRef.current[selectedIndex]?.clientWidth}px` : `${100 / items.length}%`;\n    const sliderTranslation = hugWidth ? getSliderX() : `calc(${100 * selectedIndex}% - ${2 * selectedIndex}px)`;\n\n    return (\n        <div className=\"tw-flex\">\n            <fieldset\n                {...radioGroupProps}\n                data-test-id=\"fondue-segmented-controls\"\n                className={merge([\n                    'tw-relative tw-h-9 tw-p-0 tw-border tw-border-solid tw-border-line-strong tw-m-0 tw-bg-base-alt tw-rounded tw-font-sans tw-text-s tw-select-none',\n                    width,\n                    alignment,\n                ])}\n            >\n                <motion.div\n                    aria-hidden=\"true\"\n                    // div border is not included in width so it must be subtracted from translation.\n                    animate={{ x: sliderTranslation, width: sliderWidth }}\n                    initial={false}\n                    transition={{ type: 'tween', duration: 0.3 }}\n                    hidden={!activeItemId}\n                    className={merge([\n                        'tw-absolute tw--inset-px tw-h-full tw-box-content tw-border tw-rounded tw-pointer-events-none',\n                        disabled ? 'tw-border-line-x-strong tw-bg-box-disabled' : 'tw-border-line-xx-strong tw-bg-base',\n                    ])}\n                />\n                {itemElements}\n            </fieldset>\n        </div>\n    );\n};\nSegmentedControls.displayName = 'FondueSegmentedControls';\n"],"names":["isIconItem","item","SegmentedControlsItem","forwardRef","props","ref","id","disabled","radioGroupState","size","inputRef","useRef","isActive","inputProps","useRadio","isFocusVisible","focusProps","useFocusRing","handleMockLabelClick","_a","setInteractionModality","getSegmentedControlsItemTestId","React","merge","FOCUS_STYLE","VisuallyHidden","SegmentedControls","propId","items","activeItemId","onChange","ariaLabel","hugWidth","useMemoizedId","groupProps","useRadioGroupState","radioGroupProps","useRadioGroup","itemsRef","itemElements","useMemo","index","el","selectedIndex","width","alignment","getSliderX","translateX","i","sliderWidth","sliderTranslation","motion"],"mappings":"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"}