{"version":3,"file":"types.es.js","sources":["../../../src/components/LinkChooser/types.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { CheckboxState } from '@components/Checkbox/Checkbox';\nimport { MenuBlock, MenuItemType } from '@components/Dropdown/SelectMenu/SelectMenu';\nimport { AriaListBoxOptions } from '@react-aria/listbox';\nimport { ComboBoxState } from '@react-stately/combobox';\nimport { ListState } from '@react-stately/list';\nimport { Node } from '@react-types/shared';\nimport {\n    HTMLAttributes,\n    InputHTMLAttributes,\n    Key,\n    KeyboardEvent,\n    MouseEvent,\n    MutableRefObject,\n    ReactElement,\n    ReactNode,\n    RefObject,\n} from 'react';\nimport { DoneInvokeEvent, Interpreter } from 'xstate';\nimport { Validation } from '@utilities/validation';\n\nexport type MachineService = Interpreter<\n    LinkChooserContext,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    any,\n    DoneInvokeEvent<LinkChooserEventData>,\n    {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        value: any;\n        context: LinkChooserContext;\n    }\n>;\n\nexport enum IconName {\n    Block = 'BLOCK',\n    Document = 'DOCUMENT',\n    Library = 'LIBRARY',\n    Link = 'LINK',\n    External = 'EXTERNAL',\n    Template = 'TEMPLATE',\n}\n\nexport type ExtraSection = {\n    id: string;\n    title: string;\n    getResults?: (query: string) => Promise<SearchResult[]>;\n    renderPreview?: (item: SearchResult) => ReactElement;\n};\n\nexport type LinkChooserProps = {\n    selectedResult?: SearchResult | null;\n    openInNewTab: boolean;\n    ariaLabel?: string;\n    label?: string;\n    placeholder?: string;\n    disabled?: boolean;\n    clearable?: boolean;\n    required?: boolean;\n    validation?: Validation;\n    extraSections?: ExtraSection[];\n    onOpenInNewTabChange: (value: boolean) => void;\n    onLinkChange: (value: SearchResult | null) => void;\n    readonly clipboardOptions?: Clipboard;\n    readonly getGlobalByQuery?: (query: string) => Promise<SearchResult[]>;\n    readonly openPreview?: (value: string, target: string) => void;\n    'data-test-id'?: string;\n};\n\nexport type SearchResult = Omit<MenuItemType, 'title'> & { icon: string; title: string; local?: boolean };\n\nexport type ImageSearchResult = SearchResult & { preview: string };\n\nexport type SearchMenuBlock = Omit<MenuBlock, 'menuItems'> & { menuItems: SearchResult[] };\n\nexport type SearchResultListProps = AriaListBoxOptions<unknown> & {\n    listBoxRef?: RefObject<HTMLUListElement>;\n    state: ListState<unknown>;\n    menuBlocks: SearchMenuBlock[];\n    border?: boolean;\n    hasItems?: boolean;\n    machineService: MachineService;\n};\n\nexport type SearchResultSectionProps = {\n    heading: Node<unknown>;\n    state: ListState<unknown>;\n    keyItemRecord: Record<string, SearchResult>;\n    machineService: MachineService;\n};\n\nexport type SearchResultOptionProps = {\n    item: Node<unknown>;\n    state: ListState<unknown>;\n    keyItemRecord: Record<string, SearchResult>;\n    machineService: MachineService;\n};\n\nexport type ImageMenuItemProps = {\n    title: ReactNode;\n    subtitle?: string;\n    preview?: string;\n};\n\nexport type NavigationMenuProps = {\n    machineService: MachineService;\n    state: ListState<unknown>;\n};\n\nexport type NavigationMenuItemProps = {\n    section: ExtraSection;\n    onPress: (event: KeyboardEvent<HTMLDivElement> | MouseEvent<HTMLDivElement>) => void;\n    state: ListState<unknown>;\n    direction?: 'left' | 'right';\n};\n\nexport type SearchInputProps = {\n    id?: string;\n    ariaProps: InputHTMLAttributes<HTMLInputElement>;\n    selectedResult: SearchResult | null;\n    decorator?: ReactElement;\n    clearable?: boolean;\n    required?: boolean;\n    disabled?: boolean;\n    machineService: MachineService;\n    validation: Validation;\n    onClear?: () => void;\n    onClick?: (event: MouseEvent<HTMLDivElement>) => void;\n    onMouseDown?: (event: MouseEvent<HTMLDivElement>) => void;\n};\n\nexport type PopoverProps = {\n    popoverRef?: RefObject<HTMLDivElement>;\n    maxHeight?: string;\n    children: ReactNode;\n    isOpen?: boolean;\n    onClose: () => void;\n};\n\nexport type LinkChooserContext = {\n    searchResults: SearchResult[];\n    selectedResult: SearchResult | null;\n    query: string;\n    interruptedFetch: boolean;\n    extraSections: ExtraSection[];\n    currentSectionId: string;\n    getExtraResultsByQuery: ((query: string) => Promise<SearchResult[]>) | null;\n    readonly clipboardOptions: Clipboard;\n    readonly getGlobalByQuery: (query: string) => Promise<SearchResult[]>;\n    readonly onLinkChange: (value: SearchResult | null) => void;\n    readonly openPreview: (value: string, target: string) => void;\n};\n\nexport type LinkChooserEventData = {\n    searchResults?: SearchResult[];\n    selectedResult?: SearchResult | null;\n    query?: string;\n    openInNewTab?: CheckboxState;\n    getExtraResultsByQuery?: ((query: string) => Promise<SearchResult[]>) | null;\n    currentSectionId?: string;\n};\n\nexport type Clipboard = {\n    writeText(newClipText: string): Promise<void>;\n};\n\nexport type IconButtonProps = {\n    disabled: boolean;\n    title: string;\n    ariaLabel: string;\n    testId: string;\n    icon: ReactElement;\n    isComboBoxControl?: boolean;\n    onClick?: () => void;\n};\n\nexport type ManualComboBoxEventProps = {\n    inputProps: HTMLAttributes<HTMLInputElement>;\n    inputRef: MutableRefObject<HTMLInputElement | null>;\n    popoverRef: MutableRefObject<HTMLDivElement | null>;\n    state: ComboBoxState<object>;\n};\n\nexport type ManualComboBoxEvents = {\n    onOpen: () => void;\n    onClose: () => void;\n    onNavigate: (key: Key) => void;\n    onSelect: (key: Key) => void;\n};\n"],"names":["IconName"],"mappings":"AAkCY,IAAAA,sBAAAA,OACRA,EAAA,QAAQ,SACRA,EAAA,WAAW,YACXA,EAAA,UAAU,WACVA,EAAA,OAAO,QACPA,EAAA,WAAW,YACXA,EAAA,WAAW,YANHA,IAAAA,KAAA,CAAA,CAAA;"}