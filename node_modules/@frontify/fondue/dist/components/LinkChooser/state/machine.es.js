import { createMachine as E } from "xstate";
import { isFetching as g } from "../utils/state.es.js";
import { setExtraResultsByQuery as a, setCurrentSectionId as i, clearSelectedResult as m, copyLinkToClipboard as C, emitSelectSearchResult as y, fetchGlobalSearchResults as d, openPreviewContext as D, populateDropdownSearchResultsWithRecentQueries as f, fillResultsWithNewRecentQueries as L, setSelectedSearchResult as F, storeNewSelectedResult as O, replaceCustomLink as T, replaceCustomLinkWithSelected as _, updateDropdownSearchResults as N, updateQueryFromObject as w, updateQueryFromString as I, interruptFetching as Q, resolveFetching as k, fetchExtraSectionResults as A } from "./actions.es.js";
import { SectionState as e, LinkChooserState as t, DropdownState as n } from "./types.es.js";
const l = [
  "storeNewSelectedResult",
  "updateQueryFromObject",
  "setSelectedSearchResult",
  "emitSelectSearchResult"
], u = [
  "clearSelectedResult",
  "updateQueryFromString",
  "emitSelectSearchResult",
  "populateDropdownSearchResultsWithRecentQueries"
], h = {
  CLEARING: {
    actions: [...u]
  },
  OPEN_PREVIEW: {
    actions: ["openPreviewContext"]
  },
  COPY_TO_CLIPBOARD: {
    actions: ["copyLinkToClipboard"]
  }
}, W = 500, r = {
  TYPING: [
    {
      target: e.Typing,
      internal: !1,
      cond: "hasNoValue",
      actions: [...u]
    },
    {
      target: e.Typing,
      internal: !1,
      actions: ["updateQueryFromString"]
    }
  ]
}, S = (o, s, c) => ({
  initial: o,
  states: {
    [e.Loaded]: {
      on: {
        ...r
      }
    },
    [e.Typing]: {
      after: {
        [W]: e.Fetching
      },
      on: {
        ...r
      }
    },
    [e.Fetching]: {
      invoke: {
        id: s,
        src: c,
        onDone: [
          {
            target: e.Loaded,
            actions: ["updateDropdownSearchResults", "replaceCustomLink", "resolveFetching"],
            cond: {
              type: "isSection",
              value: [n.Default]
            }
          },
          {
            target: e.Loaded,
            actions: ["updateDropdownSearchResults"]
          }
        ],
        onError: e.Error
      },
      on: {
        ...r
      }
    },
    [e.Error]: {
      on: {
        ...r
      }
    }
  }
}), G = E(
  {
    id: "link-chooser",
    initial: t.Idle,
    states: {
      [t.Idle]: {
        on: {
          OPEN_DROPDOWN: [
            {
              target: t.Focused,
              actions: ["populateDropdownSearchResultsWithRecentQueries"],
              cond: "isQueryEmpty"
            },
            {
              target: t.Focused
            }
          ],
          ...h
        }
      },
      [t.Focused]: {
        initial: n.Default,
        states: {
          [n.Default]: {
            ...S(e.Loaded, "fetchGlobal", d),
            on: {
              SELECT_EXTRA_SECTION: {
                target: n.ExtraSection,
                actions: [a, i]
              }
            }
          },
          [n.ExtraSection]: {
            ...S(
              e.Fetching,
              "fetchExtraSectionResults",
              A
            ),
            on: {
              BACK_TO_DEFAULT: {
                target: `${n.Default}.${e.Fetching}`,
                actions: [a, i]
              },
              CLEARING: {
                target: n.Default,
                actions: u
              }
            }
          }
        },
        on: {
          CLOSE_DROPDOWN: [
            {
              target: t.Idle,
              actions: [...l, "interruptFetching", "replaceCustomLinkWithSelected"],
              cond: "shouldRefetch"
            },
            {
              target: t.Idle,
              actions: [...l, "replaceCustomLinkWithSelected"]
            }
          ],
          SET_SELECTED_SEARCH_RESULT: {
            target: t.Idle,
            actions: ["fillResultsWithNewRecentQueries", ...l]
          },
          ...h
        }
      }
    }
  },
  {
    guards: {
      isSection: (o, s, c) => Object.values(e).some(
        (p) => c.cond.value.some(
          (R) => c.state.matches(`${t.Focused}.${R}.${p}`)
        )
      ),
      shouldRefetch: (o, s, c) => g(c.state.matches) && !!o.query,
      isQueryEmpty: (o) => !o.query,
      hasNoValue: (o, s) => !s.data.query
    },
    actions: {
      clearSelectedResult: m,
      copyLinkToClipboard: C,
      emitSelectSearchResult: y,
      fetchGlobalSearchResults: d,
      setExtraResultsByQuery: a,
      setCurrentSectionId: i,
      openPreviewContext: D,
      populateDropdownSearchResultsWithRecentQueries: f,
      fillResultsWithNewRecentQueries: L,
      setSelectedSearchResult: F,
      storeNewSelectedResult: O,
      replaceCustomLink: T,
      replaceCustomLinkWithSelected: _,
      updateDropdownSearchResults: N,
      updateQueryFromObject: w,
      updateQueryFromString: I,
      interruptFetching: Q,
      resolveFetching: k
    }
  }
);
export {
  G as linkChooserMachine
};
//# sourceMappingURL=machine.es.js.map
