{"version":3,"file":"actions.es.js","sources":["../../../../src/components/LinkChooser/state/actions.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { QUERIES_STORAGE_KEY } from '@components/LinkChooser/LinkChooser';\nimport { DoneInvokeEvent, assign } from 'xstate';\nimport { defaultSection } from '../sections';\nimport { LinkChooserContext, LinkChooserEventData, SearchResult } from '../types';\nimport { isCustomLink } from '../utils/helpers';\nimport { createCustomLink, mergeResultWithRecentQueries, retrieveRecentQueries } from '../utils/transformers';\nimport { DropdownState, LinkChooserState, SectionState } from './types';\n\nexport const updateQueryFromString = assign<LinkChooserContext, DoneInvokeEvent<LinkChooserEventData>>({\n    query: (_context, { data }) => data.query ?? '',\n});\n\nexport const updateQueryFromObject = assign<LinkChooserContext, DoneInvokeEvent<LinkChooserEventData>>({\n    query: (_context, { data }) => data.selectedResult?.title ?? '',\n});\n\nexport const replaceCustomLink = assign<LinkChooserContext, DoneInvokeEvent<LinkChooserEventData>>({\n    searchResults: (context) => {\n        const customLinkSelected = isCustomLink(context.selectedResult);\n        const updatedCustomLink =\n            customLinkSelected && context.selectedResult?.title === context.query\n                ? context.selectedResult\n                : createCustomLink(context.query);\n\n        return context.query\n            ? [...context.searchResults.filter((results) => !isCustomLink(results)), updatedCustomLink]\n            : context.searchResults;\n    },\n});\n\nexport const replaceCustomLinkWithSelected = assign<LinkChooserContext, DoneInvokeEvent<LinkChooserEventData>>({\n    searchResults: (context, { data }, meta) => {\n        const { selectedResult } = data;\n        if (!context.query || !selectedResult) {\n            return context.searchResults;\n        }\n\n        const isSelectedCustomLink = isCustomLink(selectedResult);\n        const resultsWithoutCustomLinks = context.searchResults.filter((result) => !isCustomLink(result));\n\n        const defaultResultsHaveLoaded = meta.state?.matches(\n            `${LinkChooserState.Focused}.${DropdownState.Default}.${SectionState.Loaded}`,\n        );\n\n        const isDisplayingLocalStorage =\n            (!context.searchResults || context.searchResults.some((results) => results.local)) &&\n            defaultResultsHaveLoaded;\n\n        if (isDisplayingLocalStorage) {\n            return context.searchResults;\n        }\n        if (isSelectedCustomLink) {\n            return [...resultsWithoutCustomLinks, selectedResult];\n        } else {\n            return [...resultsWithoutCustomLinks, createCustomLink(context.query)];\n        }\n    },\n});\n\nexport const setExtraResultsByQuery = assign<LinkChooserContext, DoneInvokeEvent<LinkChooserEventData>>({\n    getExtraResultsByQuery: (_, { data }) => data.getExtraResultsByQuery ?? null,\n});\n\nexport const setCurrentSectionId = assign<LinkChooserContext, DoneInvokeEvent<LinkChooserEventData>>({\n    currentSectionId: (_, { data }) => data.currentSectionId ?? defaultSection.id,\n});\n\nexport const setSelectedSearchResult = assign<LinkChooserContext, DoneInvokeEvent<LinkChooserEventData>>({\n    selectedResult: (_, { data }) => data.selectedResult ?? null,\n});\n\nexport const populateDropdownSearchResultsWithRecentQueries = assign<\n    LinkChooserContext,\n    DoneInvokeEvent<LinkChooserEventData>\n>({\n    searchResults: () => retrieveRecentQueries(),\n});\n\nexport const storeNewSelectedResult = (\n    _context: LinkChooserContext,\n    { data }: DoneInvokeEvent<LinkChooserEventData>,\n): void => {\n    const { selectedResult } = data;\n    if (selectedResult) {\n        const updatedQueries = mergeResultWithRecentQueries(selectedResult);\n        localStorage.setItem(QUERIES_STORAGE_KEY, JSON.stringify(updatedQueries));\n    }\n};\n\nexport const fillResultsWithNewRecentQueries = assign<LinkChooserContext, DoneInvokeEvent<LinkChooserEventData>>({\n    searchResults: (_context: LinkChooserContext, { data }: DoneInvokeEvent<LinkChooserEventData>) =>\n        data.selectedResult ? mergeResultWithRecentQueries(data.selectedResult) : retrieveRecentQueries(),\n});\n\nexport const emitSelectSearchResult = (context: LinkChooserContext): void => {\n    context.onLinkChange(context.selectedResult);\n};\n\nexport const clearSelectedResult = assign<LinkChooserContext, DoneInvokeEvent<LinkChooserEventData>>({\n    selectedResult: null,\n});\n\nexport const copyLinkToClipboard = ({ clipboardOptions, selectedResult }: LinkChooserContext): void => {\n    selectedResult?.link && clipboardOptions.writeText(selectedResult.link);\n};\n\nexport const openPreviewContext = ({ openPreview, selectedResult }: LinkChooserContext): void => {\n    selectedResult?.link && openPreview(selectedResult.link, '_blank');\n};\n\nexport const updateDropdownSearchResults = assign<LinkChooserContext, DoneInvokeEvent<LinkChooserEventData>>({\n    searchResults: (_context, { data }) => data.searchResults ?? [],\n});\n\nexport const fetchGlobalSearchResults = async (context: LinkChooserContext): Promise<LinkChooserEventData> => {\n    const results = context.query ? await context.getGlobalByQuery(context.query) : retrieveRecentQueries();\n    return { searchResults: results };\n};\n\nexport const fetchExtraSectionResults = async (context: LinkChooserContext): Promise<LinkChooserEventData> => {\n    let results: SearchResult[] = [];\n\n    if (context.getExtraResultsByQuery !== null) {\n        results = await context.getExtraResultsByQuery(context.query);\n    }\n\n    return { searchResults: results };\n};\n\nexport const interruptFetching = assign<LinkChooserContext, DoneInvokeEvent<LinkChooserEventData>>({\n    interruptedFetch: () => true,\n});\n\nexport const resolveFetching = assign<LinkChooserContext, DoneInvokeEvent<LinkChooserEventData>>({\n    interruptedFetch: () => false,\n});\n"],"names":["updateQueryFromString","assign","_context","data","updateQueryFromObject","_a","replaceCustomLink","context","updatedCustomLink","isCustomLink","createCustomLink","results","replaceCustomLinkWithSelected","meta","selectedResult","isSelectedCustomLink","resultsWithoutCustomLinks","result","defaultResultsHaveLoaded","LinkChooserState","DropdownState","SectionState","setExtraResultsByQuery","_","setCurrentSectionId","defaultSection","setSelectedSearchResult","populateDropdownSearchResultsWithRecentQueries","retrieveRecentQueries","storeNewSelectedResult","updatedQueries","mergeResultWithRecentQueries","QUERIES_STORAGE_KEY","fillResultsWithNewRecentQueries","emitSelectSearchResult","clearSelectedResult","copyLinkToClipboard","clipboardOptions","openPreviewContext","openPreview","updateDropdownSearchResults","fetchGlobalSearchResults","fetchExtraSectionResults","interruptFetching","resolveFetching"],"mappings":"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"}