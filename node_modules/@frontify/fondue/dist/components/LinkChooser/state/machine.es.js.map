{"version":3,"file":"machine.es.js","sources":["../../../../src/components/LinkChooser/state/machine.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { DoneInvokeEvent, createMachine } from 'xstate';\nimport { LinkChooserContext, LinkChooserEventData } from '../types';\nimport { isFetching } from '../utils/state';\nimport {\n    clearSelectedResult,\n    copyLinkToClipboard,\n    emitSelectSearchResult,\n    fetchExtraSectionResults,\n    fetchGlobalSearchResults,\n    fillResultsWithNewRecentQueries,\n    interruptFetching,\n    openPreviewContext,\n    populateDropdownSearchResultsWithRecentQueries,\n    replaceCustomLink,\n    replaceCustomLinkWithSelected,\n    resolveFetching,\n    setCurrentSectionId,\n    setExtraResultsByQuery,\n    setSelectedSearchResult,\n    storeNewSelectedResult,\n    updateDropdownSearchResults,\n    updateQueryFromObject,\n    updateQueryFromString,\n} from './actions';\nimport { DropdownState, LinkChooserState, SectionState } from './types';\n\nconst closeActions = [\n    'storeNewSelectedResult',\n    'updateQueryFromObject',\n    'setSelectedSearchResult',\n    'emitSelectSearchResult',\n];\n\nconst clearingActions = [\n    'clearSelectedResult',\n    'updateQueryFromString',\n    'emitSelectSearchResult',\n    'populateDropdownSearchResultsWithRecentQueries',\n];\n\nconst sharedActions = {\n    CLEARING: {\n        actions: [...clearingActions],\n    },\n    OPEN_PREVIEW: {\n        actions: ['openPreviewContext'],\n    },\n    COPY_TO_CLIPBOARD: {\n        actions: ['copyLinkToClipboard'],\n    },\n};\n\nconst DEBOUNCE_TIMEOUT = 500;\n\nconst typingAction = {\n    TYPING: [\n        {\n            target: SectionState.Typing,\n            internal: false,\n            cond: 'hasNoValue',\n            actions: [...clearingActions],\n        },\n        {\n            target: SectionState.Typing,\n            internal: false,\n            actions: ['updateQueryFromString'],\n        },\n    ],\n};\n\nexport type SectionCondition = {\n    type: 'isSection';\n    value: DropdownState[];\n};\n\nconst initializeSectionState = (\n    initial: string,\n    id: string,\n    src: (context: LinkChooserContext) => Promise<LinkChooserEventData>,\n) => ({\n    initial,\n    states: {\n        [SectionState.Loaded]: {\n            on: {\n                ...typingAction,\n            },\n        },\n        [SectionState.Typing]: {\n            after: {\n                [DEBOUNCE_TIMEOUT]: SectionState.Fetching,\n            },\n            on: {\n                ...typingAction,\n            },\n        },\n        [SectionState.Fetching]: {\n            invoke: {\n                id,\n                src,\n                onDone: [\n                    {\n                        target: SectionState.Loaded,\n                        actions: ['updateDropdownSearchResults', 'replaceCustomLink', 'resolveFetching'],\n                        cond: {\n                            type: 'isSection',\n                            value: [DropdownState.Default],\n                        },\n                    },\n                    {\n                        target: SectionState.Loaded,\n                        actions: ['updateDropdownSearchResults'],\n                    },\n                ],\n                onError: SectionState.Error,\n            },\n            on: {\n                ...typingAction,\n            },\n        },\n        [SectionState.Error]: {\n            on: {\n                ...typingAction,\n            },\n        },\n    },\n});\n\nexport const linkChooserMachine = createMachine<LinkChooserContext, DoneInvokeEvent<LinkChooserEventData>>(\n    {\n        id: 'link-chooser',\n        initial: LinkChooserState.Idle,\n        states: {\n            [LinkChooserState.Idle]: {\n                on: {\n                    OPEN_DROPDOWN: [\n                        {\n                            target: LinkChooserState.Focused,\n                            actions: ['populateDropdownSearchResultsWithRecentQueries'],\n                            cond: 'isQueryEmpty',\n                        },\n                        {\n                            target: LinkChooserState.Focused,\n                        },\n                    ],\n                    ...sharedActions,\n                },\n            },\n            [LinkChooserState.Focused]: {\n                initial: DropdownState.Default,\n                states: {\n                    [DropdownState.Default]: {\n                        ...initializeSectionState(SectionState.Loaded, 'fetchGlobal', fetchGlobalSearchResults),\n                        on: {\n                            SELECT_EXTRA_SECTION: {\n                                target: DropdownState.ExtraSection,\n                                actions: [setExtraResultsByQuery, setCurrentSectionId],\n                            },\n                        },\n                    },\n                    [DropdownState.ExtraSection]: {\n                        ...initializeSectionState(\n                            SectionState.Fetching,\n                            'fetchExtraSectionResults',\n                            fetchExtraSectionResults,\n                        ),\n                        on: {\n                            BACK_TO_DEFAULT: {\n                                target: `${DropdownState.Default}.${SectionState.Fetching}`,\n                                actions: [setExtraResultsByQuery, setCurrentSectionId],\n                            },\n                            CLEARING: {\n                                target: DropdownState.Default,\n                                actions: clearingActions,\n                            },\n                        },\n                    },\n                },\n                on: {\n                    CLOSE_DROPDOWN: [\n                        {\n                            target: LinkChooserState.Idle,\n                            actions: [...closeActions, 'interruptFetching', 'replaceCustomLinkWithSelected'],\n                            cond: 'shouldRefetch',\n                        },\n                        {\n                            target: LinkChooserState.Idle,\n                            actions: [...closeActions, 'replaceCustomLinkWithSelected'],\n                        },\n                    ],\n                    SET_SELECTED_SEARCH_RESULT: {\n                        target: LinkChooserState.Idle,\n                        actions: ['fillResultsWithNewRecentQueries', ...closeActions],\n                    },\n                    ...sharedActions,\n                },\n            },\n        },\n    },\n    {\n        guards: {\n            isSection: (_context, _event, meta) =>\n                Object.values(SectionState).some((state) =>\n                    (meta.cond as SectionCondition).value.some((value: DropdownState) =>\n                        meta.state.matches(`${LinkChooserState.Focused}.${value}.${state}`),\n                    ),\n                ),\n            shouldRefetch: (context, _event, meta) => isFetching(meta.state.matches) && !!context.query,\n            isQueryEmpty: (context) => !context.query,\n            hasNoValue: (_context, event) => !event.data.query,\n        },\n        actions: {\n            clearSelectedResult,\n            copyLinkToClipboard,\n            emitSelectSearchResult,\n            fetchGlobalSearchResults,\n            setExtraResultsByQuery,\n            setCurrentSectionId,\n            openPreviewContext,\n            populateDropdownSearchResultsWithRecentQueries,\n            fillResultsWithNewRecentQueries,\n            setSelectedSearchResult,\n            storeNewSelectedResult,\n            replaceCustomLink,\n            replaceCustomLinkWithSelected,\n            updateDropdownSearchResults,\n            updateQueryFromObject,\n            updateQueryFromString,\n            interruptFetching,\n            resolveFetching,\n        },\n    },\n);\n"],"names":["closeActions","clearingActions","sharedActions","DEBOUNCE_TIMEOUT","typingAction","SectionState","initializeSectionState","initial","id","src","DropdownState","linkChooserMachine","createMachine","LinkChooserState","fetchGlobalSearchResults","setExtraResultsByQuery","setCurrentSectionId","fetchExtraSectionResults","_context","_event","meta","state","value","context","isFetching","event","clearSelectedResult","copyLinkToClipboard","emitSelectSearchResult","openPreviewContext","populateDropdownSearchResultsWithRecentQueries","fillResultsWithNewRecentQueries","setSelectedSearchResult","storeNewSelectedResult","replaceCustomLink","replaceCustomLinkWithSelected","updateDropdownSearchResults","updateQueryFromObject","updateQueryFromString","interruptFetching","resolveFetching"],"mappings":"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"}