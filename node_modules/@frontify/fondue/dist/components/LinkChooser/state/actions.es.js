import { QUERIES_STORAGE_KEY as y } from "../LinkChooser.es.js";
import { assign as s } from "xstate";
import { defaultSection as S } from "../sections.es.js";
import { isCustomLink as l } from "../utils/helpers.es.js";
import { createCustomLink as R, retrieveRecentQueries as n, mergeResultWithRecentQueries as h } from "../utils/transformers.es.js";
import { LinkChooserState as m, DropdownState as p, SectionState as f } from "./types.es.js";
const E = s({
  query: (e, { data: t }) => t.query ?? ""
}), w = s({
  query: (e, { data: t }) => {
    var r;
    return ((r = t.selectedResult) == null ? void 0 : r.title) ?? "";
  }
}), F = s({
  searchResults: (e) => {
    var u;
    const r = l(e.selectedResult) && ((u = e.selectedResult) == null ? void 0 : u.title) === e.query ? e.selectedResult : R(e.query);
    return e.query ? [...e.searchResults.filter((c) => !l(c)), r] : e.searchResults;
  }
}), B = s({
  searchResults: (e, { data: t }, r) => {
    var a;
    const { selectedResult: u } = t;
    if (!e.query || !u)
      return e.searchResults;
    const c = l(u), i = e.searchResults.filter((o) => !l(o)), d = (a = r.state) == null ? void 0 : a.matches(
      `${m.Focused}.${p.Default}.${f.Loaded}`
    );
    return (!e.searchResults || e.searchResults.some((o) => o.local)) && d ? e.searchResults : c ? [...i, u] : [...i, R(e.query)];
  }
}), D = s({
  getExtraResultsByQuery: (e, { data: t }) => t.getExtraResultsByQuery ?? null
}), b = s({
  currentSectionId: (e, { data: t }) => t.currentSectionId ?? S.id
}), I = s({
  selectedResult: (e, { data: t }) => t.selectedResult ?? null
}), W = s({
  searchResults: () => n()
}), v = (e, { data: t }) => {
  const { selectedResult: r } = t;
  if (r) {
    const u = h(r);
    localStorage.setItem(y, JSON.stringify(u));
  }
}, G = s({
  searchResults: (e, { data: t }) => t.selectedResult ? h(t.selectedResult) : n()
}), N = (e) => {
  e.onLinkChange(e.selectedResult);
}, O = s({
  selectedResult: null
}), T = ({ clipboardOptions: e, selectedResult: t }) => {
  t != null && t.link && e.writeText(t.link);
}, $ = ({ openPreview: e, selectedResult: t }) => {
  t != null && t.link && e(t.link, "_blank");
}, j = s({
  searchResults: (e, { data: t }) => t.searchResults ?? []
}), A = async (e) => ({ searchResults: e.query ? await e.getGlobalByQuery(e.query) : n() }), H = async (e) => {
  let t = [];
  return e.getExtraResultsByQuery !== null && (t = await e.getExtraResultsByQuery(e.query)), { searchResults: t };
}, J = s({
  interruptedFetch: () => !0
}), K = s({
  interruptedFetch: () => !1
});
export {
  O as clearSelectedResult,
  T as copyLinkToClipboard,
  N as emitSelectSearchResult,
  H as fetchExtraSectionResults,
  A as fetchGlobalSearchResults,
  G as fillResultsWithNewRecentQueries,
  J as interruptFetching,
  $ as openPreviewContext,
  W as populateDropdownSearchResultsWithRecentQueries,
  F as replaceCustomLink,
  B as replaceCustomLinkWithSelected,
  K as resolveFetching,
  b as setCurrentSectionId,
  D as setExtraResultsByQuery,
  I as setSelectedSearchResult,
  v as storeNewSelectedResult,
  j as updateDropdownSearchResults,
  w as updateQueryFromObject,
  E as updateQueryFromString
};
//# sourceMappingURL=actions.es.js.map
