import { Validation as f, validationClassMap as I } from "../../utilities/validation.es.js";
import { useFocusRing as x } from "@react-aria/focus";
import { mergeProps as v } from "@react-aria/utils";
import { FOCUS_STYLE as h } from "../../utilities/focusStyle.es.js";
import { merge as o } from "../../utilities/merge.es.js";
import { useActor as y } from "@xstate/react";
import t, { forwardRef as L } from "react";
import P from "../../foundation/Icon/Generated/IconArrowOutExternal.es.js";
import N from "../../foundation/Icon/Generated/IconClipboard.es.js";
import O from "../../foundation/Icon/Generated/IconCross.es.js";
import { LoadingCircle as S, LoadingCircleSize as F } from "../LoadingCircle/LoadingCircle.es.js";
const V = L(
  ({
    disabled: e = !1,
    clearable: s = !0,
    ariaProps: a,
    selectedResult: r,
    decorator: n,
    machineService: c,
    onClear: w,
    validation: l = f.Default,
    onClick: m,
    onMouseDown: p
  }, u) => {
    const { value: b } = a, { isFocusVisible: E, focusProps: g, isFocused: C } = x({ isTextInput: !0 }), [, d] = y(c), i = l === f.Loading;
    return /* @__PURE__ */ t.createElement(
      "div",
      {
        "data-test-id": "link-chooser-search-wrapper",
        className: o([
          "tw-flex tw-items-center tw-h-9 tw-gap-2 tw-px-2.5 tw-border tw-rounded tw-text-s tw-font-sans tw-relative tw-bg-white dark:tw-bg-transparent",
          e ? "tw-border-black-5 tw-bg-black-5 dark:tw-bg-black-90 dark:tw-border-black-90" : o([
            "focus-within:tw-border-black-100",
            E && h,
            I[l]
          ])
        ]),
        onClick: m,
        onMouseDown: p
      },
      n && /* @__PURE__ */ t.createElement(
        "div",
        {
          className: o([
            "tw-flex tw-items-center tw-justify-center tw-flex-none",
            e || !r ? "tw-text-black-40" : "tw-text-violet-60"
          ]),
          "data-test-id": "link-chooser-decorator-icon"
        },
        n
      ),
      /* @__PURE__ */ t.createElement(
        "input",
        {
          ...v(g, a),
          readOnly: !C,
          ref: u,
          className: o([
            "tw-flex-auto tw-border-none tw-outline-none tw-bg-transparent tw-hide-input-arrows tw-min-w-0 tw-whitespace-nowrap tw-truncate",
            e ? "tw-text-black-40 tw-placeholder-black-30 dark:tw-text-black-30 dark:tw-placeholder-black-40" : "tw-text-black tw-placeholder-black-60 dark:tw-text-white"
          ]),
          value: b,
          disabled: e,
          "data-test-id": "link-chooser-search-input"
        }
      ),
      r && !i && /* @__PURE__ */ t.createElement(
        k,
        {
          disabled: e,
          testId: "link-chooser-preview-icon",
          title: "Preview link",
          ariaLabel: "preview link",
          icon: /* @__PURE__ */ t.createElement(P, null),
          onClick: () => d("OPEN_PREVIEW")
        }
      ),
      r && !i && /* @__PURE__ */ t.createElement(
        k,
        {
          disabled: e,
          testId: "link-chooser-copy-icon",
          title: "Copy text to clipboard",
          ariaLabel: "copy text to clipboard",
          icon: /* @__PURE__ */ t.createElement(N, null),
          onClick: () => d("COPY_TO_CLIPBOARD")
        }
      ),
      `${b}`.length > 0 && s && !i && /* @__PURE__ */ t.createElement(
        k,
        {
          disabled: e,
          testId: "link-chooser-clear-icon",
          title: "Clear text input",
          ariaLabel: "clear text input",
          icon: /* @__PURE__ */ t.createElement(O, null),
          isComboBoxControl: !0,
          onClick: w
        }
      ),
      i && /* @__PURE__ */ t.createElement("span", { className: "tw-flex tw-flex-none tw-justify-center tw-align-center" }, /* @__PURE__ */ t.createElement(S, { size: F.ExtraSmall }))
    );
  }
);
V.displayName = "SearchInput";
const k = ({
  disabled: e,
  title: s,
  ariaLabel: a,
  testId: r,
  icon: n,
  onClick: c,
  isComboBoxControl: w
}) => {
  const { isFocusVisible: l, focusProps: m } = x(), p = (u) => {
    u.stopPropagation(), c && c();
  };
  return /* @__PURE__ */ t.createElement(
    "button",
    {
      className: o([
        "tw-flex tw-items-center tw-justify-center tw-transition-colors tw-rounded tw-flex-none",
        e ? "tw-cursor-default tw-text-black-40" : "tw-text-black-80  hover:tw-text-black-100",
        l && h
      ]),
      "data-test-id": r,
      title: s,
      "aria-label": a,
      "data-combo-box-control": w,
      disabled: e,
      onClick: p,
      type: "button",
      ...m
    },
    n
  );
};
export {
  V as SearchInput
};
//# sourceMappingURL=SearchInput.es.js.map
