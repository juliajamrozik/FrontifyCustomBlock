{"version":3,"file":"useManualComboBoxHandlers.es.js","sources":["../../../../src/components/LinkChooser/utils/useManualComboBoxHandlers.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { chain } from '@react-aria/utils';\nimport { FocusEvent, KeyboardEvent } from 'react';\nimport { ManualComboBoxEventProps, ManualComboBoxEvents } from '../types';\n\nexport const useManualComboBoxEventHandlers = (\n    { inputProps, inputRef, popoverRef, state }: ManualComboBoxEventProps,\n    { onOpen, onClose, onNavigate, onSelect }: ManualComboBoxEvents,\n) => {\n    const { onClick, onTouchEnd, onBlur, onFocus, onKeyDown, ...ariaProps } = inputProps;\n    return {\n        ...ariaProps,\n        onClick: chain(onClick, onOpen),\n        onTouchEnd: chain(onTouchEnd, onOpen),\n        onBlur: chain(onBlur, (event: FocusEvent<HTMLInputElement, HTMLElement>) => {\n            if (\n                popoverRef.current?.contains(event.relatedTarget as HTMLElement) ||\n                (event.relatedTarget?.dataset.comboBoxControl === 'true' && state.isOpen)\n            ) {\n                inputRef.current?.focus();\n            } else {\n                onClose();\n            }\n        }),\n        onFocus: chain(onFocus, onOpen),\n        onKeyDown: (event: KeyboardEvent<HTMLInputElement>) => {\n            const SUBMISSION_KEYS = ['Enter', 'Tab'];\n            const NAVIGATION_KEYS = ['ArrowRight', 'ArrowLeft', ...SUBMISSION_KEYS];\n            const focusedKey = state.selectionManager.focusedKey;\n            const item = state.collection.getItem(focusedKey);\n            const { key } = event;\n\n            if (state.isOpen && SUBMISSION_KEYS.includes(key)) {\n                if (item && item.parentKey !== 'search') {\n                    onNavigate(item.key);\n                    /* If focused key is a not part of the search results then the function must \n                    end before the react-aria event chain begins is started so that the item is not \n                    selected internally in the useComboBoxState hook */\n                    return;\n                } else if (item) {\n                    onSelect(item.key);\n                } else {\n                    onClose();\n                    return;\n                }\n            } else if (state.isOpen && key === 'Escape') {\n                onClose();\n            } else if (!state.isOpen && !NAVIGATION_KEYS.includes(key)) {\n                onOpen();\n            }\n            onKeyDown && onKeyDown(event);\n        },\n    };\n};\n"],"names":["useManualComboBoxEventHandlers","inputProps","inputRef","popoverRef","state","onOpen","onClose","onNavigate","onSelect","onClick","onTouchEnd","onBlur","onFocus","onKeyDown","ariaProps","chain","event","_a","_b","_c","SUBMISSION_KEYS","NAVIGATION_KEYS","focusedKey","item","key"],"mappings":";AAMO,MAAMA,IAAiC,CAC1C,EAAE,YAAAC,GAAY,UAAAC,GAAU,YAAAC,GAAY,OAAAC,KACpC,EAAE,QAAAC,GAAQ,SAAAC,GAAS,YAAAC,GAAY,UAAAC,QAC9B;AACK,QAAA,EAAE,SAAAC,GAAS,YAAAC,GAAY,QAAAC,GAAQ,SAAAC,GAAS,WAAAC,GAAW,GAAGC,EAAc,IAAAb;AACnE,SAAA;AAAA,IACH,GAAGa;AAAA,IACH,SAASC,EAAMN,GAASJ,CAAM;AAAA,IAC9B,YAAYU,EAAML,GAAYL,CAAM;AAAA,IACpC,QAAQU,EAAMJ,GAAQ,CAACK,MAAqD;;AACxE,OACIC,IAAAd,EAAW,YAAX,QAAAc,EAAoB,SAASD,EAAM,oBAClCE,IAAAF,EAAM,kBAAN,gBAAAE,EAAqB,QAAQ,qBAAoB,UAAUd,EAAM,UAElEe,IAAAjB,EAAS,YAAT,QAAAiB,EAAkB,UAEVb;IACZ,CACH;AAAA,IACD,SAASS,EAAMH,GAASP,CAAM;AAAA,IAC9B,WAAW,CAACW,MAA2C;AAC7C,YAAAI,IAAkB,CAAC,SAAS,KAAK,GACjCC,IAAkB,CAAC,cAAc,aAAa,GAAGD,CAAe,GAChEE,IAAalB,EAAM,iBAAiB,YACpCmB,IAAOnB,EAAM,WAAW,QAAQkB,CAAU,GAC1C,EAAE,KAAAE,EAAQ,IAAAR;AAEhB,UAAIZ,EAAM,UAAUgB,EAAgB,SAASI,CAAG;AACxC,YAAAD,KAAQA,EAAK,cAAc,UAAU;AACrC,UAAAhB,EAAWgB,EAAK,GAAG;AAInB;AAAA,mBACOA;AACP,UAAAf,EAASe,EAAK,GAAG;AAAA,aACd;AACK,UAAAjB;AACR;AAAA,QACJ;AAAA;AACO,QAAAF,EAAM,UAAUoB,MAAQ,WACvBlB,MACD,CAACF,EAAM,UAAU,CAACiB,EAAgB,SAASG,CAAG,KAC9CnB;AAEX,MAAAQ,KAAaA,EAAUG,CAAK;AAAA,IAChC;AAAA,EAAA;AAER;"}