import { Key } from 'react';
import { ExtraSection } from '..';
import { SearchResult } from '../types';
export declare const doesContainSubstring: (source: string, target: string, sections: ExtraSection[]) => boolean;
export declare const getDefaultData: () => Promise<SearchResult[]>;
export declare const decoratedResults: (results: SearchResult[]) => {
    decorator: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
    link?: string | undefined;
    style?: import("../..").MenuItemStyle | undefined;
    size?: import("../..").MenuItemContentSize | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    children?: import("react").ReactNode;
    onClick?: (<T extends HTMLButtonElement | HTMLAnchorElement>(event: import("react").MouseEvent<T, MouseEvent>) => void) | undefined;
    'data-test-id'?: string | undefined;
    active?: boolean | undefined;
    id: string | number;
    onFocus?: (<T_1 extends HTMLButtonElement | HTMLAnchorElement>(event: import("react").FocusEvent<T_1, Element>) => void) | undefined;
    onBlur?: (<T_2 extends HTMLButtonElement | HTMLAnchorElement>(event: import("react").FocusEvent<T_2, Element>) => void) | undefined;
    onMouseEnter?: (<T_3 extends HTMLButtonElement | HTMLAnchorElement>(event: import("react").MouseEvent<T_3, MouseEvent>) => void) | undefined;
    onMouseLeave?: (<T_4 extends HTMLButtonElement | HTMLAnchorElement>(event: import("react").MouseEvent<T_4, MouseEvent>) => void) | undefined;
    onMouseOut?: (<T_5 extends HTMLButtonElement | HTMLAnchorElement>(event: import("react").MouseEvent<T_5, MouseEvent>) => void) | undefined;
    onMouseOver?: (<T_6 extends HTMLButtonElement | HTMLAnchorElement>(event: import("react").MouseEvent<T_6, MouseEvent>) => void) | undefined;
    checked?: boolean | undefined;
    subtitle?: string | undefined;
    ariaProps?: import("react").HTMLAttributes<HTMLElement> | undefined;
    selectionIndicator?: import("../..").SelectionIndicatorIcon | undefined;
    icon: string;
    title: string;
    local?: boolean | undefined;
}[];
export declare const findSection: (sections: ExtraSection[], id: Key) => ExtraSection | undefined;
export declare const isCustomLink: (link: SearchResult | null) => boolean;
export declare const filterItems: (query: string, results: SearchResult[], section?: ExtraSection[]) => SearchResult[];
export declare const prependHttps: (link: string) => string;
