{"version":3,"file":"helpers.es.js","sources":["../../../src/components/Badge/helpers.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { BadgeProps, BadgeSize, BadgeStatus, BadgeStyle } from './types';\nimport { merge } from '@utilities/merge';\nimport { Color } from '../../types';\nimport { ReactNode } from 'react';\n\nexport const getStyleClasses = (style: BadgeStyle, hasHover: boolean, strong: boolean): string =>\n    (strong\n        ? {\n              [BadgeStyle.Primary]: merge([\n                  'tw-bg-box-neutral-strong tw-text-box-neutral-strong-inverse',\n                  hasHover && 'hover:tw-bg-box-neutral-strong-hover hover:tw-text-box-neutral-strong-inverse-hover',\n              ]),\n              [BadgeStyle.Positive]: merge([\n                  'tw-bg-box-positive-strong tw-text-box-positive-strong-inverse',\n                  hasHover && 'hover:tw-bg-box-positive-strong-hover hover:tw-text-box-positive-strong-inverse-hover',\n              ]),\n              [BadgeStyle.Danger]: merge([\n                  'tw-bg-box-negative-strong tw-text-box-negative-strong-inverse',\n                  hasHover && 'hover:tw-bg-box-negative-strong-hover hover:tw-text-box-negative-strong-inverse-hover',\n              ]),\n              [BadgeStyle.Progress]: merge([\n                  'tw-bg-box-selected-strong tw-text-box-selected-strong-inverse',\n                  hasHover && 'hover:tw-bg-box-selected-strong-hover hover:tw-text-box-selected-strong-inverse-hover',\n              ]),\n              [BadgeStyle.Warning]: merge([\n                  'tw-bg-box-warning-strong tw-text-box-warning-strong-inverse',\n                  hasHover && 'hover:tw-bg-box-warning-strong-hover hover:tw-text-box-warning-strong-inverse-hover',\n              ]),\n          }\n        : {\n              [BadgeStyle.Primary]: merge([\n                  'tw-bg-box-neutral tw-text-box-neutral-inverse',\n                  hasHover && 'hover:tw-bg-box-neutral-hover hover:tw-text-box-neutral-inverse-hover',\n              ]),\n              [BadgeStyle.Positive]: merge([\n                  'tw-bg-box-positive tw-text-box-positive-inverse',\n                  hasHover && 'hover:tw-bg-box-positive-hover hover:tw-text-box-positive-inverse-hover',\n              ]),\n              [BadgeStyle.Progress]: merge([\n                  'tw-bg-box-selected tw-text-box-selected-inverse',\n                  hasHover && 'hover:tw-bg-box-selected-hover hover:tw-text-box-selected-inverse-hover',\n              ]),\n              [BadgeStyle.Warning]: merge([\n                  'tw-bg-box-warning tw-text-box-warning-inverse',\n                  hasHover && 'hover:tw-bg-box-warning-hover hover:tw-text-box-warning-inverse-hover',\n              ]),\n              [BadgeStyle.Danger]: merge([\n                  'tw-bg-box-negative tw-text-box-negative-inverse',\n                  hasHover && 'hover:tw-bg-box-negative-hover hover:tw-text-box-negative-inverse-hover',\n              ]),\n          })[style] ?? '';\n\nexport const isBadgeStatus = (style: BadgeStatus | Color | string): style is BadgeStatus =>\n    Object.values(BadgeStatus).includes(style as BadgeStatus);\n\nexport const getCircularSizeClasses = (size: BadgeSize) =>\n    ({\n        small: 'tw-h-5 tw-w-5',\n        medium: 'tw-h-6 tw-w-6',\n    }[size]);\n\nexport const getSizeClasses = (\n    children: ReactNode,\n    status: BadgeProps['status'],\n    icon: BadgeProps['icon'],\n    size: BadgeSize,\n    isDismissable: boolean,\n) => {\n    const isSmall = size === 'small';\n\n    if (isSmall) {\n        return merge(['tw-h-5 tw-px-1.5', isDismissable && 'tw-pr-5']);\n    } else {\n        const hasMaximumTwoComponents = !Boolean(children && status && icon);\n        return merge(['tw-h-6', 'tw-px-2', hasMaximumTwoComponents && 'tw-gap-x-0.5', isDismissable && 'tw-pr-6']);\n    }\n};\n\nexport const badgeStatusClasses: Record<BadgeStatus, string> = {\n    [BadgeStatus.Positive]: 'tw-bg-green-60',\n    [BadgeStatus.Progress]: 'tw-bg-violet-60',\n    [BadgeStatus.Warning]: 'tw-bg-yellow-60',\n    [BadgeStatus.Danger]: 'tw-bg-red-60',\n};\n"],"names":["getStyleClasses","style","hasHover","strong","BadgeStyle","merge","isBadgeStatus","BadgeStatus","getCircularSizeClasses","size","getSizeClasses","children","status","icon","isDismissable","hasMaximumTwoComponents","badgeStatusClasses"],"mappings":";;AAOO,MAAMA,IAAkB,CAACC,GAAmBC,GAAmBC,OACjEA,IACK;AAAA,EACI,CAACC,EAAW,OAAO,GAAGC,EAAM;AAAA,IACxB;AAAA,IACAH,KAAY;AAAA,EAAA,CACf;AAAA,EACD,CAACE,EAAW,QAAQ,GAAGC,EAAM;AAAA,IACzB;AAAA,IACAH,KAAY;AAAA,EAAA,CACf;AAAA,EACD,CAACE,EAAW,MAAM,GAAGC,EAAM;AAAA,IACvB;AAAA,IACAH,KAAY;AAAA,EAAA,CACf;AAAA,EACD,CAACE,EAAW,QAAQ,GAAGC,EAAM;AAAA,IACzB;AAAA,IACAH,KAAY;AAAA,EAAA,CACf;AAAA,EACD,CAACE,EAAW,OAAO,GAAGC,EAAM;AAAA,IACxB;AAAA,IACAH,KAAY;AAAA,EAAA,CACf;AACL,IACA;AAAA,EACI,CAACE,EAAW,OAAO,GAAGC,EAAM;AAAA,IACxB;AAAA,IACAH,KAAY;AAAA,EAAA,CACf;AAAA,EACD,CAACE,EAAW,QAAQ,GAAGC,EAAM;AAAA,IACzB;AAAA,IACAH,KAAY;AAAA,EAAA,CACf;AAAA,EACD,CAACE,EAAW,QAAQ,GAAGC,EAAM;AAAA,IACzB;AAAA,IACAH,KAAY;AAAA,EAAA,CACf;AAAA,EACD,CAACE,EAAW,OAAO,GAAGC,EAAM;AAAA,IACxB;AAAA,IACAH,KAAY;AAAA,EAAA,CACf;AAAA,EACD,CAACE,EAAW,MAAM,GAAGC,EAAM;AAAA,IACvB;AAAA,IACAH,KAAY;AAAA,EAAA,CACf;AACL,GAAGD,CAAK,KAAK,IAEVK,IAAgB,CAACL,MAC1B,OAAO,OAAOM,CAAW,EAAE,SAASN,CAAoB,GAE/CO,IAAyB,CAACC,OAClC;AAAA,EACG,OAAO;AAAA,EACP,QAAQ;AACZ,GAAEA,CAAI,GAEGC,IAAiB,CAC1BC,GACAC,GACAC,GACAJ,GACAK,MACC;AAGD,MAFgBL,MAAS;AAGrB,WAAOJ,EAAM,CAAC,oBAAoBS,KAAiB,SAAS,CAAC;AAC1D;AACH,UAAMC,IAA0B,CAAC,QAAQJ,KAAYC,KAAUC,CAAI;AAC5D,WAAAR,EAAM,CAAC,UAAU,WAAWU,KAA2B,gBAAgBD,KAAiB,SAAS,CAAC;AAAA,EAC7G;AACJ,GAEaE,IAAkD;AAAA,EAC3D,CAACT,EAAY,QAAQ,GAAG;AAAA,EACxB,CAACA,EAAY,QAAQ,GAAG;AAAA,EACxB,CAACA,EAAY,OAAO,GAAG;AAAA,EACvB,CAACA,EAAY,MAAM,GAAG;AAC1B;"}