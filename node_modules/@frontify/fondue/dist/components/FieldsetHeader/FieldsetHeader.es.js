import { Switch as h } from "../Switch/Switch.es.js";
import { useMemoizedId as N } from "../../hooks/useMemoizedId.es.js";
import { merge as m } from "../../utilities/merge.es.js";
import r, { isValidElement as I, cloneElement as D } from "react";
import { IconSize as w } from "../../foundation/Icon/IconSize.es.js";
import k from "../../foundation/Icon/Generated/IconMinus.es.js";
import A from "../../foundation/Icon/Generated/IconPlus.es.js";
import S from "../../foundation/Icon/Generated/IconCaretDown.es.js";
const g = "accordion-icon-container", v = "addremove-icon-container";
var M = /* @__PURE__ */ ((t) => (t.Small = "Small", t.Medium = "Medium", t.Large = "Large", t))(M || {});
const l = {
  Small: {
    icon: w.Size12,
    text: "tw-text-s",
    switch: "small"
  },
  Medium: {
    icon: w.Size16,
    text: "tw-text-m",
    switch: "medium"
  },
  Large: {
    icon: w.Size20,
    text: "tw-text-l",
    switch: "medium"
  }
};
var O = /* @__PURE__ */ ((t) => (t.Default = "Default", t.Switch = "Switch", t.Accordion = "Accordion", t.AddRemove = "AddRemove", t))(O || {});
const R = (t, i, a, n, e) => {
  const o = {
    "aria-labelledby": i,
    size: l[a].icon
  };
  switch (t) {
    case "Switch":
      return /* @__PURE__ */ r.createElement("div", { "data-test-id": "fieldset-icon-wrapper" }, /* @__PURE__ */ r.createElement(h, { ...o, size: l[a].switch, mode: n ? "on" : "off", disabled: e }));
    case "Accordion":
      return /* @__PURE__ */ r.createElement("div", { "data-test-id": "fieldset-icon-wrapper" }, /* @__PURE__ */ r.createElement(
        "div",
        {
          "data-test-id": g,
          className: m([
            "tw-transition-transform",
            n && "tw-rotate-180 tw-duration-300",
            !e && n && "tw-text-black",
            !e && !n && "tw-text-black-80",
            e && "tw-text-black-40"
          ])
        },
        /* @__PURE__ */ r.createElement(S, { ...o })
      ));
    case "AddRemove":
      return /* @__PURE__ */ r.createElement("div", { "data-test-id": "fieldset-icon-wrapper" }, /* @__PURE__ */ r.createElement(
        "div",
        {
          "data-test-id": v,
          className: m([
            n && !e && "tw-text-black",
            !n && !e && "tw-text-black-80",
            e && "tw-text-black-40"
          ])
        },
        n ? /* @__PURE__ */ r.createElement(k, { ...o }) : /* @__PURE__ */ r.createElement(A, { ...o })
      ));
  }
  return null;
}, _ = ({
  size: t = "Large",
  active: i = !0,
  decorator: a,
  type: n = "Default",
  disabled: e = !1,
  bold: o = !0,
  children: f,
  onClick: c,
  as: p = "label",
  tabIndex: x = -1,
  "data-test-id": E = "fieldset-header"
}) => {
  const d = N(), u = () => !e && c && c();
  let s = "tw-font-normal";
  return o ? s = "tw-font-bold" : t === "Medium" && (s = "tw-font-medium"), /* @__PURE__ */ r.createElement(
    "header",
    {
      "data-test-id": E,
      role: c ? "button" : void 0,
      onClick: u,
      onKeyPress: u,
      className: m([
        "tw-flex tw-items-center tw-gap-x-1.5 tw-w-full tw-flex-row",
        e ? "tw-text-black-40" : "dark:tw-text-white",
        !e && i ? "tw-text-black" : "tw-text-black-80",
        !e && c ? "hover:tw-cursor-pointer" : "tw-pointer-events-none"
      ]),
      tabIndex: x
    },
    I(a) && /* @__PURE__ */ r.createElement("span", { className: "tw-shrink-0" }, D(a, {
      size: l[t].icon
    })),
    /* @__PURE__ */ r.createElement(
      p,
      {
        id: d,
        className: m([
          "tw-text-left",
          l[t].text,
          s,
          c && "hover:tw-cursor-pointer"
        ])
      },
      f
    ),
    n !== "Default" && /* @__PURE__ */ r.createElement("span", { "data-test-id": "fieldset-icon-container", className: "tw-ml-auto tw-shrink-0" }, R(n, d, t, i, e))
  );
};
_.displayName = "FondueFieldsetHeader";
export {
  g as ACCORDION_ICON_CONTAINER_ID,
  v as ADDREMOVE_ICON_CONTAINER_ID,
  _ as FieldsetHeader,
  M as FieldsetHeaderSize,
  O as FieldsetHeaderType,
  R as renderFieldsetHeaderIconType
};
//# sourceMappingURL=FieldsetHeader.es.js.map
