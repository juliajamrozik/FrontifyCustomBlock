{"version":3,"file":"FieldsetHeader.es.js","sources":["../../../src/components/FieldsetHeader/FieldsetHeader.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Switch, SwitchSize } from '@components/Switch/Switch';\nimport { useMemoizedId } from '@hooks/useMemoizedId';\nimport { merge } from '@utilities/merge';\nimport React, { ReactElement, ReactNode, cloneElement, isValidElement } from 'react';\nimport { IconCaretDown, IconMinus, IconPlus } from '@foundation/Icon/Generated';\nimport { IconSize } from '@foundation/Icon/IconSize';\nimport { IconProps } from '@foundation/Icon';\n\nexport const ACCORDION_ICON_CONTAINER_ID = 'accordion-icon-container';\n\nexport const ADDREMOVE_ICON_CONTAINER_ID = 'addremove-icon-container';\n\nexport enum FieldsetHeaderSize {\n    Small = 'Small',\n    Medium = 'Medium',\n    Large = 'Large',\n}\n\nconst sizeMap: Record<FieldsetHeaderSize, { icon: IconSize; text: string; switch: SwitchSize }> = {\n    [FieldsetHeaderSize.Small]: {\n        icon: IconSize.Size12,\n        text: 'tw-text-s',\n        switch: 'small',\n    },\n    [FieldsetHeaderSize.Medium]: {\n        icon: IconSize.Size16,\n        text: 'tw-text-m',\n        switch: 'medium',\n    },\n    [FieldsetHeaderSize.Large]: {\n        icon: IconSize.Size20,\n        text: 'tw-text-l',\n        switch: 'medium',\n    },\n};\n\nexport enum FieldsetHeaderType {\n    Default = 'Default',\n    Switch = 'Switch',\n    Accordion = 'Accordion',\n    AddRemove = 'AddRemove',\n}\n\nexport type FieldsetHeaderProps = {\n    size?: FieldsetHeaderSize;\n    active?: boolean;\n    decorator?: ReactNode;\n    type?: FieldsetHeaderType;\n    disabled?: boolean;\n    bold?: boolean;\n    children: string;\n    onClick?: () => void;\n    as?: keyof JSX.IntrinsicElements;\n    tabIndex?: number;\n    'data-test-id'?: string;\n};\n\nexport const renderFieldsetHeaderIconType = (\n    type: FieldsetHeaderType,\n    id: string,\n    size: FieldsetHeaderSize,\n    active: boolean,\n    disabled: boolean,\n) => {\n    const props = {\n        'aria-labelledby': id,\n        size: sizeMap[size].icon,\n    };\n\n    switch (type) {\n        case FieldsetHeaderType.Switch:\n            return (\n                <div data-test-id=\"fieldset-icon-wrapper\">\n                    <Switch {...props} size={sizeMap[size].switch} mode={active ? 'on' : 'off'} disabled={disabled} />\n                </div>\n            );\n        case FieldsetHeaderType.Accordion:\n            return (\n                <div data-test-id=\"fieldset-icon-wrapper\">\n                    <div\n                        data-test-id={ACCORDION_ICON_CONTAINER_ID}\n                        className={merge([\n                            'tw-transition-transform',\n                            active && 'tw-rotate-180 tw-duration-300',\n                            !disabled && active && 'tw-text-black',\n                            !disabled && !active && 'tw-text-black-80',\n                            disabled && 'tw-text-black-40',\n                        ])}\n                    >\n                        <IconCaretDown {...props} />\n                    </div>\n                </div>\n            );\n        case FieldsetHeaderType.AddRemove:\n            return (\n                <div data-test-id=\"fieldset-icon-wrapper\">\n                    <div\n                        data-test-id={ADDREMOVE_ICON_CONTAINER_ID}\n                        className={merge([\n                            active && !disabled && 'tw-text-black',\n                            !active && !disabled && 'tw-text-black-80',\n                            disabled && 'tw-text-black-40',\n                        ])}\n                    >\n                        {active ? <IconMinus {...props} /> : <IconPlus {...props} />}\n                    </div>\n                </div>\n            );\n    }\n\n    return null;\n};\n\nexport const FieldsetHeader = ({\n    size = FieldsetHeaderSize.Large,\n    active = true,\n    decorator,\n    type = FieldsetHeaderType.Default,\n    disabled = false,\n    bold = true,\n    children,\n    onClick,\n    as: Heading = 'label',\n    tabIndex = -1,\n    'data-test-id': dataTestId = 'fieldset-header',\n}: FieldsetHeaderProps): ReactElement => {\n    const id = useMemoizedId();\n    const clickOnNotDisabled = () => !disabled && onClick && onClick();\n\n    let headingFontWeightClass = 'tw-font-normal';\n    if (bold) {\n        headingFontWeightClass = 'tw-font-bold';\n    } else if (size === FieldsetHeaderSize.Medium) {\n        headingFontWeightClass = 'tw-font-medium';\n    }\n\n    return (\n        <header\n            data-test-id={dataTestId}\n            role={onClick ? 'button' : undefined}\n            onClick={clickOnNotDisabled}\n            onKeyPress={clickOnNotDisabled}\n            className={merge([\n                'tw-flex tw-items-center tw-gap-x-1.5 tw-w-full tw-flex-row',\n                disabled ? 'tw-text-black-40' : 'dark:tw-text-white',\n                !disabled && active ? 'tw-text-black' : 'tw-text-black-80',\n                !disabled && onClick ? 'hover:tw-cursor-pointer' : 'tw-pointer-events-none',\n            ])}\n            tabIndex={tabIndex}\n        >\n            {isValidElement(decorator) && (\n                <span className=\"tw-shrink-0\">\n                    {cloneElement(decorator as ReactElement<IconProps>, {\n                        size: sizeMap[size].icon,\n                    })}\n                </span>\n            )}\n            <Heading\n                id={id}\n                className={merge([\n                    'tw-text-left',\n                    sizeMap[size].text,\n                    headingFontWeightClass,\n                    onClick && 'hover:tw-cursor-pointer',\n                ])}\n            >\n                {children}\n            </Heading>\n            {type !== FieldsetHeaderType.Default && (\n                <span data-test-id=\"fieldset-icon-container\" className=\"tw-ml-auto tw-shrink-0\">\n                    {renderFieldsetHeaderIconType(type, id, size, active, disabled)}\n                </span>\n            )}\n        </header>\n    );\n};\nFieldsetHeader.displayName = 'FondueFieldsetHeader';\n"],"names":["ACCORDION_ICON_CONTAINER_ID","ADDREMOVE_ICON_CONTAINER_ID","FieldsetHeaderSize","sizeMap","IconSize","FieldsetHeaderType","renderFieldsetHeaderIconType","type","id","size","active","disabled","props","React","Switch","merge","IconCaretDown","IconMinus","IconPlus","FieldsetHeader","decorator","bold","children","onClick","Heading","tabIndex","dataTestId","useMemoizedId","clickOnNotDisabled","headingFontWeightClass","isValidElement","cloneElement"],"mappings":"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"}