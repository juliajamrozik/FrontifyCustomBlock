import { useCopy as Z } from "../../hooks/useCopy.es.js";
import { useMemoizedId as A } from "../../hooks/useMemoizedId.es.js";
import { useFocusRing as w } from "@react-aria/focus";
import { FOCUS_STYLE as m } from "../../utilities/focusStyle.es.js";
import { merge as s } from "../../utilities/merge.es.js";
import { validationClassMap as tt, Validation as l } from "../../utilities/validation.es.js";
import t, { forwardRef as et, useRef as rt, useState as ot, useEffect as R } from "react";
import { Tooltip as st } from "../Tooltip/Tooltip.es.js";
import nt from "../../foundation/Icon/Generated/IconCross.es.js";
import at from "../../foundation/Icon/Generated/IconEye.es.js";
import lt from "../../foundation/Icon/Generated/IconEyeOff.es.js";
import { LoadingCircle as ct, LoadingCircleSize as it } from "../LoadingCircle/LoadingCircle.es.js";
import ut from "../../foundation/Icon/Generated/IconExclamationMarkTriangle.es.js";
import wt from "../../foundation/Icon/Generated/IconCrossCircle.es.js";
import mt from "../../foundation/Icon/Generated/IconClipboard.es.js";
import pt from "../../foundation/Icon/Generated/IconCheckMark.es.js";
var ft = /* @__PURE__ */ ((r) => (r.Text = "text", r.Password = "password", r.Number = "number", r))(ft || {});
const bt = ({ extraAction: r, disabled: a, isFocusVisible: p, focusProps: n }, x) => {
  if (!r)
    return null;
  const c = a || r.disabled;
  return /* @__PURE__ */ t.createElement(
    "button",
    {
      className: s([
        "tw-flex tw-items-center tw-justify-center tw-transition-colors tw-rounded tw-p-1 -tw-mr-2",
        c ? "tw-cursor-default tw-text-text-disabled" : "tw-text-text-weak hover:tw-bg-box-neutral-hover hover:tw-text-box-neutral-inverse-hover",
        p && m
      ]),
      onClick: r.onClick,
      "data-test-id": "fondue-extra-action-icon",
      "aria-label": r.title.toLowerCase(),
      disabled: c,
      "aria-disabled": c,
      type: "button",
      ref: x,
      ...n
    },
    r.icon
  );
}, S = et(bt), dt = ({
  id: r,
  type: a = "text",
  decorator: p,
  validation: n = l.Default,
  clearable: x = !1,
  placeholder: c,
  required: O,
  obfuscated: i,
  disabled: o = !1,
  autocomplete: z = !1,
  dotted: D = !1,
  value: k = "",
  copyable: M = !1,
  onChange: f,
  onEnterPressed: y,
  onBlur: W,
  onClear: C,
  onFocus: F,
  size: $,
  spellcheck: I,
  readonly: E,
  focusOnMount: v,
  selectable: K = !1,
  extraActions: g
}) => {
  const { isFocusVisible: U, focusProps: Y } = w({ within: !0, isTextInput: !0 }), { isFocusVisible: N, focusProps: _ } = w(), { isFocusVisible: P, focusProps: q } = w(), { isFocusVisible: V, focusProps: G } = w(), { isFocusVisible: B, focusProps: T } = w(), { copy: H, status: h } = Z(), u = rt(null), [b, j] = ot(
    typeof i == "boolean" ? i : a === "password"
    /* Password */
  );
  R(() => {
    setTimeout(() => {
      var e;
      v && ((e = u.current) == null || e.focus());
    }, 0);
  }, [v]), R(() => {
    typeof i == "boolean" && j(i);
  }, [i]);
  const J = (e) => {
    e.key === "Enter" && y && y(e);
  }, Q = () => a === "password" ? b ? "password" : "text" : a, X = typeof I == "boolean" ? { spellCheck: I } : null;
  return /* @__PURE__ */ t.createElement(
    "div",
    {
      ...Y,
      className: s([
        "tw-flex tw-items-center tw-h-9 tw-gap-2 tw-px-3 tw-border tw-transition tw-rounded tw-text-s tw-font-sans tw-relative tw-bg-white dark:tw-bg-transparent",
        D ? "tw-border-dashed" : "tw-border-solid",
        o || E ? "tw-border-black-5 tw-bg-black-5 dark:tw-bg-black-90 dark:tw-border-black-90" : s([
          "focus-within:tw-border-black-90 hover:tw-border-black-90",
          tt[n],
          U && !N && !P && !V && m
        ])
      ]),
      "data-test-id": "fondue-text-input-component"
    },
    p && /* @__PURE__ */ t.createElement(
      "div",
      {
        className: s([
          "tw-flex tw-items-center tw-justify-center tw-pl-1",
          o ? "tw-text-black-60" : "tw-text-black-80"
        ]),
        "data-test-id": "decorator"
      },
      p
    ),
    /* @__PURE__ */ t.createElement(
      "input",
      {
        id: A(r),
        ref: u,
        className: s([
          "tw-w-full tw-grow tw-border-none tw-outline-none tw-bg-transparent tw-hide-input-arrows",
          o || E ? "tw-text-black-40 tw-placeholder-black-30 dark:tw-text-black-30 dark:tw-placeholder-black-40" : "tw-text-black tw-placeholder-black-60 dark:tw-text-white"
        ]),
        onClick: () => {
          var e;
          return (e = u.current) == null ? void 0 : e.focus();
        },
        onChange: (e) => f && f(e.currentTarget.value),
        onBlur: W,
        onKeyDown: J,
        placeholder: c,
        value: k,
        type: Q(),
        required: O,
        readOnly: E,
        disabled: o,
        onFocus: (e) => {
          K && e.target.select(), F && F(e);
        },
        autoComplete: z ? "on" : "off",
        size: $,
        "data-test-id": "text-input",
        ...X
      }
    ),
    g && g.length > 0 && g.map((e, d) => {
      const L = `text-input-extra-action-${d}`;
      return e.tooltip ? /* @__PURE__ */ t.createElement(
        st,
        {
          key: L,
          ...e.tooltip,
          triggerElement: /* @__PURE__ */ t.createElement(
            S,
            {
              extraAction: e,
              disabled: o,
              isFocusVisible: B,
              focusProps: T
            }
          )
        }
      ) : /* @__PURE__ */ t.createElement(
        S,
        {
          key: L,
          extraAction: e,
          disabled: o,
          isFocusVisible: B,
          focusProps: T
        }
      );
    }),
    `${k}`.length > 0 && x && /* @__PURE__ */ t.createElement(
      "button",
      {
        className: s([
          "tw-flex tw-items-center tw-justify-center tw-transition-colors tw-rounded",
          o ? "tw-cursor-default tw-text-black-40" : "tw-text-black-60  hover:tw-text-black-100",
          N && m
        ]),
        onClick: () => {
          var e, d;
          (e = u.current) == null || e.focus(), (d = u.current) == null || d.setAttribute("value", ""), f && f(""), C && C();
        },
        "data-test-id": "clear-icon",
        title: "Clear text input",
        "aria-label": "clear text input",
        disabled: o,
        type: "button",
        ..._
      },
      /* @__PURE__ */ t.createElement(nt, null)
    ),
    a === "password" && /* @__PURE__ */ t.createElement(
      "button",
      {
        className: s([
          "tw-flex tw-items-center tw-justify-center tw-transition-colors tw-rounded",
          o ? "tw-cursor-default tw-text-black-40" : "tw-text-black-60 hover:tw-text-black-100",
          P && m
        ]),
        onClick: () => j(!b),
        "data-test-id": "visibility-icon",
        title: "Toggle text visibility",
        type: "button",
        "aria-label": `${b ? "unveil" : "obfuscate"} text input`,
        disabled: o,
        ...q
      },
      b ? /* @__PURE__ */ t.createElement(at, null) : /* @__PURE__ */ t.createElement(lt, null)
    ),
    n === l.Loading && /* @__PURE__ */ t.createElement("span", { className: "tw-absolute tw-top-[-0.55rem] tw-right-[-0.55rem] tw-bg-white tw-rounded-full tw-p-[2px] tw-border tw-border-black-10" }, /* @__PURE__ */ t.createElement(ct, { size: it.ExtraSmall })),
    (n === l.Error || n === l.Warning) && /* @__PURE__ */ t.createElement(
      "span",
      {
        className: s([
          "tw-flex tw-items-center tw-justify-center",
          n === l.Error && "tw-text-text-negative",
          n === l.Warning && "tw-text-text-warning"
        ]),
        "data-test-id": "error-state-exclamation-mark-icon"
      },
      /* @__PURE__ */ t.createElement(ut, null)
    ),
    M && /* @__PURE__ */ t.createElement(
      "button",
      {
        className: s([
          "tw-flex tw-items-center tw-justify-center tw-transition-colors tw-rounded",
          o ? "tw-cursor-default tw-text-black-40" : "tw-text-black-60 hover:tw-text-black-100",
          V && m
        ]),
        onClick: () => H(k),
        "data-test-id": "copy-icon",
        title: "Copy input text",
        disabled: o,
        type: "button",
        ...G
      },
      h === "error" && /* @__PURE__ */ t.createElement("span", { className: "tw-text-box-negative-strong" }, /* @__PURE__ */ t.createElement(wt, null)),
      h === "idle" && /* @__PURE__ */ t.createElement(mt, null),
      h === "success" && /* @__PURE__ */ t.createElement("span", { className: "tw-text-box-positive-strong" }, /* @__PURE__ */ t.createElement(pt, null))
    )
  );
};
dt.displayName = "FondueTextInput";
export {
  dt as TextInput,
  ft as TextInputType
};
//# sourceMappingURL=TextInput.es.js.map
