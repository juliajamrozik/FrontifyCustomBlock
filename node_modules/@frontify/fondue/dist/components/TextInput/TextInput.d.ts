import { Validation } from '../../utilities/validation';
import { FocusEvent, KeyboardEvent, ReactElement, ReactNode } from 'react';
import { TooltipProps } from '../Tooltip';
export declare enum TextInputType {
    Text = "text",
    Password = "password",
    Number = "number"
}
export type TextInputExtraAction = {
    onClick: () => void;
    icon: ReactElement;
    title: string;
    tooltip?: Omit<TooltipProps, 'triggerElement'>;
    disabled?: boolean;
};
export type TextInputBaseProps = {
    id?: string;
    type?: TextInputType;
    decorator?: ReactNode;
    dotted?: boolean;
    clearable?: boolean;
    placeholder?: string;
    required?: boolean;
    disabled?: boolean;
    autocomplete?: boolean;
    readonly?: boolean;
    validation?: Validation;
    copyable?: boolean;
    value?: string;
    onChange?: (value: string) => void;
    onEnterPressed?: (event: KeyboardEvent<HTMLInputElement>) => void;
    onBlur?: (event: FocusEvent<HTMLInputElement>) => void;
    onFocus?: (event: FocusEvent<HTMLInputElement>) => void;
    onClear?: () => void;
    size?: number;
    spellcheck?: boolean;
    focusOnMount?: boolean;
    selectable?: boolean;
    extraActions?: TextInputExtraAction[];
};
export type TextInputProps = ({
    type?: TextInputType.Text;
    obfuscated?: false;
} & TextInputBaseProps) | ({
    type?: TextInputType.Number;
    obfuscated?: false;
    min?: number;
    max?: number;
} & TextInputBaseProps) | ({
    type: TextInputType.Password;
    obfuscated?: boolean;
} & TextInputBaseProps);
export declare const TextInput: {
    ({ id: propId, type, decorator, validation, clearable, placeholder, required, obfuscated, disabled, autocomplete, dotted, value, copyable, onChange, onEnterPressed, onBlur, onClear, onFocus, size, spellcheck, readonly, focusOnMount, selectable, extraActions, }: TextInputProps): ReactElement;
    displayName: string;
};
