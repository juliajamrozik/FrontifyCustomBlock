/// <reference types="react" />
import { PluginComposer } from '../Plugins';
import { TreeOfNodes } from '../types';
type useEditorStateProps = {
    editorId: string;
    plugins: PluginComposer;
    initialValue?: string;
    onTextChange?: (value: string) => void;
    onValueChanged?: (value: TreeOfNodes | null) => void;
};
export declare const useEditorState: ({ editorId, initialValue, plugins, onTextChange, onValueChanged, }: useEditorStateProps) => {
    localValue: import("react").MutableRefObject<TreeOfNodes | null>;
    onChange: (value: TreeOfNodes) => void;
    memoizedValue: import("@udecode/plate").Value;
    config: {
        create: () => import("@udecode/plate").PlatePlugin<import("@udecode/plate").AnyObject, import("@udecode/plate").Value, import("@udecode/plate").PlateEditor<import("@udecode/plate").Value>>[];
        toolbar: (toolbarWidth: number | undefined) => import("react").ReactNode;
        inline: () => import("react").ReactNode;
        styles: () => Record<string, import("react").CSSProperties>;
    };
};
export {};
