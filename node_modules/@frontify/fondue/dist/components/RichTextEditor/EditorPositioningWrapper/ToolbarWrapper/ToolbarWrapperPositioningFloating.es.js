import c, { useState as w, useRef as h, useEffect as s } from "react";
import { BalloonToolbar as p, flip as b, shift as v, autoUpdate as E } from "@udecode/plate";
import { calculateToolbarWidth as S } from "../../utils/calculateToolbarWidth.es.js";
import { OFFSET_IN_PX as F } from "../../utils/constants.es.js";
const x = ({
  children: l,
  editorWidth: d,
  toolbarButtonGroups: o = [],
  toolbarWidth: a
}) => {
  const [f, i] = w(), r = h();
  s(() => {
    if (a)
      i(a);
    else {
      const t = S(o);
      t > 0 && i(t + o.length + F);
    }
  }, [d, a, o]), s(() => {
    const t = () => {
      const e = window.getSelection(), n = (e == null ? void 0 : e.rangeCount) ?? 0, m = n > 0 && (e == null ? void 0 : e.getRangeAt(0).startOffset), u = n > 0 && (e == null ? void 0 : e.getRangeAt(0).endOffset);
      !(!!e && m !== u && n > 0) && r.current && r.current();
    };
    return document.addEventListener("selectionchange", t), () => document.removeEventListener("selectionchange", t);
  }, []);
  const g = (t, e, n) => {
    r.current = E(t, e, n);
  };
  return /* @__PURE__ */ c.createElement(
    p,
    {
      floatingOptions: {
        middleware: [b(), v()],
        whileElementsMounted: g
      },
      styles: { root: { border: "none", background: "#ffffff", width: f, transitionDuration: "0s" } }
    },
    /* @__PURE__ */ c.createElement(
      "div",
      {
        "data-selector": "toolbar-floating",
        "data-test-id": "toolbar-floating",
        className: "tw-rounded tw-min-h-12 tw-border tw-border-line tw-shadow-lg tw-bg-base tw-divide-y tw-divide-line tw-flex tw-flex-wrap"
      },
      l
    )
  );
};
export {
  x as ToolbarWrapperPositioningFloating
};
//# sourceMappingURL=ToolbarWrapperPositioningFloating.es.js.map
