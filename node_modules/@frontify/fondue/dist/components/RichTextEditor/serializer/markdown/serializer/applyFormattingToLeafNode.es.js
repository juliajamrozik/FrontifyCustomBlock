const r = (t) => t.split("").reverse().join(""), o = (t, e) => {
  const s = t.trim(), a = s, i = `${e}${a}${r(e)}`;
  if (a.length === t.length)
    return i;
  const f = e + a + r(e);
  return t.replace(s, f);
}, p = (t, e) => {
  const s = `
`;
  return (e.strikethrough || e.bold || e.italic) && new RegExp(s, "g").test(t) && (t = t.replaceAll(s, `\\
`)), t;
}, g = (t, e) => (e.strikethrough && e.bold && e.italic ? t = o(t, "~~***") : e.bold && e.italic ? t = o(t, "***") : (e.bold && (t = o(t, "**")), e.italic && (t = o(t, "_")), e.strikethrough && (t = o(t, "~~")), e.code && (t = o(t, "`"))), t = p(t, e), t);
export {
  g as applyFormattingToLeafNode
};
//# sourceMappingURL=applyFormattingToLeafNode.es.js.map
