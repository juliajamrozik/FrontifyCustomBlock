{"version":3,"file":"applyFormattingToLeafNode.es.js","sources":["../../../../../../src/components/RichTextEditor/serializer/markdown/serializer/applyFormattingToLeafNode.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { LeafType } from '../types';\n\nconst reverseStr = (string: string) => string.split('').reverse().join('');\n\n// This function handles the case of a string like this: \"   foo   \"\n// Where it would be invalid markdown to generate this: \"**   foo   **\"\n// We instead, want to trim the whitespace out, apply formatting, and then\n// bring the whitespace back. So our returned string looks like this: \"   **foo**   \"\nconst retainWhitespaceAndFormat = (string: string, format: string) => {\n    // we keep this for a comparison later\n    const frozenString = string.trim();\n\n    // children will be mutated\n    const children = frozenString;\n\n    // We reverse the right side formatting, to properly handle bold/italic and strikeThrough\n    // formats, so we can create ~~***FooBar***~~\n    const fullFormat = `${format}${children}${reverseStr(format)}`;\n\n    // This conditions accounts for no whitespace in our string\n    // if we don't have any, we can return early.\n    if (children.length === string.length) {\n        return fullFormat;\n    }\n\n    // if we do have whitespace, let's add our formatting around our trimmed string\n    // We reverse the right side formatting, to properly handle bold/italic and strikeThrough\n    // formats, so we can create ~~***FooBar***~~\n    const formattedString = format + children + reverseStr(format);\n\n    // and replace the non-whitespace content of the string\n    return string.replace(frozenString, formattedString);\n};\n\nconst replaceLineBreak = (children: string, chunk: LeafType) => {\n    const lineBreak = '\\n';\n    if ((chunk.strikethrough || chunk.bold || chunk.italic) && new RegExp(lineBreak, 'g').test(children)) {\n        children = children.replaceAll(lineBreak, '\\\\\\n');\n    }\n\n    return children;\n};\n\nexport const applyFormattingToLeafNode = (children: string, chunk: LeafType) => {\n    // Never allow decorating break tags with rich text formatting,\n    // this can malform generated markdown\n    // Also ensure we're only ever applying text formatting to leaf node\n    // level chunks, otherwise we can end up in a situation where\n    // we try applying formatting like to a node like this:\n    // \"Text foo bar **baz**\" resulting in \"**Text foo bar **baz****\"\n    // which is invalid markup and can mess everything up\n    if (chunk.strikethrough && chunk.bold && chunk.italic) {\n        children = retainWhitespaceAndFormat(children, '~~***');\n    } else if (chunk.bold && chunk.italic) {\n        children = retainWhitespaceAndFormat(children, '***');\n    } else {\n        if (chunk.bold) {\n            children = retainWhitespaceAndFormat(children, '**');\n        }\n\n        if (chunk.italic) {\n            children = retainWhitespaceAndFormat(children, '_');\n        }\n\n        if (chunk.strikethrough) {\n            children = retainWhitespaceAndFormat(children, '~~');\n        }\n\n        if (chunk.code) {\n            children = retainWhitespaceAndFormat(children, '`');\n        }\n    }\n\n    children = replaceLineBreak(children, chunk);\n\n    return children;\n};\n"],"names":["reverseStr","string","retainWhitespaceAndFormat","format","frozenString","children","fullFormat","formattedString","replaceLineBreak","chunk","lineBreak","applyFormattingToLeafNode"],"mappings":"AAIA,MAAMA,IAAa,CAACC,MAAmBA,EAAO,MAAM,EAAE,EAAE,QAAU,EAAA,KAAK,EAAE,GAMnEC,IAA4B,CAACD,GAAgBE,MAAmB;AAE5D,QAAAC,IAAeH,EAAO,QAGtBI,IAAWD,GAIXE,IAAa,GAAGH,IAASE,IAAWL,EAAWG,CAAM;AAIvD,MAAAE,EAAS,WAAWJ,EAAO;AACpB,WAAAK;AAMX,QAAMC,IAAkBJ,IAASE,IAAWL,EAAWG,CAAM;AAGtD,SAAAF,EAAO,QAAQG,GAAcG,CAAe;AACvD,GAEMC,IAAmB,CAACH,GAAkBI,MAAoB;AAC5D,QAAMC,IAAY;AAAA;AAClB,UAAKD,EAAM,iBAAiBA,EAAM,QAAQA,EAAM,WAAW,IAAI,OAAOC,GAAW,GAAG,EAAE,KAAKL,CAAQ,MACpFA,IAAAA,EAAS,WAAWK,GAAW;AAAA,CAAM,IAG7CL;AACX,GAEaM,IAA4B,CAACN,GAAkBI,OAQpDA,EAAM,iBAAiBA,EAAM,QAAQA,EAAM,SAChCJ,IAAAH,EAA0BG,GAAU,OAAO,IAC/CI,EAAM,QAAQA,EAAM,SAChBJ,IAAAH,EAA0BG,GAAU,KAAK,KAEhDI,EAAM,SACKJ,IAAAH,EAA0BG,GAAU,IAAI,IAGnDI,EAAM,WACKJ,IAAAH,EAA0BG,GAAU,GAAG,IAGlDI,EAAM,kBACKJ,IAAAH,EAA0BG,GAAU,IAAI,IAGnDI,EAAM,SACKJ,IAAAH,EAA0BG,GAAU,GAAG,KAI/CA,IAAAG,EAAiBH,GAAUI,CAAK,GAEpCJ;"}