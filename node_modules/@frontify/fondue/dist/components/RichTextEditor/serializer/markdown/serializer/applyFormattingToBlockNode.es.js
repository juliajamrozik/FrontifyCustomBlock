import g from "escape-html";
import { Targets as m } from "../types.es.js";
import { isLeafNode as p } from "./isLeafNode.es.js";
import { isMaliciousLink as $ } from "../utils.es.js";
const u = (o) => `@[${o.category}:${o.id}]`, f = (o) => `${o}
`, d = (o, t, s, i) => {
  const a = s && s.parentType === o.olList, c = s.children.length === 1 && p(s.children[0]);
  let e = "";
  for (let r = 0; i > r; r++)
    a ? e += "   " : e += "  ";
  return `${e}${a ? "1." : "-"} ${t}${c ? `
` : ""}`;
}, L = (o, t, s, i) => (i === t.codeBlock || s === t.codeBlock || (o = g(o)), o), I = (o, t, s, i, a, c) => {
  const e = o.nodeTypes;
  switch (a) {
    case e.heading[1]:
      return `# ${t}
`;
    case e.heading[2]:
      return `## ${t}
`;
    case e.heading[3]:
      return `### ${t}
`;
    case e.heading[4]:
      return `#### ${t}
`;
    case e.heading[5]:
      return `##### ${t}
`;
    case e.heading[6]:
      return `###### ${t}
`;
    case e.blockQuote:
      return `> ${t}`;
    case e.codeBlock:
      return `\`\`\`${s.language || ""}
${t}
\`\`\`
`;
    case e.link:
      let r = s.url ?? "";
      r = $(r) ? "" : r;
      const l = s.target ?? m.Blank;
      return `[${t}](${r}){:target="${l}"}`;
    case e.image:
      let n = s.link ?? "";
      return n = $(n) ? "" : n, `![${s.caption}](${n})`;
    case e.ulList:
    case e.olList:
      return `
${t}
`;
    case e.listItem:
      return d(e, t, s, i);
    case e.listItemChild:
      return f(t);
    case e.paragraph:
      return `${t}

`;
    case e.thematicBreak:
      return `
---${t}

`;
    case e.mention:
      return u(s);
    default:
      return L(t, e, a, c);
  }
};
export {
  I as applyFormattingToBlockNode
};
//# sourceMappingURL=applyFormattingToBlockNode.es.js.map
