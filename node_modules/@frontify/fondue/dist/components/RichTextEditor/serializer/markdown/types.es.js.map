{"version":3,"file":"types.es.js","sources":["../../../../../src/components/RichTextEditor/serializer/markdown/types.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nexport type InputNodeTypes = {\n    paragraph: string;\n    blockQuote: string;\n    codeBlock: string;\n    link: string;\n    ulList: string;\n    olList: string;\n    listItem: string;\n    listItemChild: string;\n    heading: {\n        1: string;\n        2: string;\n        3: string;\n        4: string;\n        5: string;\n        6: string;\n    };\n    emphasisMark: string;\n    strongMark: string;\n    deleteMark: string;\n    inlineCodeMark: string;\n    thematicBreak: string;\n    image: string;\n    mention: string;\n};\n\nexport type MarkdownAstNodeType =\n    | 'paragraph'\n    | 'heading'\n    | 'list'\n    | 'listItem'\n    | 'listItemChild'\n    | 'link'\n    | 'image'\n    | 'blockquote'\n    | 'code'\n    | 'html'\n    | 'emphasis'\n    | 'strong'\n    | 'delete'\n    | 'inlineCode'\n    | 'thematicBreak'\n    | 'text'\n    | 'mention';\n\nexport const defaultNodeTypes: InputNodeTypes = {\n    paragraph: 'paragraph',\n    blockQuote: 'block_quote',\n    codeBlock: 'code_block',\n    link: 'link',\n    ulList: 'ul_list',\n    olList: 'ol_list',\n    listItem: 'list_item',\n    listItemChild: 'lic',\n    heading: {\n        1: 'heading_one',\n        2: 'heading_two',\n        3: 'heading_three',\n        4: 'heading_four',\n        5: 'heading_five',\n        6: 'heading_six',\n    },\n    emphasisMark: 'italic',\n    strongMark: 'bold',\n    deleteMark: 'strikethrough',\n    inlineCodeMark: 'code',\n    thematicBreak: 'thematic_break',\n    image: 'image',\n    mention: 'mention',\n};\n\nexport type NodeType = BlockType | LeafType;\n\nexport type LeafType = {\n    text: string;\n    strikethrough?: boolean;\n    bold?: boolean;\n    italic?: boolean;\n    code?: boolean;\n    parentType?: string;\n};\n\nexport type BlockType = {\n    type: string;\n    children: NodeType[];\n    parentType?: string;\n    caption?: string;\n    language?: string;\n    break?: boolean;\n    link?: string;\n    url?: string;\n    id?: string;\n    category?: string;\n    target?: TargetValue;\n};\n\nexport type RecursivePartial<T> = {\n    [P in keyof T]?: RecursivePartial<T[P]>;\n};\n\nexport type OptionType<T extends InputNodeTypes = InputNodeTypes> = {\n    nodeTypes: RecursivePartial<T>;\n    linkDestinationKey: string;\n    ignoreParagraphNewline: boolean;\n    listDepth: number;\n    imageSourceKey?: string;\n    imageCaptionKey?: string;\n};\n\nexport type PartialOptionType<T extends OptionType = OptionType> = Partial<T>;\n\nexport type MarkdownAstNode = {\n    type?: MarkdownAstNodeType;\n    ordered?: boolean;\n    value?: string;\n    text?: string;\n    children?: Array<MarkdownAstNode>;\n    depth?: 1 | 2 | 3 | 4 | 5 | 6;\n    url?: string;\n    alt?: string;\n    lang?: string;\n    // Markdown Ast metadata\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    position?: any;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    spread?: any;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    checked?: any;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    indent?: any;\n    target?: TargetValue;\n};\n\nexport const Targets = {\n    Blank: '_blank',\n    Self: '_self',\n} as const;\n\nexport type TargetValue = typeof Targets[keyof typeof Targets];\n\nexport type TextNode = { text?: string };\n\nexport type CodeBlockNode<T extends InputNodeTypes> = {\n    type: T['codeBlock'];\n    language: string | undefined;\n    children: Array<TextNode>;\n};\n\nexport type HeadingNode<T extends InputNodeTypes> = {\n    type: T['heading'][1] | T['heading'][2] | T['heading'][3] | T['heading'][4] | T['heading'][5] | T['heading'][6];\n    children: Array<DeserializedNode<T>>;\n};\n\nexport type ListNode<T extends InputNodeTypes> = {\n    type: T['olList'] | T['ulList'];\n    children: Array<DeserializedNode<T>>;\n};\n\nexport type ListItemNode<T extends InputNodeTypes> = {\n    type: T['listItem'];\n    children: Array<DeserializedNode<T>>;\n};\n\nexport type ListItemChildNode<T extends InputNodeTypes> = {\n    type: T['listItemChild'];\n    children: Array<DeserializedNode<T>>;\n};\n\nexport type ParagraphNode<T extends InputNodeTypes> = {\n    type: T['paragraph'];\n    break?: true;\n    children: Array<DeserializedNode<T>>;\n};\n\nexport type LinkNode<T extends InputNodeTypes> = {\n    type: T['link'];\n    children: Array<DeserializedNode<T>>;\n    [urlKey: string]: string | undefined | Array<DeserializedNode<T>>;\n};\n\nexport type ImageNode<T extends InputNodeTypes> = {\n    type: T['image'];\n    children: Array<DeserializedNode<T>>;\n    [sourceOrCaptionKey: string]: string | undefined | Array<DeserializedNode<T>>;\n};\n\nexport type BlockQuoteNode<T extends InputNodeTypes> = {\n    type: T['blockQuote'];\n    children: Array<DeserializedNode<T>>;\n};\n\nexport type InlineCodeMarkNode<T extends InputNodeTypes> = {\n    type: T['inlineCodeMark'];\n    children: Array<TextNode>;\n    language: string | undefined;\n};\n\nexport type ThematicBreakNode<T extends InputNodeTypes> = {\n    type: T['thematicBreak'];\n    children: Array<DeserializedNode<T>>;\n};\n\nexport type ItalicNode<T extends InputNodeTypes> = {\n    [K in T['emphasisMark']]: true;\n} & {\n    children: TextNode;\n};\n\nexport type BoldNode = {\n    bold: true;\n    children: TextNode;\n};\n\nexport type StrikeThoughNode = {\n    strikethrough: true;\n    children: TextNode;\n};\n\nexport type InlineCodeNode = {\n    code: true;\n    text: string | undefined;\n};\n\nexport type DeserializedNode<T extends InputNodeTypes> =\n    | CodeBlockNode<T>\n    | HeadingNode<T>\n    | ListNode<T>\n    | ListItemNode<T>\n    | ListItemChildNode<T>\n    | ParagraphNode<T>\n    | LinkNode<T>\n    | ImageNode<T>\n    | BlockQuoteNode<T>\n    | InlineCodeMarkNode<T>\n    | ThematicBreakNode<T>\n    | ItalicNode<T>\n    | BoldNode\n    | StrikeThoughNode\n    | InlineCodeNode\n    | TextNode;\n"],"names":["defaultNodeTypes","Targets"],"mappings":"AA+CO,MAAMA,IAAmC;AAAA,EAC5C,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,eAAe;AAAA,EACf,SAAS;AAAA,IACL,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,EACP;AAAA,EACA,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,eAAe;AAAA,EACf,OAAO;AAAA,EACP,SAAS;AACb,GAgEaC,IAAU;AAAA,EACnB,OAAO;AAAA,EACP,MAAM;AACV;"}