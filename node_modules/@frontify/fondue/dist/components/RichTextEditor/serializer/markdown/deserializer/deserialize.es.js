import { MENTION_DESERIALIZE_REGEX as k, isMaliciousLink as o } from "../utils.es.js";
function g(e, r, i) {
  var c, u;
  const t = r == null ? void 0 : r.nodeTypes, { linkDestinationKey: h, imageSourceKey: m, imageCaptionKey: d } = v(r);
  let a = [{ text: "" }];
  switch (x(e.children) && (a = e.children.flatMap(
    (l) => g(
      {
        ...l,
        ordered: e.ordered || !1
      },
      r,
      i
    )
  )), e.type) {
    case "mention":
      const l = e.children ? e.children[0].value : void 0, p = l == null ? void 0 : l.match(k);
      return {
        type: t.mention,
        category: p[1],
        id: p[2],
        children: [{ text: "" }]
      };
    case "heading":
      return {
        type: t.heading[e.depth || 1],
        children: a
      };
    case "list":
      return {
        type: e.ordered ? t.olList : t.ulList,
        children: a
      };
    case "listItem":
      return { type: t.listItem, children: a };
    case "listItemChild":
      return { type: t.listItemChild, children: a };
    case "paragraph":
      return { type: t.paragraph, children: a };
    case "link":
      return {
        type: t.link,
        [h]: y(e.url, i == null ? void 0 : i.allowUnsafeLink),
        target: e.target,
        children: a
      };
    case "image":
      return {
        type: t.image,
        children: [{ text: "" }],
        [m]: y(e.url, i == null ? void 0 : i.allowUnsafeLink),
        [d]: e.alt
      };
    case "blockquote":
      return { type: t.blockQuote, children: a };
    case "code":
      return {
        type: t.codeBlock,
        language: e.lang ?? void 0,
        children: [{ text: e.value }]
      };
    case "html":
      return (c = e.value) != null && c.includes("<br>") ? {
        break: !0,
        type: t.paragraph,
        children: [{ text: ((u = e.value) == null ? void 0 : u.replace(/<br>/g, "")) || "" }]
      } : { type: t.paragraph, children: [{ text: e.value || "" }] };
    case "emphasis":
      return {
        [t.emphasisMark]: !0,
        ...n(a),
        ...s(a)
      };
    case "strong":
      return {
        [t.strongMark]: !0,
        ...n(a),
        ...s(a)
      };
    case "delete":
      return {
        [t.deleteMark]: !0,
        ...n(a),
        ...s(a)
      };
    case "inlineCode":
      return {
        [t.inlineCodeMark]: !0,
        text: e.value,
        ...s(a)
      };
    case "thematicBreak":
      return {
        type: t.thematicBreak,
        children: [{ text: "" }]
      };
    case "text":
    default:
      return { text: e.value ?? "" };
  }
}
const x = (e) => !!e && Array.isArray(e) && e.length > 0, n = (e) => ({
  text: e.map((r) => r == null ? void 0 : r.text).join("")
}), s = (e) => e.reduce((r, i) => {
  for (const t of Object.keys(i))
    t === "children" || t === "type" || t === "text" || (r[t] = i[t]);
  return r;
}, {}), v = (e) => {
  const r = e.linkDestinationKey ?? "link", i = e.imageSourceKey ?? "link", t = e.imageCaptionKey ?? "caption";
  return { linkDestinationKey: r, imageSourceKey: i, imageCaptionKey: t };
}, y = (e, r = !1) => !r && e && !o(e) ? e : void 0;
export {
  g as default
};
//# sourceMappingURL=deserialize.es.js.map
