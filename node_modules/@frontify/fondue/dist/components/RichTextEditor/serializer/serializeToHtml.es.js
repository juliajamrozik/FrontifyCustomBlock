import { parseRawValue as n } from "../utils/parseRawValue.es.js";
import { serializeNodeToHtmlRecursive as p } from "./utils/serializeNodeToHtmlRecursive.es.js";
import { defaultPlugins as c } from "../Plugins/index.es.js";
import { mapMentionable as u } from "../Plugins/MentionPlugin/helpers/mapMentionable.es.js";
import { defaultStyles as v } from "../utils/defaultStyles.es.js";
const d = (e, t = c, r = 1, s = "normal") => {
  const l = n({ raw: e, plugins: t }), o = t.getStyles;
  return f(l, { columns: r, columnGap: s, styles: o });
}, g = async (e, t = c, r = 1, s = "normal") => {
  const l = n({ raw: e, plugins: t }), o = t.getStyles;
  return Promise.resolve(f(l, { columns: r, columnGap: s, styles: o }));
}, f = (e, { mentionable: t, columns: r = 1, columnGap: s = "normal", styles: l = v } = {}) => {
  const o = t ? u(t) : /* @__PURE__ */ new Map();
  let i = "";
  for (let a = 0, y = e.length; a < y; a++) {
    const m = e[a];
    h(m) ? i += "<br />" : i += p(m, l, {
      mappedMentionable: o
    });
  }
  return r > 1 ? `<div style="columns:${r}; column-gap:${s};">${i}</div>` : i;
}, h = (e) => {
  var t;
  return Array.isArray(e == null ? void 0 : e.children) ? (t = e == null ? void 0 : e.children) == null ? void 0 : t.every((r) => r.text === "") : !1;
};
export {
  f as serializeNodesToHtml,
  d as serializeRawToHtml,
  g as serializeRawToHtmlAsync
};
//# sourceMappingURL=serializeToHtml.es.js.map
