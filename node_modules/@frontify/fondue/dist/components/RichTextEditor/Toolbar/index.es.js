import { usePlateEditorRef as E } from "@udecode/plate";
import t from "react";
import { useEditorResizeContext as W } from "../context/EditorResizeContext.es.js";
import { useRichTextEditorContext as G } from "../context/RichTextEditorContext.es.js";
import { EditorPositioningWrapper as R } from "../EditorPositioningWrapper/index.es.js";
import { getButtonGroupWidths as b, getButtonGroupsPerRow as g } from "./utils.es.js";
import { ButtonGroupWrapper as P } from "./ButtonGroupWrapper.es.js";
const z = ({ toolbarButtons: s, editorId: o, toolbarWidth: e }) => {
  const a = E(o), { editorWidth: r } = W(), { position: i } = G(), u = e || r || 0, c = b(s.at(i)), n = g(u, c), d = R[i];
  return /* @__PURE__ */ t.createElement(
    d.ToolbarWrapper,
    {
      editorWidth: r,
      toolbarWidth: e,
      toolbarButtonGroups: n
    },
    n.map((l, f) => /* @__PURE__ */ t.createElement("div", { className: "tw-divide-x tw-divide-line tw-flex tw-w-full tw-flex-wrap", key: f }, l.map(({ group: w, index: p }) => /* @__PURE__ */ t.createElement(P, { index: p, key: p }, w.map((m, x) => /* @__PURE__ */ t.createElement(
      m.button,
      {
        editor: a,
        editorId: o,
        id: m.id,
        key: x.toString()
      }
    ))))))
  );
};
export {
  z as Toolbar
};
//# sourceMappingURL=index.es.js.map
