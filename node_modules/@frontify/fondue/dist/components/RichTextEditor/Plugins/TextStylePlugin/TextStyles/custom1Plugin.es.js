var a = Object.defineProperty;
var i = (e, t, s) => t in e ? a(e, t, { enumerable: !0, configurable: !0, writable: !0, value: s }) : e[t] = s;
var l = (e, t, s) => (i(e, typeof t != "symbol" ? t + "" : t, s), s);
import { createPluginFactory as c } from "@udecode/plate";
import n from "react";
import { alignmentClassnames as p } from "../../helper.es.js";
import { merge as g } from "../../../../../utilities/merge.es.js";
import { TextStyles as r } from "../types.es.js";
import { Plugin as f } from "../../Plugin.es.js";
import { MarkupElement as y } from "../../MarkupElement.es.js";
import { getColumnBreakClasses as C } from "../../ColumnBreakPlugin/utils/getColumnBreakClasses.es.js";
import { defaultStyles as E } from "../../../utils/defaultStyles.es.js";
const d = "textstyle-custom1-plugin";
class D extends f {
  constructor({ styles: s = E.custom1, ...m } = {}) {
    super(r.custom1, {
      label: "Custom 1",
      markupElement: new k(),
      ...m
    });
    l(this, "styles", {});
    this.styles = s;
  }
  plugins() {
    return [x(this.styles)];
  }
}
class k extends y {
  constructor(t = d, s = u) {
    super(t, s);
  }
}
const u = ({ element: e, attributes: t, children: s, styles: m }) => {
  const o = e.align;
  return /* @__PURE__ */ n.createElement(
    "p",
    {
      ...t,
      className: g([o && p[o], C(e)]),
      style: m
    },
    s
  );
}, x = (e) => c({
  key: r.custom1,
  isElement: !0,
  deserializeHtml: {
    rules: [{ validClassName: r.custom1 }]
  }
})({
  component: (t) => /* @__PURE__ */ n.createElement(u, { ...t, styles: e })
});
export {
  D as Custom1Plugin
};
//# sourceMappingURL=custom1Plugin.es.js.map
