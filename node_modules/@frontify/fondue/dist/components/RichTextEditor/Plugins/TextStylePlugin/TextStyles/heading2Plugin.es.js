var i = Object.defineProperty;
var g = (t, e, r) => e in t ? i(t, e, { enumerable: !0, configurable: !0, writable: !0, value: r }) : t[e] = r;
var l = (t, e, r) => (g(t, typeof e != "symbol" ? e + "" : e, r), r);
import { createPluginFactory as p } from "@udecode/plate";
import o from "react";
import { alignmentClassnames as u } from "../../helper.es.js";
import { merge as c } from "../../../../../utilities/merge.es.js";
import { TextStyles as m } from "../types.es.js";
import { Plugin as d } from "../../Plugin.es.js";
import { defaultStyles as f } from "../../../utils/defaultStyles.es.js";
import { MarkupElement as y } from "../../MarkupElement.es.js";
import { getColumnBreakClasses as h } from "../../ColumnBreakPlugin/utils/getColumnBreakClasses.es.js";
const E = "textstyle-heading2-plugin";
class B extends d {
  constructor({ styles: r = f.heading2, ...n } = {}) {
    super(m.heading2, {
      label: "Heading 2",
      markupElement: new H(),
      ...n
    });
    l(this, "styles", {});
    this.styles = r;
  }
  plugins() {
    return [k(this.styles)];
  }
}
class H extends y {
  constructor(e = E, r = s) {
    super(e, r);
  }
}
const s = ({ element: t, attributes: e, children: r, styles: n }) => {
  const a = t.align;
  return /* @__PURE__ */ o.createElement(
    "h2",
    {
      ...e,
      className: c([a && u[a], h(t)]),
      style: n
    },
    r
  );
}, k = (t) => p({
  key: m.heading2,
  isElement: !0,
  component: s,
  deserializeHtml: {
    rules: [{ validNodeName: ["h2", "H2"] }]
  }
})({
  component: (e) => /* @__PURE__ */ o.createElement(s, { ...e, styles: t })
});
export {
  B as Heading2Plugin
};
//# sourceMappingURL=heading2Plugin.es.js.map
