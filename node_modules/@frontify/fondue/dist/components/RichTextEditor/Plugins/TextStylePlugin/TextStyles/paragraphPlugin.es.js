var c = Object.defineProperty;
var i = (t, e, r) => e in t ? c(t, e, { enumerable: !0, configurable: !0, writable: !0, value: r }) : t[e] = r;
var m = (t, e, r) => (i(t, typeof e != "symbol" ? e + "" : e, r), r);
import { createPluginFactory as u, createParagraphPlugin as g } from "@udecode/plate";
import p from "react";
import { alignmentClassnames as P } from "../../helper.es.js";
import { merge as f } from "../../../../../utilities/merge.es.js";
import { TextStyles as o } from "../types.es.js";
import { Plugin as y } from "../../Plugin.es.js";
import { defaultStyles as h } from "../../../utils/defaultStyles.es.js";
import { getColumnBreakClasses as E } from "../../ColumnBreakPlugin/utils/getColumnBreakClasses.es.js";
import { MarkupElement as k } from "../../MarkupElement.es.js";
class G extends y {
  constructor({ styles: r = h.p, ...a } = {}) {
    super(o.p, {
      markupElement: new d(),
      label: "Body Text",
      ...a
    });
    m(this, "styles", {});
    this.styles = r;
  }
  plugins() {
    return [S(this.styles)];
  }
}
const x = "tw-m-0 tw-px-0 tw-py-0", s = ({ element: t, attributes: e, children: r, styles: a }) => {
  const n = t.align, l = f([n && P[n], x, E(t)]);
  return /* @__PURE__ */ p.createElement("p", { ...e, className: l, style: a }, r);
};
class d extends k {
  constructor(e = o.p, r = s) {
    super(e, r);
  }
}
const S = (t) => u({
  ...g(),
  key: o.p,
  isElement: !0,
  component: s
})({
  component: (e) => /* @__PURE__ */ p.createElement(s, { ...e, styles: t })
});
export {
  x as PARAGRAPH_CLASSES,
  d as ParagraphMarkupElement,
  s as ParagraphMarkupElementNode,
  G as ParagraphPlugin,
  S as createParagraphPlugin
};
//# sourceMappingURL=paragraphPlugin.es.js.map
