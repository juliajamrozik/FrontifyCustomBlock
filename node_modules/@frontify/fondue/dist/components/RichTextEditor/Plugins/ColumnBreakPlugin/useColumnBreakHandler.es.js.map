{"version":3,"file":"useColumnBreakHandler.es.js","sources":["../../../../../src/components/RichTextEditor/Plugins/ColumnBreakPlugin/useColumnBreakHandler.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { PlateEditor, getParentNode, getPointBefore, getStartPoint, select } from '@udecode/plate';\nimport { Path } from 'slate';\nimport { KEY_ELEMENT_BREAK_AFTER_COLUMN } from './createColumnBreakPlugin';\nimport { setColumnBreaks } from './utils/setColumnBreaks';\nimport { updateColumnBreaks } from './utils/updateColumnBreaks';\n\nconst moveCursorToPath = (editor: PlateEditor, path: Path) => {\n    const startPoint = getStartPoint(editor, path);\n    setTimeout(() => {\n        select(editor, {\n            anchor: startPoint,\n            focus: startPoint,\n        });\n    });\n};\n\nconst getColumnCount = (editor: PlateEditor) => {\n    const columnBreakPlugin = editor.plugins.find((plugin) => plugin.key === KEY_ELEMENT_BREAK_AFTER_COLUMN);\n    return (columnBreakPlugin?.options as { columns: number })?.columns ?? 1;\n};\n\nexport const useColumnBreakHandler = <E extends PlateEditor = PlateEditor>(editor: E) => {\n    const { apply } = editor;\n    const columnCount = getColumnCount(editor);\n\n    editor.apply = (operation) => {\n        switch (operation.type) {\n            case 'split_node':\n                operation.properties = { ...operation.properties, breakAfterColumn: undefined };\n                break;\n            case 'merge_node':\n                const pointBefore = getPointBefore(editor, operation.path);\n\n                if (!pointBefore) {\n                    break;\n                }\n\n                const node = getParentNode(editor, pointBefore.path);\n                setColumnBreaks(editor, { at: pointBefore, value: undefined });\n                updateColumnBreaks(editor, columnCount);\n\n                if (node?.[0].breakAfterColumn) {\n                    moveCursorToPath(editor, operation.path);\n                    return editor;\n                }\n\n                break;\n        }\n\n        apply(operation);\n    };\n\n    setTimeout(() => updateColumnBreaks(editor, columnCount));\n};\n"],"names":["moveCursorToPath","editor","path","startPoint","getStartPoint","select","getColumnCount","columnBreakPlugin","plugin","KEY_ELEMENT_BREAK_AFTER_COLUMN","_a","useColumnBreakHandler","apply","columnCount","operation","pointBefore","getPointBefore","node","getParentNode","setColumnBreaks","updateColumnBreaks"],"mappings":";;;;AAQA,MAAMA,IAAmB,CAACC,GAAqBC,MAAe;AACpD,QAAAC,IAAaC,EAAcH,GAAQC,CAAI;AAC7C,aAAW,MAAM;AACb,IAAAG,EAAOJ,GAAQ;AAAA,MACX,QAAQE;AAAA,MACR,OAAOA;AAAA,IAAA,CACV;AAAA,EAAA,CACJ;AACL,GAEMG,IAAiB,CAACL,MAAwB;;AACtC,QAAAM,IAAoBN,EAAO,QAAQ,KAAK,CAACO,MAAWA,EAAO,QAAQC,CAA8B;AAC/F,WAAAC,IAAAH,KAAA,gBAAAA,EAAmB,YAAnB,gBAAAG,EAAoD,YAAW;AAC3E,GAEaC,IAAwB,CAAsCV,MAAc;AAC/E,QAAA,EAAE,OAAAW,EAAU,IAAAX,GACZY,IAAcP,EAAeL,CAAM;AAElC,EAAAA,EAAA,QAAQ,CAACa,MAAc;AAC1B,YAAQA,EAAU,MAAM;AAAA,MACpB,KAAK;AACD,QAAAA,EAAU,aAAa,EAAE,GAAGA,EAAU,YAAY,kBAAkB;AACpE;AAAA,MACJ,KAAK;AACD,cAAMC,IAAcC,EAAef,GAAQa,EAAU,IAAI;AAEzD,YAAI,CAACC;AACD;AAGJ,cAAME,IAAOC,EAAcjB,GAAQc,EAAY,IAAI;AAI/C,YAHJI,EAAgBlB,GAAQ,EAAE,IAAIc,GAAa,OAAO,QAAW,GAC7DK,EAAmBnB,GAAQY,CAAW,GAElCI,KAAA,QAAAA,EAAO,GAAG;AACO,iBAAAjB,EAAAC,GAAQa,EAAU,IAAI,GAChCb;AAGX;AAAA,IACR;AAEA,IAAAW,EAAME,CAAS;AAAA,EAAA,GAGnB,WAAW,MAAMM,EAAmBnB,GAAQY,CAAW,CAAC;AAC5D;"}