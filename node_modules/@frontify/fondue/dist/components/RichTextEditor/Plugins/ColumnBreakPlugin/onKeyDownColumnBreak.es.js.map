{"version":3,"file":"onKeyDownColumnBreak.es.js","sources":["../../../../../src/components/RichTextEditor/Plugins/ColumnBreakPlugin/onKeyDownColumnBreak.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport {\n    HotkeyPlugin,\n    KeyboardHandlerReturnType,\n    PlateEditor,\n    Value,\n    WithPlatePlugin,\n    getNodeEntries,\n    isBlock,\n    someNode,\n} from '@udecode/plate';\nimport isHotkey from 'is-hotkey';\nimport { Location } from 'slate';\nimport { KEY_ELEMENT_BREAK_AFTER_COLUMN } from './createColumnBreakPlugin';\nimport { getColumnBreakCount } from './utils/getColumnBreakCount';\nimport { setColumnBreaks } from './utils/setColumnBreaks';\nimport { updateColumnBreaks } from './utils/updateColumnBreaks';\n\nexport const toggleColumnBreak = (editor: PlateEditor<Value>, columns: number, event: React.BaseSyntheticEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const isActive = !!editor?.selection && someNode(editor, { match: (node) => !!node.breakAfterColumn });\n\n    if (isActive) {\n        setColumnBreaks(editor, { value: undefined });\n    } else {\n        const columnBreakCount = getColumnBreakCount(editor);\n        const toggleRange = Math.max(columns - columnBreakCount - 1, 0);\n\n        if (toggleRange === 0) {\n            return;\n        }\n\n        const elementsToToggle = Array.from(\n            getNodeEntries(editor, {\n                at: editor.selection as Location,\n                match: (node) => isBlock(editor, node),\n                mode: 'lowest',\n            }),\n        ).slice(-toggleRange); // apply column breaks ath the end of the selection\n\n        for (const element of elementsToToggle) {\n            setColumnBreaks(editor, { value: 'active', at: element[1] });\n        }\n    }\n\n    updateColumnBreaks(editor, columns);\n};\n\nexport const onKeyDownColumnBreak =\n    (\n        editor: PlateEditor<Value>,\n        { options: { hotkey } }: WithPlatePlugin<HotkeyPlugin, Value, PlateEditor<Value>>,\n    ): KeyboardHandlerReturnType =>\n    (event) => {\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        if (!hotkey) {\n            return;\n        }\n\n        if (isHotkey(hotkey, event)) {\n            const columnBreakPlugin = editor.plugins.find((plugin) => plugin.key === KEY_ELEMENT_BREAK_AFTER_COLUMN);\n            const columns = (columnBreakPlugin?.options as { columns: number })?.columns ?? 1;\n            toggleColumnBreak(editor, columns, event);\n        }\n    };\n"],"names":["toggleColumnBreak","editor","columns","event","someNode","node","setColumnBreaks","columnBreakCount","getColumnBreakCount","toggleRange","elementsToToggle","getNodeEntries","isBlock","element","updateColumnBreaks","onKeyDownColumnBreak","hotkey","isHotkey","columnBreakPlugin","plugin","KEY_ELEMENT_BREAK_AFTER_COLUMN","_a"],"mappings":";;;;;;AAmBO,MAAMA,IAAoB,CAACC,GAA4BC,GAAiBC,MAAoC;AAM/G,MALAA,EAAM,eAAe,GACrBA,EAAM,gBAAgB,GAEL,CAAC,EAACF,KAAA,QAAAA,EAAQ,cAAaG,EAASH,GAAQ,EAAE,OAAO,CAACI,MAAS,CAAC,CAACA,EAAK,iBAAkB,CAAA;AAGjG,IAAAC,EAAgBL,GAAQ,EAAE,OAAO,OAAW,CAAA;AAAA,OACzC;AACG,UAAAM,IAAmBC,EAAoBP,CAAM,GAC7CQ,IAAc,KAAK,IAAIP,IAAUK,IAAmB,GAAG,CAAC;AAE9D,QAAIE,MAAgB;AAChB;AAGJ,UAAMC,IAAmB,MAAM;AAAA,MAC3BC,EAAeV,GAAQ;AAAA,QACnB,IAAIA,EAAO;AAAA,QACX,OAAO,CAACI,MAASO,EAAQX,GAAQI,CAAI;AAAA,QACrC,MAAM;AAAA,MAAA,CACT;AAAA,IAAA,EACH,MAAM,CAACI,CAAW;AAEpB,eAAWI,KAAWH;AACF,MAAAJ,EAAAL,GAAQ,EAAE,OAAO,UAAU,IAAIY,EAAQ,CAAC,GAAG;AAAA,EAEnE;AAEA,EAAAC,EAAmBb,GAAQC,CAAO;AACtC,GAEaa,IACT,CACId,GACA,EAAE,SAAS,EAAE,QAAAe,EAAO,EAAA,MAExB,CAACb,MAAU;;AACP,MAAI,CAAAA,EAAM,oBAILa,KAIDC,EAASD,GAAQb,CAAK,GAAG;AACnB,UAAAe,IAAoBjB,EAAO,QAAQ,KAAK,CAACkB,MAAWA,EAAO,QAAQC,CAA8B,GACjGlB,MAAWmB,IAAAH,KAAA,gBAAAA,EAAmB,YAAnB,gBAAAG,EAAoD,YAAW;AAC9D,IAAArB,EAAAC,GAAQC,GAASC,CAAK;AAAA,EAC5C;AACJ;"}