{"version":3,"file":"PluginComposer.es.js","sources":["../../../../src/components/RichTextEditor/Plugins/PluginComposer.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { PlatePluginComponent } from '@udecode/plate';\nimport { ToolbarPositionWithButtons } from '../Toolbar/ToolbarPositionWithButtons';\nimport { MarkupElement } from './MarkupElement';\nimport { InlineData, ObjectType, PlatePluginList, Plugin, PluginComposerProps, Plugins, ToolbarButtons } from './types';\nimport { CSSProperties } from 'react';\nimport { PluginProps } from './Plugin';\n\nexport class PluginComposer {\n    private platePlugins: PlatePluginList = new Map();\n    private markupElements: ObjectType<PlatePluginComponent> = {};\n    private inlineElements: InlineData[] = [];\n    private toolbarButtons: ToolbarButtons = new ToolbarPositionWithButtons();\n    private styles: Record<string, CSSProperties> = {};\n\n    constructor(protected props?: PluginComposerProps) {}\n\n    public setPlugin(...plugins: Plugins): this {\n        for (const group of plugins) {\n            const groupOfPlugins: Plugin[] = Array.isArray(group) ? group : [group];\n\n            for (const plugin of groupOfPlugins) {\n                this.addElement(plugin.markupElement);\n                this.addElement(plugin.markupInputElement);\n                this.addLeafElements(plugin.leafMarkupElements);\n                this.addPlugin(plugin);\n                this.addInline(plugin.inline());\n\n                if (plugin.styles) {\n                    this.addStyles(plugin.styles, plugin.id);\n                }\n\n                if (plugin.textStyles) {\n                    this.addTextStylesOfSubPlugins(plugin.textStyles);\n                }\n            }\n\n            if (this.hasToolbar) {\n                this.toolbarButtons.createGroupOfButtons(groupOfPlugins);\n            }\n        }\n\n        return this;\n    }\n\n    private addTextStylesOfSubPlugins(textStyles: Plugin<PluginProps>[]) {\n        for (const textStylePlugins of textStyles) {\n            if (textStylePlugins.styles) {\n                this.addStyles(textStylePlugins.styles, textStylePlugins.id);\n            }\n        }\n    }\n\n    private addLeafElements(leafMarkupElement: MarkupElement | MarkupElement[] | undefined) {\n        if (leafMarkupElement === undefined) {\n            return;\n        }\n\n        const leafMarkupElements = Array.isArray(leafMarkupElement) ? leafMarkupElement : [leafMarkupElement];\n        for (const leafMarkupElement of leafMarkupElements) {\n            this.addElement(leafMarkupElement);\n        }\n    }\n\n    private addElement(markupElement: MarkupElement | undefined) {\n        if (markupElement === undefined) {\n            return;\n        }\n\n        const id = markupElement.getId();\n        const node = markupElement.getNode();\n\n        if (node && !this.markupElements[id]) {\n            this.markupElements[id] = node;\n        }\n    }\n\n    private addPlugin(plugin: Plugin) {\n        if (plugin.id && !this.platePlugins.has(plugin.id)) {\n            this.platePlugins.set(plugin.id, plugin.plugins());\n        }\n    }\n\n    private addInline(inl: InlineData | undefined) {\n        if (inl) {\n            this.inlineElements.push(inl);\n        }\n    }\n\n    private addStyles(styles: CSSProperties, id: string) {\n        this.styles[id] = styles;\n    }\n\n    get elements() {\n        return { ...this.defaultElementsFromPlugins, ...this.markupElements };\n    }\n\n    private get defaultElementsFromPlugins() {\n        const defaultElements: ObjectType<PlatePluginComponent> = {};\n        for (const pluginArray of this.platePlugins.values()) {\n            for (const plugin of pluginArray) {\n                const { key, component } = plugin;\n                if (component) {\n                    defaultElements[key] = component;\n                }\n            }\n        }\n        return defaultElements;\n    }\n\n    get plugins() {\n        const platePlugins = [];\n        for (const value of this.platePlugins.values()) {\n            platePlugins.push(...value);\n        }\n\n        return platePlugins;\n    }\n\n    get buttons(): ToolbarButtons {\n        return this.toolbarButtons;\n    }\n\n    get inline(): InlineData[] {\n        return this.inlineElements;\n    }\n\n    get hasToolbar(): boolean {\n        return !this.props?.noToolbar;\n    }\n\n    get getStyles(): Record<string, CSSProperties> {\n        return this.styles;\n    }\n}\n"],"names":["PluginComposer","props","__publicField","ToolbarPositionWithButtons","plugins","group","groupOfPlugins","plugin","textStyles","textStylePlugins","leafMarkupElement","leafMarkupElements","markupElement","id","node","inl","styles","defaultElements","pluginArray","key","component","platePlugins","value","_a"],"mappings":";;;;AASO,MAAMA,EAAe;AAAA,EAOxB,YAAsBC,GAA6B;AAN3C,IAAAC,EAAA,0CAAoC;AACpC,IAAAA,EAAA,wBAAmD,CAAA;AACnD,IAAAA,EAAA,wBAA+B,CAAA;AAC/B,IAAAA,EAAA,wBAAiC,IAAIC;AACrC,IAAAD,EAAA,gBAAwC,CAAA;AAE1B,SAAA,QAAAD;AAAA,EAA8B;AAAA,EAE7C,aAAaG,GAAwB;AACxC,eAAWC,KAASD,GAAS;AACzB,YAAME,IAA2B,MAAM,QAAQD,CAAK,IAAIA,IAAQ,CAACA,CAAK;AAEtE,iBAAWE,KAAUD;AACZ,aAAA,WAAWC,EAAO,aAAa,GAC/B,KAAA,WAAWA,EAAO,kBAAkB,GACpC,KAAA,gBAAgBA,EAAO,kBAAkB,GAC9C,KAAK,UAAUA,CAAM,GAChB,KAAA,UAAUA,EAAO,OAAQ,CAAA,GAE1BA,EAAO,UACP,KAAK,UAAUA,EAAO,QAAQA,EAAO,EAAE,GAGvCA,EAAO,cACF,KAAA,0BAA0BA,EAAO,UAAU;AAIxD,MAAI,KAAK,cACA,KAAA,eAAe,qBAAqBD,CAAc;AAAA,IAE/D;AAEO,WAAA;AAAA,EACX;AAAA,EAEQ,0BAA0BE,GAAmC;AACjE,eAAWC,KAAoBD;AAC3B,MAAIC,EAAiB,UACjB,KAAK,UAAUA,EAAiB,QAAQA,EAAiB,EAAE;AAAA,EAGvE;AAAA,EAEQ,gBAAgBC,GAAgE;AACpF,QAAIA,MAAsB;AACtB;AAGJ,UAAMC,IAAqB,MAAM,QAAQD,CAAiB,IAAIA,IAAoB,CAACA,CAAiB;AACpG,eAAWA,KAAqBC;AAC5B,WAAK,WAAWD,CAAiB;AAAA,EAEzC;AAAA,EAEQ,WAAWE,GAA0C;AACzD,QAAIA,MAAkB;AAClB;AAGE,UAAAC,IAAKD,EAAc,SACnBE,IAAOF,EAAc;AAE3B,IAAIE,KAAQ,CAAC,KAAK,eAAeD,CAAE,MAC1B,KAAA,eAAeA,CAAE,IAAIC;AAAA,EAElC;AAAA,EAEQ,UAAUP,GAAgB;AAC1B,IAAAA,EAAO,MAAM,CAAC,KAAK,aAAa,IAAIA,EAAO,EAAE,KAC7C,KAAK,aAAa,IAAIA,EAAO,IAAIA,EAAO,SAAS;AAAA,EAEzD;AAAA,EAEQ,UAAUQ,GAA6B;AAC3C,IAAIA,KACK,KAAA,eAAe,KAAKA,CAAG;AAAA,EAEpC;AAAA,EAEQ,UAAUC,GAAuBH,GAAY;AAC5C,SAAA,OAAOA,CAAE,IAAIG;AAAA,EACtB;AAAA,EAEA,IAAI,WAAW;AACX,WAAO,EAAE,GAAG,KAAK,4BAA4B,GAAG,KAAK,eAAe;AAAA,EACxE;AAAA,EAEA,IAAY,6BAA6B;AACrC,UAAMC,IAAoD,CAAA;AAC1D,eAAWC,KAAe,KAAK,aAAa,OAAA;AACxC,iBAAWX,KAAUW,GAAa;AACxB,cAAA,EAAE,KAAAC,GAAK,WAAAC,EAAc,IAAAb;AAC3B,QAAIa,MACAH,EAAgBE,CAAG,IAAIC;AAAA,MAE/B;AAEG,WAAAH;AAAA,EACX;AAAA,EAEA,IAAI,UAAU;AACV,UAAMI,IAAe,CAAA;AACrB,eAAWC,KAAS,KAAK,aAAa,OAAA;AACrB,MAAAD,EAAA,KAAK,GAAGC,CAAK;AAGvB,WAAAD;AAAA,EACX;AAAA,EAEA,IAAI,UAA0B;AAC1B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,SAAuB;AACvB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,aAAsB;;AACf,WAAA,GAACE,IAAA,KAAK,UAAL,QAAAA,EAAY;AAAA,EACxB;AAAA,EAEA,IAAI,YAA2C;AAC3C,WAAO,KAAK;AAAA,EAChB;AACJ;"}