var e = Object.defineProperty;
var o = (p, i, r) => i in p ? e(p, i, { enumerable: !0, configurable: !0, writable: !0, value: r }) : p[i] = r;
var s = (p, i, r) => (o(p, typeof i != "symbol" ? i + "" : i, r), r);
import { createAlignPlugin as l, ELEMENT_PARAGRAPH as E, ELEMENT_LIC as n } from "@udecode/plate";
import { Plugin as m } from "../Plugin.es.js";
import { ALIGN_PLUGIN as T } from "./id.es.js";
import { ELEMENT_CHECK_ITEM as u } from "../CheckboxListPlugin/id.es.js";
class c extends m {
  constructor({ validTypes: r = [], ...t } = {}) {
    super(T, {
      ...t
    });
    s(this, "validTypes", []);
    this.validTypes = r;
  }
  plugins() {
    return [
      l({
        inject: {
          props: {
            validTypes: [...this.validTypes, E, n, u]
          }
        }
      })
    ];
  }
}
export {
  c as AlignPlugin
};
//# sourceMappingURL=AlignPlugin.es.js.map
