import { getHotkeyByPlatform as l } from "../../helpers/getHotkeyByPlatform.es.js";
import { getTooltip as s } from "../../helpers/getTooltip.es.js";
import { usePlateEditorState as i, useEventPlateId as m, isRangeInSameBlock as c, LinkToolbarButton as p } from "@udecode/plate";
import t from "react";
import { ButtonWrapper as u, IconStylingWrapper as f, buttonStyles as k, getButtonClassNames as E } from "../helper.es.js";
import b from "../../../../foundation/Icon/Generated/IconLink16.es.js";
const S = ({ id: n, editorId: r }) => {
  const e = i(m(r)), o = !!c(e, {
    at: e.selection
  }), a = E(o);
  return /* @__PURE__ */ t.createElement(u, { id: n }, /* @__PURE__ */ t.createElement(
    p,
    {
      tooltip: s(
        o ? `Link
${l("Ctrl+K")}` : "Links can only be set for a single text block."
      ),
      icon: /* @__PURE__ */ t.createElement(f, { icon: /* @__PURE__ */ t.createElement(b, null) }),
      classNames: a,
      styles: k,
      actionHandler: "onMouseDown"
    }
  ));
};
export {
  S as LinkButton
};
//# sourceMappingURL=LinkButton.es.js.map
