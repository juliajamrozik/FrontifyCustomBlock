var o = Object.defineProperty;
var s = (i, e, t) => e in i ? o(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t;
var r = (i, e, t) => (s(i, typeof e != "symbol" ? e + "" : e, t), t);
import { createPluginFactory as n, createListPlugin as m } from "@udecode/plate";
import { Plugin as a } from "../Plugin.es.js";
import { LIST_PLUGIN as f } from "./id.es.js";
import { ListItemContentMarkupElement as l } from "./ListItemContentMarkupElement.es.js";
import { ListItemMarkupElement as u } from "./ListItemMarkupElement.es.js";
import { withList as c } from "./withList.es.js";
const L = "textStyle", k = n({
  key: L,
  isLeaf: !0
});
class y extends a {
  constructor(t) {
    super(f, {
      leafMarkupElements: [new l(), new u()],
      ...t
    });
    r(this, "isSoftBreak");
    this.isSoftBreak = (t == null ? void 0 : t.isSoftBreak) ?? !1;
  }
  plugins() {
    return [
      m({
        withOverrides: c,
        options: {
          isSoftBreak: this.isSoftBreak
        }
      }),
      k()
    ];
  }
}
export {
  y as ListPlugin,
  L as MARK_TEXT_STYLE,
  k as createLicStylePlugin
};
//# sourceMappingURL=ListPlugin.es.js.map
