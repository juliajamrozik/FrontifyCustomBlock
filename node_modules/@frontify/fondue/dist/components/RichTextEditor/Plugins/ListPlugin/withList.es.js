import { insertBreakList as n, deleteBackwardList as i, deleteForwardList as F, deleteFragmentList as k, insertFragmentList as w, normalizeList as B } from "@udecode/plate";
const c = (e, { options: { validLiChildrenTypes: a, isSoftBreak: s } }) => {
  const { insertBreak: t, deleteBackward: l, deleteForward: m, deleteFragment: f } = e;
  return s ? e.insertSoftBreak = () => {
    n(e) || t();
  } : e.insertBreak = () => {
    n(e) || t();
  }, e.deleteBackward = (r) => {
    i(e, r) || l(r);
  }, e.deleteForward = (r) => {
    F(e) || m(r);
  }, e.deleteFragment = (r) => {
    k(e) || f(r);
  }, e.insertFragment = w(e), e.normalizeNode = B(e, { validLiChildrenTypes: a }), e;
};
export {
  c as withList
};
//# sourceMappingURL=withList.es.js.map
