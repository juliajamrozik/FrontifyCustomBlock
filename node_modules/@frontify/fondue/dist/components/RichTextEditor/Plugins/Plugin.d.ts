import { PlatePlugin } from '@udecode/plate';
import { InlineData, PluginButton } from './types';
import { Position } from '../EditorPositioningWrapper';
import type { MarkupElement } from './MarkupElement';
import { CSSProperties } from 'react';
export type PluginProps = {
    id?: string;
    button?: PluginButton;
    markupElement?: MarkupElement;
    markupInputElement?: MarkupElement;
    leafMarkupElements?: MarkupElement | MarkupElement[];
    showIn?: Position[];
    columns?: number;
    gap?: string | number;
    label?: string;
    textStyles?: Plugin<PluginProps>[];
    styles?: CSSProperties;
};
export declare abstract class Plugin<P extends PluginProps = PluginProps> {
    readonly id: string;
    readonly button?: PluginButton;
    readonly markupElement?: MarkupElement;
    readonly markupInputElement?: MarkupElement;
    readonly leafMarkupElements?: MarkupElement | MarkupElement[];
    readonly showIn: Position[];
    readonly props?: P;
    readonly textStyles?: Plugin<PluginProps>[];
    readonly styles?: CSSProperties;
    constructor(id: string, rest?: P);
    inline(): InlineData | undefined;
    abstract plugins(): PlatePlugin[];
}
