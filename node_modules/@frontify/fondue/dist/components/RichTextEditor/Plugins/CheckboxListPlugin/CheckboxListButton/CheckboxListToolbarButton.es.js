import { usePlateEditorState as m, useEventPlateId as g, getNode as N, someNode as h, BlockToolbarButton as T, focusEditor as x, withoutNormalizing as P, unwrapList as y, toggleNodeType as C, getParentNode as L, setElements as f, ELEMENT_PARAGRAPH as b } from "@udecode/plate";
import i from "react";
import { ELEMENT_CHECK_ITEM as k } from "../id.es.js";
const M = ({
  id: c,
  type: s = k,
  active: l,
  ...e
}) => {
  var n, p, u;
  const t = m(g(c)), o = ((n = t == null ? void 0 : t.selection) == null ? void 0 : n.focus.path) && N(t, (u = (p = t == null ? void 0 : t.selection) == null ? void 0 : p.focus) == null ? void 0 : u.path), a = l ?? (!!(t != null && t.selection) && h(t, { match: { type: s } }));
  return /* @__PURE__ */ i.createElement(
    T,
    {
      active: a,
      type: s,
      onClick: (E) => {
        E.preventDefault(), E.stopPropagation(), v(t, { type: s, isActive: a, node: o }), x(t);
      },
      ...e
    }
  );
}, v = (c, { type: s, isActive: l, node: e }) => P(c, () => {
  var t, o;
  if (c != null && c.selection) {
    if (l || y(c, {}), C(c, {
      activeType: s
    }), !(e != null && e.textStyle)) {
      const a = L(c, (o = (t = c == null ? void 0 : c.selection) == null ? void 0 : t.focus) == null ? void 0 : o.path), n = a && a[0].type;
      f(c, {
        textStyle: n
      });
    }
    l && f(c, {
      type: (e == null ? void 0 : e.textStyle) ?? b
    });
  }
});
export {
  M as CheckboxListToolbarButton,
  v as toggleCheckboxList
};
//# sourceMappingURL=CheckboxListToolbarButton.es.js.map
