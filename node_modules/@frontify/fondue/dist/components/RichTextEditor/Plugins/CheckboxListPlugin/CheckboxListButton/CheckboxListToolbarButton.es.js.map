{"version":3,"file":"CheckboxListToolbarButton.es.js","sources":["../../../../../../src/components/RichTextEditor/Plugins/CheckboxListPlugin/CheckboxListButton/CheckboxListToolbarButton.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport {\n    BlockToolbarButton,\n    ELEMENT_PARAGRAPH,\n    NodeOf,\n    PlateEditor,\n    ToolbarButtonProps,\n    Value,\n    focusEditor,\n    getNode,\n    getParentNode,\n    setElements,\n    someNode,\n    toggleNodeType,\n    unwrapList,\n    useEventPlateId,\n    usePlateEditorState,\n    withoutNormalizing,\n} from '@udecode/plate';\nimport React from 'react';\nimport { ELEMENT_CHECK_ITEM } from '../id';\n\nexport const CheckboxListToolbarButton = ({\n    id,\n    type = ELEMENT_CHECK_ITEM,\n    active,\n    ...props\n}: ToolbarButtonProps & { type?: string }) => {\n    const editor = usePlateEditorState(useEventPlateId(id));\n    const node = editor?.selection?.focus.path && getNode(editor, editor?.selection?.focus?.path);\n    const isActive = active ?? (!!editor?.selection && someNode(editor, { match: { type } }));\n\n    return (\n        <BlockToolbarButton\n            active={isActive}\n            type={type}\n            onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                toggleCheckboxList(editor, { type, isActive, node });\n                focusEditor(editor);\n            }}\n            {...props}\n        />\n    );\n};\n\nexport const toggleCheckboxList = <V extends Value>(\n    editor: PlateEditor<V>,\n    { type, isActive, node }: { type: string; isActive: boolean; node?: NodeOf<PlateEditor<Value>> | null },\n) =>\n    withoutNormalizing(editor, () => {\n        if (!editor?.selection) {\n            return;\n        }\n\n        if (!isActive) {\n            unwrapList(editor, {});\n        }\n\n        toggleNodeType(editor, {\n            activeType: type,\n        });\n\n        if (!node?.textStyle) {\n            const parentNode = getParentNode(editor, editor?.selection?.focus?.path);\n            const textStyle = parentNode && parentNode[0].type;\n            setElements(editor, {\n                textStyle,\n            });\n        }\n\n        if (isActive) {\n            setElements(editor, {\n                type: (node?.textStyle as string) ?? ELEMENT_PARAGRAPH,\n            });\n        }\n    });\n"],"names":["CheckboxListToolbarButton","id","type","ELEMENT_CHECK_ITEM","active","props","editor","usePlateEditorState","useEventPlateId","node","_a","getNode","_c","_b","isActive","someNode","React","BlockToolbarButton","e","toggleCheckboxList","focusEditor","withoutNormalizing","unwrapList","toggleNodeType","parentNode","getParentNode","textStyle","setElements","ELEMENT_PARAGRAPH"],"mappings":";;;AAuBO,MAAMA,IAA4B,CAAC;AAAA,EACtC,IAAAC;AAAA,EACA,MAAAC,IAAOC;AAAA,EACP,QAAAC;AAAA,EACA,GAAGC;AACP,MAA8C;;AAC1C,QAAMC,IAASC,EAAoBC,EAAgBP,CAAE,CAAC,GAChDQ,MAAOC,IAAAJ,KAAA,gBAAAA,EAAQ,cAAR,gBAAAI,EAAmB,MAAM,SAAQC,EAAQL,IAAQM,KAAAC,IAAAP,KAAA,gBAAAA,EAAQ,cAAR,gBAAAO,EAAmB,UAAnB,gBAAAD,EAA0B,IAAI,GACtFE,IAAWV,MAAW,CAAC,EAACE,KAAA,QAAAA,EAAQ,cAAaS,EAAST,GAAQ,EAAE,OAAO,EAAE,MAAAJ,KAAQ;AAGnF,SAAA,gBAAAc,EAAA;AAAA,IAACC;AAAA,IAAA;AAAA,MACG,QAAQH;AAAA,MACR,MAAAZ;AAAA,MACA,SAAS,CAACgB,MAAM;AACZ,QAAAA,EAAE,eAAe,GACjBA,EAAE,gBAAgB,GAElBC,EAAmBb,GAAQ,EAAE,MAAAJ,GAAM,UAAAY,GAAU,MAAAL,EAAM,CAAA,GACnDW,EAAYd,CAAM;AAAA,MACtB;AAAA,MACC,GAAGD;AAAA,IAAA;AAAA,EAAA;AAGhB,GAEac,IAAqB,CAC9Bb,GACA,EAAE,MAAAJ,GAAM,UAAAY,GAAU,MAAAL,EAAK,MAEvBY,EAAmBf,GAAQ,MAAM;;AACzB,MAACA,KAAA,QAAAA,EAAQ,WAYT;AAAA,QARCQ,KACUQ,EAAAhB,GAAQ,CAAA,CAAE,GAGzBiB,EAAejB,GAAQ;AAAA,MACnB,YAAYJ;AAAA,IAAA,CACf,GAEG,EAACO,KAAA,QAAAA,EAAM,YAAW;AAClB,YAAMe,IAAaC,EAAcnB,IAAQO,KAAAH,IAAAJ,KAAA,gBAAAA,EAAQ,cAAR,gBAAAI,EAAmB,UAAnB,gBAAAG,EAA0B,IAAI,GACjEa,IAAYF,KAAcA,EAAW,CAAC,EAAE;AAC9C,MAAAG,EAAYrB,GAAQ;AAAA,QAChB,WAAAoB;AAAA,MAAA,CACH;AAAA,IACL;AAEA,IAAIZ,KACAa,EAAYrB,GAAQ;AAAA,MAChB,OAAOG,KAAA,gBAAAA,EAAM,cAAwBmB;AAAA,IAAA,CACxC;AAAA;AAET,CAAC;"}