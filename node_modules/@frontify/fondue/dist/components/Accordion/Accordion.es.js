import { useAccordion as N, useAccordionItem as P } from "@react-aria/accordion";
import { useFocusRing as R } from "@react-aria/focus";
import { mergeProps as x } from "@react-aria/utils";
import { Item as T } from "@react-stately/collections";
import { useTreeState as F } from "@react-stately/tree";
import { FOCUS_STYLE_INSET as O } from "../../utilities/focusStyle.es.js";
import { merge as k } from "../../utilities/merge.es.js";
import d, { useRef as w, Children as u, useEffect as L, isValidElement as C } from "react";
import { AccordionHeader as U } from "./AccordionHeader.es.js";
import { CollapsibleWrap as _ } from "../CollapsibleWrap/CollapsibleWrap.es.js";
const M = "fondue-accordion", I = "fondue-accordion-item", S = ({
  item: e,
  state: r,
  header: t,
  padding: o = !0,
  divider: c = !1,
  headerComponent: n = U,
  "data-test-id": i = I
}) => {
  var a, m;
  const { active: s, ...f } = t, h = w(null), { buttonProps: p, regionProps: y } = P({ item: e }, r, h), A = r.expandedKeys.has(e.key), { isFocusVisible: E, focusProps: g } = R();
  return /* @__PURE__ */ d.createElement(
    "div",
    {
      key: e.key,
      className: k([E ? O : "", c && "tw-divide-y tw-divide-black-10"])
    },
    /* @__PURE__ */ d.createElement(
      "button",
      {
        ...x(p, g),
        "data-test-id": i,
        ref: h,
        onClick: (l) => {
          t.onClick && t.onClick(), p.onClick && p.onClick(l);
        },
        onKeyUp: (l) => {
          t.onClick && l.key === "Enter" && t.onClick(), p.onKeyUp && p.onKeyUp(l);
        },
        className: "tw-w-full focus-visible:tw-outline-none"
      },
      /* @__PURE__ */ d.createElement(n, { isOpen: A, ...f })
    ),
    /* @__PURE__ */ d.createElement(_, { isOpen: A, preventInitialAnimation: s }, /* @__PURE__ */ d.createElement("div", { ...y, className: k([o && "tw-px-8 tw-pb-6"]) }, (m = (a = e.props).children) == null ? void 0 : m.call(a)))
  );
}, V = (e) => {
  const r = u.map(e, (o, c) => {
    const { header: n, children: i } = o.props;
    return /* @__PURE__ */ d.createElement(T, { key: c, textValue: n.children }, i ? () => i : null);
  }), t = r.map((o) => o.key).filter((o, c) => {
    var n, i;
    return o && !!((i = (n = e[c]) == null ? void 0 : n.props.header) != null && i.active);
  }) || [];
  return { children: r, defaultExpandedKeys: t };
}, W = ({ children: e }) => u.toArray(e).reduce((r, t) => C(t) && !t.props.header ? (console.warn("Use `AccordionItem` as children of `Accordion` and set the `header` prop accordingly."), r) : (C(t) && r.push(t), r), []), H = ({ children: e }) => /* @__PURE__ */ d.createElement(d.Fragment, null, e);
H.displayName = "FondueAccordionItem";
const Y = (e) => {
  var t, o, c;
  const r = u.toArray(e);
  return ((c = (o = (t = r[r.length - 1]) == null ? void 0 : t.props) == null ? void 0 : o.header) == null ? void 0 : c.active) === !0;
}, j = (e) => {
  const { divider: r = !0, border: t = !0, "data-test-id": o = M } = e, c = W(e), n = V(c), i = w(null), s = F(n), f = w({ firstRender: !0, childLength: u.toArray(e.children).length }), h = u.toArray(e.children).length;
  L(() => {
    Y(e.children) && !f.current.firstRender && u.toArray(e.children).length > f.current.childLength && s.toggleKey(n.defaultExpandedKeys[n.defaultExpandedKeys.length - 1]), f.current = { firstRender: !1, childLength: u.toArray(e.children).length };
  }, [n.defaultExpandedKeys, h, e.children, s]);
  const {
    // @react-aria prevents default action for onMouseDown as implemented here: https://github.com/adobe/react-spectrum/blob/e14523fedd93ac1a4ede355aed70988af572ae74/packages/%40react-aria/selection/src/useSelectableCollection.ts#L370
    // This makes it impossible to edit or select text in input fields inside the accordion
    // onKeydown automatically navigates away from child elements, including dropdown menus etc.
    // Focus should only be passed if the accordion item itself is focused
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    accordionProps: { onMouseDown: p, onKeyDown: y, ...A }
    // @react-aria enable by default typeahead which result in an event fired up on keypress and select the section
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    //@ts-ignore
  } = N({ ...n, disallowTypeAhead: !0 }, s, i), g = { ...A, onKeyDown: (a) => {
    const m = a.target.dataset.key, l = s.selectionManager.focusedKey === m;
    m && l && y && y(a);
  } };
  return /* @__PURE__ */ d.createElement(
    "div",
    {
      ...g,
      ref: i,
      "data-test-id": o,
      className: k([
        r && "tw-divide-y tw-divide-black-10",
        t && "tw-border-t tw-border-b tw-border-black-10"
      ])
    },
    [...s.collection].map((a, m) => {
      const {
        header: l,
        padding: v,
        headerComponent: K,
        divider: b,
        "data-test-id": D = I
      } = c[m].props;
      return /* @__PURE__ */ d.createElement(
        S,
        {
          key: a.key,
          item: a,
          state: s,
          divider: b,
          header: l,
          padding: v,
          headerComponent: K,
          "data-test-id": D
        }
      );
    })
  );
};
j.displayName = "FondueAccordion";
export {
  j as Accordion,
  H as AccordionItem
};
//# sourceMappingURL=Accordion.es.js.map
