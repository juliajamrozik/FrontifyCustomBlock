{"version":3,"file":"removeFragmentsAndEnrichChildren.es.js","sources":["../../../../src/components/Tree/utils/removeFragmentsAndEnrichChildren.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Children, ReactElement, ReactNode, cloneElement, isValidElement } from 'react';\nimport { isFragment } from 'react-is';\n\ntype EnrichedProps = {\n    parentId: string;\n    level: number;\n};\n\n/**\n * Recursively removes React Fragments and enriches the remaining child elements passed in with additional properties.\n *\n * @param children The child elements to remove React Fragments from and enrich.\n * @param enrichedProps Additional properties to add to each child element.\n * @returns An array of ReactElements with enriched props.\n *\n * @example\n *\n * const children = (\n *   <>\n *     <Child1 />\n *     <Child2 />\n *     <Child3 />\n *   </>\n * );\n *\n * const enrichedProps = {\n *   parentId: '12345',\n *   level: 2,\n * };\n *\n * const flattenedAndEnriched = flattenAndEnrichChildren(children, enrichedProps);\n *\n * @returns {ReactElement[]} Array with the three child elements from the example, each with the `parentId` and `level` props added.\n */\nexport const removeFragmentsAndEnrichChildren = (children?: ReactNode, enrichedProps?: EnrichedProps) => {\n    const result: ReactElement[] = [];\n\n    Children.forEach(children, (child) => {\n        if (isFragment(child)) {\n            result.push(...removeFragmentsAndEnrichChildren(child.props.children, enrichedProps));\n        } else {\n            isValidElement(child) && result.push(cloneElement(child, { ...(child.props ?? {}), ...enrichedProps }));\n        }\n    });\n\n    return result.filter(Boolean);\n};\n\nexport const recursivelyRemoveFragmentsAndEnrichChildren = (\n    children?: ReactNode,\n    enrichedProps?: EnrichedProps,\n): ReactElement[] => {\n    if (!children) {\n        return [];\n    }\n\n    const enriched = removeFragmentsAndEnrichChildren(children, enrichedProps);\n\n    return enriched.map((child: ReactElement) => {\n        const newEnriched = {\n            ...child,\n            props: {\n                ...child.props,\n                children: recursivelyRemoveFragmentsAndEnrichChildren(child.props.children, {\n                    parentId: child.props.id,\n                    level: child.props.level + 1,\n                }),\n            },\n        };\n\n        return newEnriched;\n    });\n};\n"],"names":["removeFragmentsAndEnrichChildren","children","enrichedProps","result","Children","child","isFragment","isValidElement","cloneElement","recursivelyRemoveFragmentsAndEnrichChildren"],"mappings":";;AAoCa,MAAAA,IAAmC,CAACC,GAAsBC,MAAkC;AACrG,QAAMC,IAAyB,CAAA;AAEtB,SAAAC,EAAA,QAAQH,GAAU,CAACI,MAAU;AAC9B,IAAAC,EAAWD,CAAK,IAChBF,EAAO,KAAK,GAAGH,EAAiCK,EAAM,MAAM,UAAUH,CAAa,CAAC,IAEpFK,EAAeF,CAAK,KAAKF,EAAO,KAAKK,EAAaH,GAAO,EAAE,GAAIA,EAAM,SAAS,CAAA,GAAK,GAAGH,EAAA,CAAe,CAAC;AAAA,EAC1G,CACH,GAEMC,EAAO,OAAO,OAAO;AAChC,GAEaM,IAA8C,CACvDR,GACAC,MAEKD,IAIYD,EAAiCC,GAAUC,CAAa,EAEzD,IAAI,CAACG,OACG;AAAA,EAChB,GAAGA;AAAA,EACH,OAAO;AAAA,IACH,GAAGA,EAAM;AAAA,IACT,UAAUI,EAA4CJ,EAAM,MAAM,UAAU;AAAA,MACxE,UAAUA,EAAM,MAAM;AAAA,MACtB,OAAOA,EAAM,MAAM,QAAQ;AAAA,IAAA,CAC9B;AAAA,EACL;AAAA,EAIP,IAlBU;"}