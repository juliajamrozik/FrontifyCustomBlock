import { ReactElement, ReactNode } from 'react';
type EnrichedProps = {
    parentId: string;
    level: number;
};
/**
 * Recursively removes React Fragments and enriches the remaining child elements passed in with additional properties.
 *
 * @param children The child elements to remove React Fragments from and enrich.
 * @param enrichedProps Additional properties to add to each child element.
 * @returns An array of ReactElements with enriched props.
 *
 * @example
 *
 * const children = (
 *   <>
 *     <Child1 />
 *     <Child2 />
 *     <Child3 />
 *   </>
 * );
 *
 * const enrichedProps = {
 *   parentId: '12345',
 *   level: 2,
 * };
 *
 * const flattenedAndEnriched = flattenAndEnrichChildren(children, enrichedProps);
 *
 * @returns {ReactElement[]} Array with the three child elements from the example, each with the `parentId` and `level` props added.
 */
export declare const removeFragmentsAndEnrichChildren: (children?: ReactNode, enrichedProps?: EnrichedProps) => ReactElement<any, string | import("react").JSXElementConstructor<any>>[];
export declare const recursivelyRemoveFragmentsAndEnrichChildren: (children?: ReactNode, enrichedProps?: EnrichedProps) => ReactElement[];
export {};
