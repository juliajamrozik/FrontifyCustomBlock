{"version":3,"file":"TreeItem.es.js","sources":["../../../../src/components/Tree/TreeItem/TreeItem.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport React, { Children, MouseEvent, memo, useCallback, useEffect, useMemo, useRef } from 'react';\nimport { AnimateLayoutChanges, useSortable } from '@dnd-kit/sortable';\nimport { useDndContext, useDndMonitor } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\nimport noop from 'lodash-es/noop';\n\nimport { merge } from '@utilities/merge';\nimport { FOCUS_VISIBLE_STYLE } from '@utilities/focusStyle';\n\nimport type {\n    RegisterNodeChildrenPayload,\n    TreeDragEndEvent,\n    TreeDragMoveEvent,\n    TreeDragStartEvent,\n    TreeItemProps,\n} from '@components/Tree/types';\n\nimport { EXPAND_ONHOVER_DELAY, INDENTATION_WIDTH, Projection } from '../helpers';\nimport { removeFragmentsAndEnrichChildren, useDeepCompareEffect } from '../utils';\n\nimport { DragHandle } from './DragHandle';\nimport { Overlay } from './TreeItemOverlay';\nimport { ExpandButton } from './ExpandButton';\nimport { useDebounce } from '@hooks/useDebounce';\nimport { useTreeItem } from './useTreeItem';\n\nconst animateLayoutChanges: AnimateLayoutChanges = ({ isSorting, wasDragging }) =>\n    isSorting || wasDragging ? false : true;\n\n/** @private */\ntype TreeItemPrivateProps = {\n    level?: number;\n    levelConstraint?: Nullable<number>;\n    parentId?: string;\n    isSelected?: boolean;\n    isExpanded?: boolean;\n    treeDraggable?: boolean;\n    /** onSelect is passed by the Tree component when cloning the TreeItem */\n    onSelect?: (id: string) => void;\n    /** onClick is the user defined callback to run after the onSelect */\n    onClick?: (id: string) => void;\n    onExpand?: (id: string) => void;\n    onShrink?: (id: string) => void;\n    projection?: Nullable<Projection>;\n    registerOverlay?: (overlay: Overlay) => void;\n    unregisterNodeChildren?: (payload: string) => void;\n    registerNodeChildren?: (payload: RegisterNodeChildrenPayload) => void;\n};\n\n/** @private */\nexport type InternalTreeItemProps = TreeItemProps & TreeItemPrivateProps;\n\nexport const TreeItem = memo(\n    ({\n        id,\n        type,\n        label,\n        onDrop,\n        accepts,\n        showCaret,\n        children,\n        parentId,\n        level = 0,\n        contentComponent,\n        treeDraggable = false,\n        onClick,\n        onSelect,\n        onExpand,\n        onShrink,\n        registerOverlay,\n        registerNodeChildren,\n        unregisterNodeChildren,\n        draggable: itemDraggable = true,\n        ignoreItemDoubleClick = false,\n        expandOnSelect = false,\n        'data-test-id': dataTestId = 'fondue-tree-item',\n    }: InternalTreeItemProps) => {\n        const { active, over } = useDndContext();\n        const { isSelected, isExpanded, projection } = useTreeItem(id);\n        const expandDebounced = useRef<Nullable<string> | undefined>();\n\n        const draggable = treeDraggable && itemDraggable;\n\n        const isActive = active?.id === id;\n        const activeProjection = isActive && projection !== null && projection !== undefined ? projection : null;\n\n        const overAccepts =\n            typeof over?.data?.current?.accepts === 'string' ? over.data.current.accepts?.split(', ') : [];\n\n        const parentAccepts =\n            typeof activeProjection?.accepts === 'string' ? activeProjection.accepts?.split(', ') : [];\n\n        const currentType = active?.data.current?.type || '';\n        const cleanCurrentType = currentType?.replace(/-\\d+$/, '') || '';\n\n        const isWithin =\n            projection?.previousNode?.depth !== undefined && projection?.depth > projection?.previousNode?.depth;\n        const isWithinOneLevel = isWithin && projection.depth - 1 === projection?.previousNode?.depth;\n\n        const canDropWithinAndDeeper =\n            isWithin &&\n            projection?.previousNode?.accepts !== undefined &&\n            (projection?.previousNode?.accepts.includes(`${cleanCurrentType}-deeper`) ||\n                projection?.previousNode?.accepts.includes(`${cleanCurrentType}-within`));\n\n        const canDropWithin =\n            (isActive &&\n                isWithinOneLevel &&\n                activeProjection?.previousNode?.accepts !== undefined &&\n                activeProjection?.previousNode?.accepts.includes(`${cleanCurrentType}-within`)) ||\n            (activeProjection?.isWithinParent && parentAccepts.includes(`${cleanCurrentType}-within`));\n\n        const canDrop =\n            isActive && active?.data.current && ((overAccepts.includes(currentType) && !isWithin) || canDropWithin);\n\n        const expandProjectionParent = useDebounce((toExpandId: string) => {\n            if (expandDebounced.current === toExpandId) {\n                onExpand?.(toExpandId);\n            }\n        }, EXPAND_ONHOVER_DELAY);\n\n        useEffect(() => {\n            if (isActive) {\n                expandDebounced.current = isWithin ? activeProjection?.previousNode?.id : null;\n            }\n\n            if (\n                isActive &&\n                canDropWithinAndDeeper &&\n                activeProjection?.parentId &&\n                activeProjection.previousNode &&\n                activeProjection.parentId === activeProjection.previousNode.id &&\n                activeProjection.parentId !== active?.data?.current?.parentId\n            ) {\n                expandProjectionParent(activeProjection?.parentId);\n            }\n        }, [\n            active?.data,\n            activeProjection?.parentId,\n            activeProjection?.previousNode,\n            expandProjectionParent,\n            isActive,\n            canDropWithinAndDeeper,\n            isWithin,\n        ]);\n\n        const handleItemDragEnd = useCallback(\n            (event: TreeDragEndEvent) => {\n                const { over, active } = event;\n\n                if (\n                    !isActive ||\n                    !activeProjection ||\n                    (active.id === over?.id && activeProjection?.depth === active.data.current?.level)\n                ) {\n                    return;\n                }\n\n                if (isActive && over && canDrop && onDrop) {\n                    onDrop({\n                        id: active.id,\n                        parentId: activeProjection.parentId,\n                        sort: activeProjection.position,\n                        contentComponent,\n                        parentType: activeProjection.type,\n                    });\n                }\n            },\n            [isActive, activeProjection, canDrop, onDrop, contentComponent],\n        );\n\n        const handleItemDragStart = useCallback(\n            (event: TreeDragStartEvent) => {\n                if (event.active.id !== id) {\n                    return;\n                }\n\n                registerOverlay?.({ contentComponent, children, id, label, level });\n            },\n            [children, contentComponent, id, label, level, registerOverlay],\n        );\n\n        const handleItemDragMove = useCallback(\n            (event: TreeDragMoveEvent) => {\n                if (event.active.id === id) {\n                    document.body.style.setProperty('cursor', canDrop ? 'grabbing' : 'no-drop');\n                }\n            },\n            [canDrop, id],\n        );\n\n        useDndMonitor({\n            onDragEnd: handleItemDragEnd,\n            onDragStart: handleItemDragStart,\n            onDragMove: handleItemDragMove,\n        });\n\n        const toggleExpand = useCallback(\n            (event?: MouseEvent<HTMLButtonElement>) => {\n                event?.stopPropagation();\n                isExpanded ? onShrink?.(id) : onExpand?.(id);\n            },\n            [id, isExpanded, onExpand, onShrink],\n        );\n\n        const handleItemClick = useDebounce(\n            (event: MouseEvent<HTMLElement>) => {\n                event.stopPropagation();\n                if (ignoreItemDoubleClick && event.detail >= 2) {\n                    return;\n                }\n\n                if (expandOnSelect) {\n                    toggleExpand();\n                }\n\n                onSelect?.(id);\n                onClick?.(id);\n            },\n            ignoreItemDoubleClick ? 300 : 0,\n        );\n\n        const isParentActive = parentId && active?.id === parentId;\n\n        const hasChildren = Children.count(children) > 0;\n\n        const { enrichedChildren, childrenIds } = useMemo(() => {\n            const enrichedChildren = removeFragmentsAndEnrichChildren(children, { parentId: id, level: level + 1 });\n            return {\n                enrichedChildren,\n                childrenIds: enrichedChildren.map((child) => child.props.id),\n            };\n        }, [children, id, level]);\n\n        const {\n            attributes,\n            listeners,\n            transform,\n            transition,\n            setDraggableNodeRef,\n            setDroppableNodeRef,\n            setActivatorNodeRef,\n        } = useSortable({\n            id,\n            disabled: !draggable,\n            data: { type, accepts, parentId, level },\n            animateLayoutChanges,\n            transition: null,\n        });\n\n        useDeepCompareEffect(() => {\n            if (Children.count(enrichedChildren) === 0) {\n                unregisterNodeChildren?.(id);\n                return;\n            }\n\n            if (isActive || isParentActive) {\n                unregisterNodeChildren?.(id);\n                return;\n            }\n\n            if (isExpanded) {\n                registerNodeChildren?.({ id, children: enrichedChildren });\n            } else {\n                unregisterNodeChildren?.(id);\n            }\n        }, [isActive, isExpanded, isParentActive, enrichedChildren, id]);\n\n        const liClassName = useMemo(\n            () =>\n                merge([\n                    FOCUS_VISIBLE_STYLE,\n                    'tw-cursor-default tw-transition-colors tw-outline-none tw-ring-inset tw-group tw-px-2.5 tw-no-underline tw-leading-5 tw-h-10',\n                    !isActive && !isSelected && 'active:tw-bg-box-neutral-pressed',\n                    !isActive && isSelected\n                        ? 'tw-font-medium tw-bg-box-neutral-strong tw-text-box-neutral-strong-inverse hover:tw-bg-box-neutral-strong-hover'\n                        : 'hover:tw-bg-box-neutral tw-text-text',\n                    transform?.y ? 'tw-bg-box-neutral-strong-inverse tw-text-text tw-font-normal' : '',\n                ]),\n            [isActive, isSelected, transform?.y],\n        );\n\n        const showContent = !isActive;\n        const showChildren = isExpanded && !isActive;\n        const showDragHandle = draggable && !isActive;\n        const showLabel = label !== undefined && !isActive;\n        const showExpandButton = !isActive && (showCaret === undefined ? hasChildren : showCaret);\n\n        let previousItemToBeExpandedFeedback = '';\n        if (\n            !isActive &&\n            !isExpanded &&\n            showExpandButton &&\n            canDropWithinAndDeeper &&\n            projection?.previousNode?.id === id &&\n            projection?.depth > projection?.previousNode?.depth\n        ) {\n            previousItemToBeExpandedFeedback = 'tw-border-solid tw-rounded tw-border-2 tw-border-box-selected-strong';\n        }\n\n        const containerClassName = merge([\n            'tw-transition-colors tw-flex tw-items-center tw-leading-5 tw-width-full',\n            isActive ? 'tw-border-dashed tw-rounded-sm tw-border-2 tw-pr-0 tw-h-12' : 'tw-h-10',\n            isActive &&\n                (canDrop\n                    ? 'tw-border-box-selected-strong tw-bg-box-selected-hover'\n                    : 'tw-bg-box-negative-hover tw-border-box-negative-strong-hover'),\n            previousItemToBeExpandedFeedback,\n        ]);\n\n        const depthPadding = activeProjection?.depth ? activeProjection.depth * INDENTATION_WIDTH : undefined;\n        const levelPadding = isActive ? 0 : level * INDENTATION_WIDTH;\n\n        const liStyle = {\n            paddingLeft: depthPadding ?? levelPadding,\n        };\n\n        const style = {\n            transform: CSS.Transform.toString(transform),\n            transition,\n        };\n\n        return (\n            <li\n                id={id}\n                key={id}\n                tabIndex={0}\n                role=\"treeitem\"\n                style={liStyle}\n                onKeyDown={noop}\n                aria-label={label}\n                aria-level={level + 1}\n                onClick={handleItemClick}\n                className={liClassName}\n                ref={setDroppableNodeRef}\n                data-test-id={dataTestId}\n                aria-selected={isSelected}\n                aria-expanded={isExpanded}\n                data-has-children={hasChildren}\n                aria-owns={childrenIds.join(' ')}\n            >\n                <div ref={setDraggableNodeRef} className={containerClassName} style={style}>\n                    <DragHandle\n                        {...listeners}\n                        {...attributes}\n                        active={isSelected}\n                        ref={setActivatorNodeRef}\n                        disabled={!showDragHandle}\n                        aria-hidden={!showDragHandle}\n                        className={showDragHandle ? 'tw-visible' : 'tw-invisible tw-pointer-events-none'}\n                    />\n\n                    <ExpandButton\n                        active={transform?.y ? false : isSelected}\n                        onClick={toggleExpand}\n                        expanded={showChildren}\n                        disabled={!showExpandButton}\n                        aria-hidden={!showExpandButton}\n                        className={showExpandButton ? 'tw-visible' : 'tw-invisible tw-pointer-events-none'}\n                    />\n\n                    {showLabel && (\n                        <span className=\"first:tw-ml-3.5 tw-w-full tw-h-full tw-flex tw-items-center\">{label}</span>\n                    )}\n\n                    {showContent && contentComponent}\n                </div>\n            </li>\n        );\n    },\n);\n\nTreeItem.displayName = 'FondueTreeItem';\n"],"names":["animateLayoutChanges","isSorting","wasDragging","TreeItem","memo","id","type","label","onDrop","accepts","showCaret","children","parentId","level","contentComponent","treeDraggable","onClick","onSelect","onExpand","onShrink","registerOverlay","registerNodeChildren","unregisterNodeChildren","itemDraggable","ignoreItemDoubleClick","expandOnSelect","dataTestId","active","over","useDndContext","isSelected","isExpanded","projection","useTreeItem","expandDebounced","useRef","draggable","isActive","activeProjection","overAccepts","_b","_a","_c","parentAccepts","_d","currentType","_e","cleanCurrentType","isWithin","_f","_g","isWithinOneLevel","_h","canDropWithinAndDeeper","_i","_j","_k","canDropWithin","_l","_m","canDrop","expandProjectionParent","useDebounce","toExpandId","EXPAND_ONHOVER_DELAY","useEffect","handleItemDragEnd","useCallback","event","handleItemDragStart","handleItemDragMove","useDndMonitor","toggleExpand","handleItemClick","isParentActive","hasChildren","Children","enrichedChildren","childrenIds","useMemo","removeFragmentsAndEnrichChildren","child","attributes","listeners","transform","transition","setDraggableNodeRef","setDroppableNodeRef","setActivatorNodeRef","useSortable","useDeepCompareEffect","liClassName","merge","FOCUS_VISIBLE_STYLE","showContent","showChildren","showDragHandle","showLabel","showExpandButton","previousItemToBeExpandedFeedback","_n","_o","containerClassName","depthPadding","INDENTATION_WIDTH","levelPadding","liStyle","style","CSS","React","noop","DragHandle","ExpandButton"],"mappings":"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"}