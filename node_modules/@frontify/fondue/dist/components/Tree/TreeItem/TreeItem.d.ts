import React from 'react';
import type { RegisterNodeChildrenPayload, TreeItemProps } from '../../Tree/types';
import { Projection } from '../helpers';
import { Overlay } from './TreeItemOverlay';
/** @private */
type TreeItemPrivateProps = {
    level?: number;
    levelConstraint?: Nullable<number>;
    parentId?: string;
    isSelected?: boolean;
    isExpanded?: boolean;
    treeDraggable?: boolean;
    /** onSelect is passed by the Tree component when cloning the TreeItem */
    onSelect?: (id: string) => void;
    /** onClick is the user defined callback to run after the onSelect */
    onClick?: (id: string) => void;
    onExpand?: (id: string) => void;
    onShrink?: (id: string) => void;
    projection?: Nullable<Projection>;
    registerOverlay?: (overlay: Overlay) => void;
    unregisterNodeChildren?: (payload: string) => void;
    registerNodeChildren?: (payload: RegisterNodeChildrenPayload) => void;
};
/** @private */
export type InternalTreeItemProps = TreeItemProps & TreeItemPrivateProps;
export declare const TreeItem: React.MemoExoticComponent<({ id, type, label, onDrop, accepts, showCaret, children, parentId, level, contentComponent, treeDraggable, onClick, onSelect, onExpand, onShrink, registerOverlay, registerNodeChildren, unregisterNodeChildren, draggable: itemDraggable, ignoreItemDoubleClick, expandOnSelect, "data-test-id": dataTestId, }: InternalTreeItemProps) => JSX.Element>;
export {};
