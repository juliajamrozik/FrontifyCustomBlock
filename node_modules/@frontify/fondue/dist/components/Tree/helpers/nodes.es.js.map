{"version":3,"file":"nodes.es.js","sources":["../../../../src/components/Tree/helpers/nodes.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { ReactElement } from 'react';\n\nexport const removeReactNodesFromFlatArray = (tree: ReactElement[], nodeIds: string[]): ReactElement[] => {\n    // Create a set of the node IDs to remove for faster lookup\n    const nodesToRemove = new Set(nodeIds);\n\n    // Filter the tree array to remove the nodes with IDs in the set\n    return tree.filter((node) => !nodesToRemove.has(node.props.id));\n};\n\nexport const getReactNodeIdsInFlatArray = (tree: ReactElement[], startingNodeId: string): string[] => {\n    const nodeIds: string[] = [];\n\n    // Create a map from node IDs to their corresponding nodes\n    const nodeMap = new Map<string, ReactElement>(tree.map((node) => [node.props.id, node]));\n\n    // Find the node with the given id\n    const startingNode = nodeMap.get(startingNodeId);\n\n    if (startingNode) {\n        // Recursively find all child nodes\n        function findChildNodes(nodeId: number) {\n            const children = tree.filter((child) => child.props.parentId === nodeId);\n            for (const child of children) {\n                nodeIds.push(child.props.id);\n                findChildNodes(child.props.id);\n            }\n        }\n\n        findChildNodes(startingNode.props.id);\n    }\n\n    return nodeIds;\n};\n\nexport const getReactNodesInFlatArray = (tree: ReactElement[], startingNodeId: string): ReactElement[] => {\n    const nodes: ReactElement[] = [];\n\n    // Create a map from node IDs to their corresponding nodes\n    const nodeMap = new Map<string, ReactElement>(tree.map((node) => [node.props.id, node]));\n\n    // Find the node with the given id\n    const startingNode = nodeMap.get(startingNodeId);\n\n    if (startingNode) {\n        // Recursively find all child nodes\n        function findChildNodes(nodeId: number) {\n            const children = tree.filter((child) => child.props.parentId === nodeId);\n            for (const child of children) {\n                nodes.push(child);\n                findChildNodes(child.props.id);\n            }\n        }\n\n        findChildNodes(startingNode.props.id);\n    }\n\n    return nodes;\n};\n"],"names":["removeReactNodesFromFlatArray","tree","nodeIds","nodesToRemove","node","getReactNodeIdsInFlatArray","startingNodeId","startingNode","findChildNodes","nodeId","children","child","getReactNodesInFlatArray","nodes"],"mappings":"AAIa,MAAAA,IAAgC,CAACC,GAAsBC,MAAsC;AAEhG,QAAAC,IAAgB,IAAI,IAAID,CAAO;AAG9B,SAAAD,EAAK,OAAO,CAACG,MAAS,CAACD,EAAc,IAAIC,EAAK,MAAM,EAAE,CAAC;AAClE,GAEaC,IAA6B,CAACJ,GAAsBK,MAAqC;AAClG,QAAMJ,IAAoB,CAAA,GAMpBK,IAHU,IAAI,IAA0BN,EAAK,IAAI,CAACG,MAAS,CAACA,EAAK,MAAM,IAAIA,CAAI,CAAC,CAAC,EAG1D,IAAIE,CAAc;AAE/C,MAAIC,GAAc;AAEL,QAAAC,IAAT,SAAwBC,GAAgB;AAC9B,YAAAC,IAAWT,EAAK,OAAO,CAACU,MAAUA,EAAM,MAAM,aAAaF,CAAM;AACvE,iBAAWE,KAASD;AACR,QAAAR,EAAA,KAAKS,EAAM,MAAM,EAAE,GACZH,EAAAG,EAAM,MAAM,EAAE;AAAA,IACjC;AAGW,IAAAH,EAAAD,EAAa,MAAM,EAAE;AAAA,EACxC;AAEO,SAAAL;AACX,GAEaU,IAA2B,CAACX,GAAsBK,MAA2C;AACtG,QAAMO,IAAwB,CAAA,GAMxBN,IAHU,IAAI,IAA0BN,EAAK,IAAI,CAACG,MAAS,CAACA,EAAK,MAAM,IAAIA,CAAI,CAAC,CAAC,EAG1D,IAAIE,CAAc;AAE/C,MAAIC,GAAc;AAEL,QAAAC,IAAT,SAAwBC,GAAgB;AAC9B,YAAAC,IAAWT,EAAK,OAAO,CAACU,MAAUA,EAAM,MAAM,aAAaF,CAAM;AACvE,iBAAWE,KAASD;AAChB,QAAAG,EAAM,KAAKF,CAAK,GACDH,EAAAG,EAAM,MAAM,EAAE;AAAA,IACjC;AAGW,IAAAH,EAAAD,EAAa,MAAM,EAAE;AAAA,EACxC;AAEO,SAAAM;AACX;"}