{"version":3,"file":"getMovementAnnouncements.es.js","sources":["../../../../src/components/Tree/helpers/getMovementAnnouncements.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Dispatch, SetStateAction } from 'react';\nimport { arrayMove } from '@dnd-kit/sortable';\n\nimport { TreeState } from '../types';\n\ntype AnnouncementItem = {\n    level: number;\n    id: string;\n    parentId?: string;\n};\n\ntype AnnouncementArgs = {\n    eventName: string;\n    activeId: string;\n    activeTitle: string;\n    overId?: string;\n    overTitle?: string;\n    treeState: TreeState;\n    currentPosition: Nullable<{ overId: string; parentId: Nullable<string> }>;\n    setCurrentPosition: Dispatch<\n        SetStateAction<\n            Nullable<{\n                overId: string;\n                parentId: Nullable<string>;\n            }>\n        >\n    >;\n};\n\nexport const getMovementAnnouncement = ({\n    eventName,\n    activeId,\n    activeTitle,\n    overId,\n    overTitle,\n    treeState,\n    currentPosition,\n    setCurrentPosition,\n}: AnnouncementArgs) => {\n    const projected = treeState.projection;\n\n    if (overId && projected) {\n        if (eventName !== 'onDragEnd') {\n            if (\n                currentPosition &&\n                projected.parentId === currentPosition.parentId &&\n                overId === currentPosition.overId\n            ) {\n                return;\n            } else {\n                setCurrentPosition({\n                    parentId: projected.parentId,\n                    overId,\n                });\n            }\n        }\n\n        const announcementNodes: AnnouncementItem[] = treeState.nodes.map(({ props }) => ({\n            id: props.id,\n            level: props.level ?? 0,\n            parentId: props.parentId,\n        }));\n\n        const overIndex = announcementNodes.findIndex(({ id }) => id === overId);\n        const activeIndex = announcementNodes.findIndex(({ id }) => id === activeId);\n        const sortedItems = arrayMove(announcementNodes, activeIndex, overIndex);\n\n        const previousItem = sortedItems[overIndex - 1];\n\n        let announcement;\n        const movedVerb = eventName === 'onDragEnd' ? 'dropped' : 'moved';\n        const nestedVerb = eventName === 'onDragEnd' ? 'dropped' : 'nested';\n\n        if (!previousItem) {\n            const nextItem = sortedItems[overIndex + 1];\n            announcement = `${activeTitle} was ${movedVerb} before ${overTitle || nextItem.id}.`;\n        } else {\n            if (projected.depth > previousItem.level) {\n                announcement = `${activeTitle} was ${nestedVerb} under ${overTitle || previousItem.id}.`;\n            } else {\n                let previousSibling: AnnouncementItem | undefined = previousItem;\n                while (previousSibling && projected.depth < previousSibling.level) {\n                    const parentId: string | undefined = previousSibling.parentId;\n                    previousSibling = sortedItems.find(({ id }) => id === parentId);\n                }\n\n                if (previousSibling) {\n                    announcement = `${activeTitle} was ${movedVerb} after ${overTitle || previousSibling.id}.`;\n                }\n            }\n        }\n\n        return announcement;\n    }\n\n    return;\n};\n"],"names":["getMovementAnnouncement","eventName","activeId","activeTitle","overId","overTitle","treeState","currentPosition","setCurrentPosition","projected","announcementNodes","props","overIndex","id","activeIndex","sortedItems","arrayMove","previousItem","announcement","movedVerb","nestedVerb","previousSibling","parentId","nextItem"],"mappings":";AA+BO,MAAMA,IAA0B,CAAC;AAAA,EACpC,WAAAC;AAAA,EACA,UAAAC;AAAA,EACA,aAAAC;AAAA,EACA,QAAAC;AAAA,EACA,WAAAC;AAAA,EACA,WAAAC;AAAA,EACA,iBAAAC;AAAA,EACA,oBAAAC;AACJ,MAAwB;AACpB,QAAMC,IAAYH,EAAU;AAE5B,MAAIF,KAAUK,GAAW;AACrB,QAAIR,MAAc,aAAa;AAC3B,UACIM,KACAE,EAAU,aAAaF,EAAgB,YACvCH,MAAWG,EAAgB;AAE3B;AAEmB,MAAAC,EAAA;AAAA,QACf,UAAUC,EAAU;AAAA,QACpB,QAAAL;AAAA,MAAA,CACH;AAAA,IAET;AAEA,UAAMM,IAAwCJ,EAAU,MAAM,IAAI,CAAC,EAAE,OAAAK,SAAa;AAAA,MAC9E,IAAIA,EAAM;AAAA,MACV,OAAOA,EAAM,SAAS;AAAA,MACtB,UAAUA,EAAM;AAAA,IAClB,EAAA,GAEIC,IAAYF,EAAkB,UAAU,CAAC,EAAE,IAAAG,QAASA,MAAOT,CAAM,GACjEU,IAAcJ,EAAkB,UAAU,CAAC,EAAE,IAAAG,QAASA,MAAOX,CAAQ,GACrEa,IAAcC,EAAUN,GAAmBI,GAAaF,CAAS,GAEjEK,IAAeF,EAAYH,IAAY,CAAC;AAE1C,QAAAM;AACE,UAAAC,IAAYlB,MAAc,cAAc,YAAY,SACpDmB,IAAanB,MAAc,cAAc,YAAY;AAE3D,QAAKgB;AAIG,UAAAR,EAAU,QAAQQ,EAAa;AAC/B,QAAAC,IAAe,GAAGf,SAAmBiB,WAAoBf,KAAaY,EAAa;AAAA,WAChF;AACH,YAAII,IAAgDJ;AACpD,eAAOI,KAAmBZ,EAAU,QAAQY,EAAgB,SAAO;AAC/D,gBAAMC,IAA+BD,EAAgB;AACrD,UAAAA,IAAkBN,EAAY,KAAK,CAAC,EAAE,IAAAF,QAASA,MAAOS,CAAQ;AAAA,QAClE;AAEA,QAAID,MACAH,IAAe,GAAGf,SAAmBgB,WAAmBd,KAAagB,EAAgB;AAAA,MAE7F;AAAA,SAhBe;AACT,YAAAE,IAAWR,EAAYH,IAAY,CAAC;AAC1C,MAAAM,IAAe,GAAGf,SAAmBgB,YAAoBd,KAAakB,EAAS;AAAA,IAAA;AAiB5E,WAAAL;AAAA,EACX;AAGJ;"}