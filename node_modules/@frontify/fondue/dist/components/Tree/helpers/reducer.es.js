import a from "../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isEqualWith.es.js";
import { getReactNodeIdsInFlatArray as l, removeReactNodesFromFlatArray as h, getReactNodesInFlatArray as I } from "./nodes.es.js";
const m = (r, o) => r.findIndex((t) => t.props.id === o), x = (r, o) => r.filter((t) => t.props.parentId === o).map((t) => t.props.id), F = (r, o, t) => {
  const s = l(r, o), e = s.length > 0 ? h(r, s) : r, n = m(e, o);
  return n === -1 ? r : [...e.slice(0, n + 1), ...t, ...e.slice(n + 1)];
}, N = (r, o, t) => {
  const s = [];
  for (const e of t)
    if (s.push(e), !!o.has(e.props.id))
      for (const n of I(r, e.props.id))
        s.push(n);
  return s;
}, C = (r, o, t) => {
  var s, e;
  for (const n of r) {
    const p = t.find((f) => f.props.id === n), d = (s = p == null ? void 0 : p.props) == null ? void 0 : s.contentComponent, i = o.find((f) => f.props.id === n), c = (e = i == null ? void 0 : i.props) == null ? void 0 : e.contentComponent;
    if ((!c || !d) && !a(i == null ? void 0 : i.props, p == null ? void 0 : p.props, u) || !a(c == null ? void 0 : c.props, d == null ? void 0 : d.props, u))
      return !0;
  }
  return !1;
}, u = (r, o) => {
  if (typeof r == "function" || typeof o == "function")
    return !0;
};
export {
  C as currentNodesChanged,
  m as findIndexById,
  N as getCurrentChildrenForNewNodesIfExpanded,
  x as getNodeChildrenIds,
  F as updateNodeWithNewChildren
};
//# sourceMappingURL=reducer.es.js.map
