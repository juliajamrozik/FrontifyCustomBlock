{"version":3,"file":"reducer.es.js","sources":["../../../../src/components/Tree/helpers/reducer.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { ReactElement } from 'react';\n\nimport type { InternalTreeItemProps } from '../TreeItem';\nimport isEqualWith from 'lodash-es/isEqualWith';\nimport { getReactNodeIdsInFlatArray, getReactNodesInFlatArray, removeReactNodesFromFlatArray } from './nodes';\n\nexport const findIndexById = (nodes: ReactElement<InternalTreeItemProps>[], id: string) => {\n    return nodes.findIndex((node) => node.props.id === id);\n};\n\nexport const getNodeChildrenIds = (nodes: ReactElement<InternalTreeItemProps>[], id: string) => {\n    return nodes.filter((node) => node.props.parentId === id).map((node) => node.props.id);\n};\n\nexport const updateNodeWithNewChildren = (\n    nodes: ReactElement<InternalTreeItemProps>[],\n    parentId: string,\n    children: ReactElement[],\n) => {\n    const nodeIds = getReactNodeIdsInFlatArray(nodes, parentId);\n    const cleanNodes = nodeIds.length > 0 ? removeReactNodesFromFlatArray(nodes, nodeIds) : nodes;\n    const parentIndex = findIndexById(cleanNodes, parentId);\n    if (parentIndex === -1) {\n        return nodes;\n    }\n\n    return [...cleanNodes.slice(0, parentIndex + 1), ...children, ...cleanNodes.slice(parentIndex + 1)];\n};\n\nexport const getCurrentChildrenForNewNodesIfExpanded = (\n    currentNodes: ReactElement[],\n    expandedIds: Set<string>,\n    newNodes: ReactElement[],\n) => {\n    const updatedTreeNode: ReactElement[] = [];\n    for (const node of newNodes) {\n        updatedTreeNode.push(node);\n\n        if (!expandedIds.has(node.props.id)) {\n            continue;\n        }\n\n        for (const child of getReactNodesInFlatArray(currentNodes, node.props.id)) {\n            updatedTreeNode.push(child);\n        }\n    }\n\n    return updatedTreeNode;\n};\n\nexport const currentNodesChanged = (\n    currentChildrenIds: string[],\n    currentNodes: ReactElement<InternalTreeItemProps>[],\n    newNodes: ReactElement<InternalTreeItemProps>[],\n) => {\n    for (const nodeId of currentChildrenIds) {\n        const newNode = newNodes.find((n) => n.props.id === nodeId);\n        const newContentComponent = newNode?.props?.contentComponent as Partial<ReactElement>;\n\n        const currentNode = currentNodes.find((n) => n.props.id === nodeId);\n        const currentContentComponent = currentNode?.props?.contentComponent as Partial<ReactElement>;\n\n        if (\n            (!currentContentComponent || !newContentComponent) &&\n            !isEqualWith(currentNode?.props, newNode?.props, isEqualCustomizer)\n        ) {\n            return true;\n        }\n\n        if (!isEqualWith(currentContentComponent?.props, newContentComponent?.props, isEqualCustomizer)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst isEqualCustomizer = (nodeProp: unknown, othernodeProp: unknown): boolean | undefined => {\n    if (typeof nodeProp === 'function' || typeof othernodeProp === 'function') {\n        return true;\n    }\n};\n"],"names":["findIndexById","nodes","id","node","getNodeChildrenIds","updateNodeWithNewChildren","parentId","children","nodeIds","getReactNodeIdsInFlatArray","cleanNodes","removeReactNodesFromFlatArray","parentIndex","getCurrentChildrenForNewNodesIfExpanded","currentNodes","expandedIds","newNodes","updatedTreeNode","child","getReactNodesInFlatArray","currentNodesChanged","currentChildrenIds","nodeId","newNode","n","newContentComponent","_a","currentNode","currentContentComponent","_b","isEqualWith","isEqualCustomizer","nodeProp","othernodeProp"],"mappings":";;AAQa,MAAAA,IAAgB,CAACC,GAA8CC,MACjED,EAAM,UAAU,CAACE,MAASA,EAAK,MAAM,OAAOD,CAAE,GAG5CE,IAAqB,CAACH,GAA8CC,MACtED,EAAM,OAAO,CAACE,MAASA,EAAK,MAAM,aAAaD,CAAE,EAAE,IAAI,CAACC,MAASA,EAAK,MAAM,EAAE,GAG5EE,IAA4B,CACrCJ,GACAK,GACAC,MACC;AACK,QAAAC,IAAUC,EAA2BR,GAAOK,CAAQ,GACpDI,IAAaF,EAAQ,SAAS,IAAIG,EAA8BV,GAAOO,CAAO,IAAIP,GAClFW,IAAcZ,EAAcU,GAAYJ,CAAQ;AACtD,SAAIM,MAAgB,KACTX,IAGJ,CAAC,GAAGS,EAAW,MAAM,GAAGE,IAAc,CAAC,GAAG,GAAGL,GAAU,GAAGG,EAAW,MAAME,IAAc,CAAC,CAAC;AACtG,GAEaC,IAA0C,CACnDC,GACAC,GACAC,MACC;AACD,QAAMC,IAAkC,CAAA;AACxC,aAAWd,KAAQa;AAGf,QAFAC,EAAgB,KAAKd,CAAI,GAErB,EAACY,EAAY,IAAIZ,EAAK,MAAM,EAAE;AAIlC,iBAAWe,KAASC,EAAyBL,GAAcX,EAAK,MAAM,EAAE;AACpE,QAAAc,EAAgB,KAAKC,CAAK;AAI3B,SAAAD;AACX,GAEaG,IAAsB,CAC/BC,GACAP,GACAE,MACC;;AACD,aAAWM,KAAUD,GAAoB;AAC/B,UAAAE,IAAUP,EAAS,KAAK,CAACQ,MAAMA,EAAE,MAAM,OAAOF,CAAM,GACpDG,KAAsBC,IAAAH,KAAA,gBAAAA,EAAS,UAAT,gBAAAG,EAAgB,kBAEtCC,IAAcb,EAAa,KAAK,CAACU,MAAMA,EAAE,MAAM,OAAOF,CAAM,GAC5DM,KAA0BC,IAAAF,KAAA,gBAAAA,EAAa,UAAb,gBAAAE,EAAoB;AASpD,SANK,CAACD,KAA2B,CAACH,MAC9B,CAACK,EAAYH,KAAA,gBAAAA,EAAa,OAAOJ,KAAA,gBAAAA,EAAS,OAAOQ,CAAiB,KAKlE,CAACD,EAAYF,KAAA,gBAAAA,EAAyB,OAAOH,KAAA,gBAAAA,EAAqB,OAAOM,CAAiB;AACnF,aAAA;AAAA,EAEf;AACO,SAAA;AACX,GAEMA,IAAoB,CAACC,GAAmBC,MAAgD;AAC1F,MAAI,OAAOD,KAAa,cAAc,OAAOC,KAAkB;AACpD,WAAA;AAEf;"}