const c = (n, e) => {
  const s = new Set(e);
  return n.filter((p) => !s.has(p.props.id));
}, a = (n, e) => {
  const s = [], r = new Map(n.map((o) => [o.props.id, o])).get(e);
  if (r) {
    let o = function(d) {
      const i = n.filter((t) => t.props.parentId === d);
      for (const t of i)
        s.push(t.props.id), o(t.props.id);
    };
    o(r.props.id);
  }
  return s;
}, l = (n, e) => {
  const s = [], r = new Map(n.map((o) => [o.props.id, o])).get(e);
  if (r) {
    let o = function(d) {
      const i = n.filter((t) => t.props.parentId === d);
      for (const t of i)
        s.push(t), o(t.props.id);
    };
    o(r.props.id);
  }
  return s;
};
export {
  a as getReactNodeIdsInFlatArray,
  l as getReactNodesInFlatArray,
  c as removeReactNodesFromFlatArray
};
//# sourceMappingURL=nodes.es.js.map
