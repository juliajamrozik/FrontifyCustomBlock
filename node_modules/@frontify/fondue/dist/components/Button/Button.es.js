import p, { forwardRef as $, cloneElement as I } from "react";
import { useButton as O } from "@react-aria/button";
import { merge as r } from "../../utilities/merge.es.js";
import { useForwardedRef as U } from "../../utilities/useForwardedRef.es.js";
import { ButtonStyle as o, ButtonEmphasis as u, ButtonType as V, ButtonSize as _, ButtonRounding as k } from "./ButtonTypes.es.js";
import { UpdatedButtonStyle as st } from "./ButtonTypes.es.js";
import { ButtonCommonClasses as z, ButtonRoundingClasses as T, ButtonSizeClasses as d, IconSpacingClasses as W, ButtonStyleClasses as Y, ButtonDisabledClasses as j } from "./ButtonClasses.es.js";
import { FOCUS_VISIBLE_STYLE as q } from "../../utilities/focusStyle.es.js";
import { buttonTypeMap as v, buttonIconSizeMap as A } from "./mappings.es.js";
import { useFocusRing as G } from "@react-aria/focus";
const H = ({
  type: S = V.Button,
  style: t = o.Default,
  size: e = _.Medium,
  rounding: b = k.Medium,
  emphasis: n = u.Strong,
  hideLabel: m = !1,
  disabled: a = !1,
  icon: i,
  children: s,
  onClick: c,
  hugWidth: y = !0,
  "aria-label": C,
  "aria-describedby": g,
  formId: E,
  solid: w,
  inverted: D,
  "data-test-id": f = "button"
}, R) => {
  t === o.Primary ? (t = o.Default, n = u.Strong) : t === o.Secondary && (t = o.Default, n = u.Default), w === !1 && (n = u.Weak);
  const B = U(R), { buttonProps: F } = O(
    { onPress: () => c && c(), isDisabled: a, type: v[S] },
    B
  ), { isFocusVisible: N, focusProps: x } = G(), l = (P) => a ? j : `${Y[n][t][P]}`, M = r([
    l("button"),
    z,
    T[b],
    i && !s || m ? d[e].iconOnly : d[e].default,
    !y && "tw-w-full"
  ]);
  return /* @__PURE__ */ p.createElement(
    "button",
    {
      "data-test-id": f,
      "aria-label": C,
      "aria-disabled": a,
      "aria-describedby": g,
      ref: B,
      className: r([M, D && "tw-dark", N && q]),
      disabled: a,
      form: E,
      ...F,
      ...x
    },
    i && /* @__PURE__ */ p.createElement(
      "span",
      {
        "data-test-id": `${f}-icon`,
        className: r([s && !m ? W[e] : "", l("icon")])
      },
      I(i, { size: A[e] })
    ),
    s && /* @__PURE__ */ p.createElement(
      "span",
      {
        "data-test-id": `${f}-text`,
        className: r([l("text"), m && "tw-sr-only"])
      },
      s
    )
  );
}, J = $(H);
J.displayName = "FondueButton";
export {
  J as Button,
  z as ButtonCommonClasses,
  j as ButtonDisabledClasses,
  u as ButtonEmphasis,
  k as ButtonRounding,
  T as ButtonRoundingClasses,
  _ as ButtonSize,
  d as ButtonSizeClasses,
  o as ButtonStyle,
  Y as ButtonStyleClasses,
  V as ButtonType,
  W as IconSpacingClasses,
  st as UpdatedButtonStyle
};
//# sourceMappingURL=Button.es.js.map
