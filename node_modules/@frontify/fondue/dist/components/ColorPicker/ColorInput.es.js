import { TextInputType as g } from "../TextInput/TextInput.es.js";
import { useMemoizedId as k } from "../../hooks/useMemoizedId.es.js";
import { useFocusRing as y } from "@react-aria/focus";
import { FOCUS_STYLE as R } from "../../utilities/focusStyle.es.js";
import { merge as n } from "../../utilities/merge.es.js";
import r, { useRef as v } from "react";
var E = /* @__PURE__ */ ((e) => (e.Left = "Left", e.Right = "Right", e))(E || {});
const T = ({
  min: e,
  max: l,
  decorator: i,
  onChange: o,
  onEnterPressed: w,
  size: c,
  onBlur: u,
  value: m = "",
  decoratorPosition: a = "Left",
  type: p = g.Text
}) => {
  const { isFocusVisible: f, focusProps: d } = y({ within: !0, isTextInput: !0 }), s = v(null), h = (t) => {
    const { key: x, shiftKey: b } = t;
    x === "Enter" && !b && w && w(t);
  };
  return /* @__PURE__ */ r.createElement(
    "div",
    {
      ...d,
      className: n([
        "tw-flex tw-items-center tw-h-9 tw-px-2 tw-border tw-rounded tw-text-s tw-font-sans tw-relative tw-bg-white dark:tw-bg-transparent focus-within:tw-border-black-90 tw-border-black-20",
        f && R
      ]),
      "data-test-id": "color-input"
    },
    /* @__PURE__ */ r.createElement(
      "div",
      {
        className: n([
          "tw-flex tw-gap-1",
          a === "Right" && "tw-flex-row-reverse"
        ])
      },
      i && /* @__PURE__ */ r.createElement("div", { className: "tw-flex tw-items-center tw-justify-center tw-text-black-80" }, i),
      /* @__PURE__ */ r.createElement(
        "input",
        {
          id: k(),
          ref: s,
          className: n([
            "tw-grow tw-border-none tw-outline-none tw-bg-transparent tw-hide-input-arrows tw-text-black tw-placeholder-black-60 dark:tw-text-white",
            a === "Right" && "tw-text-right"
          ]),
          onClick: () => {
            var t;
            return (t = s.current) == null ? void 0 : t.focus();
          },
          onKeyDown: h,
          onChange: (t) => o && o(t.currentTarget.value),
          onBlur: u,
          value: m,
          type: p,
          min: e,
          max: l,
          size: c
        }
      )
    )
  );
};
T.displayName = "FondueColorInput";
export {
  T as ColorInput,
  E as DecoratorPosition
};
//# sourceMappingURL=ColorInput.es.js.map
